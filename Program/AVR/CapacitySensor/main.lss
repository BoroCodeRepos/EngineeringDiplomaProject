
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00003ae0  00003b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ae0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000288  0080011c  0080011c  00003bb0  2**0
                  ALLOC
  3 .eeprom       00000024  00810000  00810000  00003bb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000008c  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c60  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000971a  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000284e  00000000  00000000  0000d882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004753  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d68  00000000  00000000  00014824  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033cf  00000000  00000000  0001558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005075  00000000  00000000  0001895b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0001d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c2       	rjmp	.+1386   	; 0x56c <__ctors_end>
       2:	00 00       	nop
       4:	cf c2       	rjmp	.+1438   	; 0x5a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c2       	rjmp	.+1434   	; 0x5a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c2       	rjmp	.+1430   	; 0x5a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c2       	rjmp	.+1426   	; 0x5a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c2       	rjmp	.+1422   	; 0x5a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c2       	rjmp	.+1418   	; 0x5a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c2       	rjmp	.+1414   	; 0x5a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c2       	rjmp	.+1410   	; 0x5a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c2       	rjmp	.+1406   	; 0x5a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_10>
      2c:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__vector_11>
      30:	b9 c2       	rjmp	.+1394   	; 0x5a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c2       	rjmp	.+1390   	; 0x5a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c2       	rjmp	.+1386   	; 0x5a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c2       	rjmp	.+1382   	; 0x5a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_16>
      44:	af c2       	rjmp	.+1374   	; 0x5a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c2       	rjmp	.+1370   	; 0x5a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c2       	rjmp	.+1366   	; 0x5a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c2       	rjmp	.+1362   	; 0x5a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c2       	rjmp	.+1358   	; 0x5a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c2       	rjmp	.+1354   	; 0x5a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c2       	rjmp	.+1350   	; 0x5a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c2       	rjmp	.+1346   	; 0x5a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c2       	rjmp	.+1342   	; 0x5a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c2       	rjmp	.+1338   	; 0x5a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c2       	rjmp	.+1334   	; 0x5a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c2       	rjmp	.+1330   	; 0x5a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c2       	rjmp	.+1326   	; 0x5a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c2       	rjmp	.+1322   	; 0x5a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c2       	rjmp	.+1318   	; 0x5a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c2       	rjmp	.+1314   	; 0x5a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c2       	rjmp	.+1310   	; 0x5a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c2       	rjmp	.+1306   	; 0x5a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c2       	rjmp	.+1302   	; 0x5a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c2       	rjmp	.+1298   	; 0x5a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c2       	rjmp	.+1294   	; 0x5a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c2       	rjmp	.+1290   	; 0x5a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c2       	rjmp	.+1286   	; 0x5a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c2       	rjmp	.+1282   	; 0x5a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c2       	rjmp	.+1278   	; 0x5a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c2       	rjmp	.+1274   	; 0x5a4 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	25 75       	andi	r18, 0x55	; 85
      ae:	0d 0a       	sbc	r0, r29
      b0:	00 25       	eor	r16, r0

000000b1 <__c.4950>:
      b1:	25 75 20 00                                         %u .

000000b5 <__c.4947>:
      b5:	25 63 20 00                                         %c .

000000b9 <__c.4945>:
      b9:	25 63 20 25 73 20 00                                %c %s .

000000c0 <__c.4943>:
      c0:	25 63 20 25 73 20 00                                %c %s .

000000c7 <__c.4938>:
      c7:	45 72 72 6f 72 3a 20 4d 65 61 73 75 72 65 6d 65     Error: Measureme
      d7:	6e 74 20 74 69 6d 65 6f 75 74 20 74 68 65 20 74     nt timeout the t
      e7:	65 73 74 65 64 20 63 61 70 61 63 69 74 79 2e 0d     ested capacity..
      f7:	0a 00                                               ..

000000f9 <__c.4933>:
      f9:	45 72 72 6f 72 3a 20 44 69 73 63 68 61 72 67 69     Error: Dischargi
     109:	6e 67 20 74 68 65 20 74 65 73 74 65 64 20 63 61     ng the tested ca
     119:	70 61 63 69 74 79 20 69 73 20 75 6e 61 74 74 61     pacity is unatta
     129:	69 6e 61 62 6c 65 2e 0d 0a 00                       inable....

00000133 <__c.4929>:
     133:	45 72 72 6f 72 3a 20 43 68 65 63 6b 20 74 68 65     Error: Check the
     143:	20 70 6f 77 65 72 20 73 75 70 70 6c 79 20 6f 66      power supply of
     153:	20 74 68 65 20 6d 6f 64 75 6c 65 2e 0d 0a 00         the module....

00000162 <__c.4924>:
     162:	45 72 72 6f 72 3a 20 55 6e 72 65 63 6f 67 6e 69     Error: Unrecogni
     172:	7a 65 64 20 43 6f 6d 6d 61 6e 64 3a 20 25 63 0d     zed Command: %c.
     182:	0a 00                                               ..

00000184 <__c.4921>:
     184:	4f 4b 0d 0a 00                                      OK...

00000189 <__c.4919>:
     189:	54 20 2d 2d 2d 2d 2d 2d 20 20 52 48 20 2d 2d 2d     T ------  RH ---
     199:	2d 2d 2d 20 00                                      --- .

0000019e <__c.4917>:
     19e:	52 48 20 25 73 20 25 25 00                          RH %s %%.

000001a7 <__c.4915>:
     1a7:	54 20 25 73 25 63 43 20 00                          T %s%cC .

000001b0 <__c.4913>:
     1b0:	25 73 00                                            %s.

000001b3 <__c.4911>:
     1b3:	54 69 63 6b 73 20 25 73 20 2f 20 00                 Ticks %s / .

000001bf <__c.4909>:
     1bf:	43 61 70 61 63 69 74 79 20 25 73 20 70 46 00        Capacity %s pF.

000001ce <__c.4907>:
     1ce:	54 69 6d 65 53 74 61 6d 70 20 20 25 73 00           TimeStamp  %s.

000001dc <__c.4905>:
     1dc:	50 20 25 73 2f 31 30 30 00                          P %s/100.

000001e5 <__c.4903>:
     1e5:	74 20 25 73 20 00                                   t %s .

000001eb <__c.4895>:
     1eb:	4f 4b 0d 0a 00                                      OK...

000001f0 <__c.4891>:
     1f0:	4f 4b 0d 0a 00                                      OK...

000001f5 <__c.4888>:
     1f5:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 55 6e     Device Error: Un
     205:	72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d 6d 61     recognized Comma
     215:	6e 64 3a 20 25 63 0d 0a 00                          nd: %c...

0000021e <__c.4885>:
     21e:	4f 4b 0d 0a 00                                      OK...

00000223 <__c.4882>:
     223:	4f 4b 0d 0a 00                                      OK...

00000228 <__c.4879>:
     228:	4f 4b 0d 0a 00                                      OK...

0000022d <__c.4876>:
     22d:	4f 4b 0d 0a 00                                      OK...

00000232 <__c.4873>:
     232:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 53 48     Device Error: SH
     242:	54 43 33 20 6d 6f 64 75 6c 65 20 75 6e 72 65 67     TC3 module unreg
     252:	69 73 74 65 72 65 64 0d 0a 00                       istered...

0000025c <__c.4871>:
     25c:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 52 65     Device Error: Re
     26c:	61 64 20 74 65 6d 70 65 72 61 74 75 72 65 20 75     ad temperature u
     27c:	6e 65 78 70 65 63 74 65 64 20 65 72 72 6f 72 3a     nexpected error:
     28c:	20 25 75 0d 0a 00                                    %u...

00000292 <__c.4869>:
     292:	25 73 0d 0a 00                                      %s...

00000297 <__c.4867>:
     297:	25 73 20 00                                         %s .

0000029b <__c.4862>:
     29b:	4f 4b 0d 0a 00                                      OK...

000002a0 <__c.4859>:
     2a0:	25 73 0d 0a 00                                      %s...

000002a5 <__c.4857>:
     2a5:	25 73 20 00                                         %s .

000002a9 <__c.4855>:
     2a9:	25 73 20 00                                         %s .

000002ad <__c.4853>:
     2ad:	25 73 20 00                                         %s .

000002b1 <__c.4850>:
     2b1:	4f 4b 0d 0a 00                                      OK...

000002b6 <__c.4846>:
     2b6:	25 6c 75 0d 0a 00                                   %lu...

000002bc <__c.4844>:
     2bc:	25 73 20 00                                         %s .

000002c0 <__c.4842>:
     2c0:	25 73 20 00                                         %s .

000002c4 <__c.4840>:
     2c4:	25 73 20 00                                         %s .

000002c8 <__c.4838>:
     2c8:	25 73 20 00                                         %s .

000002cc <__c.4831>:
     2cc:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 55 53     Device Error: US
     2dc:	42 20 42 75 66 66 65 72 20 4f 76 65 72 66 6c 6f     B Buffer Overflo
     2ec:	77 21 0d 0a 00                                      w!...

000002f1 <__c.4823>:
     2f1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     301:	2a 2a 2a 2a 00                                      ****.

00000306 <__c.4821>:
     306:	2a 20 20 50 47 20 32 30 32 32 20 2f 20 32 30 32     *  PG 2022 / 202
     316:	33 20 20 2a 00                                      3  *.

0000031b <__c.4819>:
     31b:	2a 20 20 43 61 70 61 63 69 74 79 53 65 6e 73 6f     *  CapacitySenso
     32b:	72 20 20 2a 00                                      r  *.

00000330 <__c.4817>:
     330:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     340:	2a 2a 2a 2a 00                                      ****.

00000345 <Corrections_PROGMEM>:
     345:	45 47 4e 40 78 7a 8f c0 83 c0 32 40 1b 9e 94 c0     EGN@xz....2@....

00000355 <Constants_PROGMEM>:
     355:	66 66 56 40 f0 a7 d6 3f 6a bc a0 40 00 00 00 00     ffV@...?j..@....
     365:	7c ea 02 00                                         |...

00000369 <ProductString>:
     369:	38 03 43 00 61 00 70 00 61 00 63 00 69 00 74 00     8.C.a.p.a.c.i.t.
     379:	79 00 53 00 65 00 6e 00 73 00 6f 00 72 00 5f 00     y.S.e.n.s.o.r._.
     389:	50 00 47 00 5f 00 32 00 30 00 32 00 32 00 2f 00     P.G._.2.0.2.2./.
     399:	32 00 30 00 32 00 33 00 00 00                       2.0.2.3...

000003a3 <ManufacturerString>:
     3a3:	3e 03 53 00 31 00 37 00 39 00 39 00 39 00 31 00     >.S.1.7.9.9.9.1.
     3b3:	20 00 42 00 6f 00 72 00 6f 00 77 00 69 00 63 00      .B.o.r.o.w.i.c.
     3c3:	6b 00 69 00 20 00 41 00 72 00 6b 00 61 00 64 00     k.i. .A.r.k.a.d.
     3d3:	69 00 75 00 73 00 7a 00 20 00 50 00 47 00 00 00     i.u.s.z. .P.G...

000003e3 <LanguageString>:
     3e3:	04 03 09 04                                         ....

000003e7 <ConfigurationDescriptor>:
     3e7:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     3f7:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     407:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     417:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000425 <DeviceDescriptor>:
     425:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     435:	dc 01                                               ..

00000437 <pstr_nan>:
     437:	4e 41 4e                                            NAN

0000043a <pstr_inity>:
     43a:	49 4e 49 54 59                                      INITY

0000043f <pstr_inf>:
     43f:	49 4e 46                                            INF

00000442 <pwr_m10>:
     442:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     452:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000045a <pwr_p10>:
     45a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     46a:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     47a:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     48a:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     49a:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4aa:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     4ba:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4ca:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4da:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     4ea:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     4fa:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     50a:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     51a:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     52a:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     53a:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     54a:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     55a:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     56a:	3d 27                                               ='

0000056c <__ctors_end>:
     56c:	11 24       	eor	r1, r1
     56e:	1f be       	out	0x3f, r1	; 63
     570:	cf ef       	ldi	r28, 0xFF	; 255
     572:	da e0       	ldi	r29, 0x0A	; 10
     574:	de bf       	out	0x3e, r29	; 62
     576:	cd bf       	out	0x3d, r28	; 61

00000578 <__do_copy_data>:
     578:	11 e0       	ldi	r17, 0x01	; 1
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	e0 ee       	ldi	r30, 0xE0	; 224
     580:	fa e3       	ldi	r31, 0x3A	; 58
     582:	02 c0       	rjmp	.+4      	; 0x588 <__do_copy_data+0x10>
     584:	05 90       	lpm	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	ac 31       	cpi	r26, 0x1C	; 28
     58a:	b1 07       	cpc	r27, r17
     58c:	d9 f7       	brne	.-10     	; 0x584 <__do_copy_data+0xc>

0000058e <__do_clear_bss>:
     58e:	23 e0       	ldi	r18, 0x03	; 3
     590:	ac e1       	ldi	r26, 0x1C	; 28
     592:	b1 e0       	ldi	r27, 0x01	; 1
     594:	01 c0       	rjmp	.+2      	; 0x598 <.do_clear_bss_start>

00000596 <.do_clear_bss_loop>:
     596:	1d 92       	st	X+, r1

00000598 <.do_clear_bss_start>:
     598:	a4 3a       	cpi	r26, 0xA4	; 164
     59a:	b2 07       	cpc	r27, r18
     59c:	e1 f7       	brne	.-8      	; 0x596 <.do_clear_bss_loop>
     59e:	d6 d0       	rcall	.+428    	; 0x74c <main>
     5a0:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <_exit>

000005a4 <__bad_interrupt>:
     5a4:	2d cd       	rjmp	.-1446   	; 0x0 <__vectors>

000005a6 <DisableInputCapture>:
	sbi(TIMSK1, ICIE1);
}
void DisableInputCapture(void)
{
	/* Timer Clock - No Prescaling - Disable */
	cbi(TCCR1B, CS10);
     5a6:	e1 e8       	ldi	r30, 0x81	; 129
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	8e 7f       	andi	r24, 0xFE	; 254
     5ae:	80 83       	st	Z, r24
	/* Input Capture Interrupt Disable */
	cbi(TIMSK1, ICIE1);
     5b0:	ef e6       	ldi	r30, 0x6F	; 111
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	8f 7d       	andi	r24, 0xDF	; 223
     5b8:	80 83       	st	Z, r24
     5ba:	08 95       	ret

000005bc <dtostr>:
	}

	return M + (W - W % P) / 100.;
}
char * dtostr(double N, byte AfterPoint)
{
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	24 2f       	mov	r18, r20
	static char double_buf[20];
	dtostrf(N, -20, AfterPoint, double_buf);
     5c2:	0c e1       	ldi	r16, 0x1C	; 28
     5c4:	11 e0       	ldi	r17, 0x01	; 1
     5c6:	4c ee       	ldi	r20, 0xEC	; 236
     5c8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <dtostrf>
     5cc:	f8 01       	movw	r30, r16
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
	for (byte i = 0; i < 20; i++)
	{
		if (double_buf[i] == ' ')
     5d2:	21 91       	ld	r18, Z+
     5d4:	20 32       	cpi	r18, 0x20	; 32
     5d6:	29 f4       	brne	.+10     	; 0x5e2 <dtostr+0x26>
		{
			double_buf[i] = 0;
     5d8:	fc 01       	movw	r30, r24
     5da:	e4 5e       	subi	r30, 0xE4	; 228
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	10 82       	st	Z, r1
			break;
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <dtostr+0x2e>
     5e2:	01 96       	adiw	r24, 0x01	; 1
}
char * dtostr(double N, byte AfterPoint)
{
	static char double_buf[20];
	dtostrf(N, -20, AfterPoint, double_buf);
	for (byte i = 0; i < 20; i++)
     5e4:	84 31       	cpi	r24, 0x14	; 20
     5e6:	91 05       	cpc	r25, r1
     5e8:	a1 f7       	brne	.-24     	; 0x5d2 <dtostr+0x16>
			double_buf[i] = 0;
			break;
		}
	}
	return double_buf;
}
     5ea:	8c e1       	ldi	r24, 0x1C	; 28
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	08 95       	ret

000005f4 <TemperatureMeasurement>:
	return Status_OK;
}

/* Temperature & Humidity Measuring Function */
STATUS_t TemperatureMeasurement(void)
{
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
	if (System.IsSHTRegistered)
     608:	80 91 88 02 	lds	r24, 0x0288
     60c:	81 ff       	sbrs	r24, 1
     60e:	92 c0       	rjmp	.+292    	; 0x734 <TemperatureMeasurement+0x140>
	{
		SHT_STATUS_t Status = sht_meas();
     610:	0e 94 3f 0b 	call	0x167e	; 0x167e <sht_meas>
		if (Status == SHT_Status_Nominal)
     614:	81 11       	cpse	r24, r1
     616:	86 c0       	rjmp	.+268    	; 0x724 <TemperatureMeasurement+0x130>
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
     618:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <sht_temperature>
     61c:	4b 01       	movw	r8, r22
     61e:	5c 01       	movw	r10, r24

/* Base Conversions Functions */
double Round(double N, double Precision)
{
	int M = (int)N;
	int W = (int)((N - M) * 100);
     620:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixsfsi>
     624:	07 2e       	mov	r0, r23
     626:	00 0c       	add	r0, r0
     628:	88 0b       	sbc	r24, r24
     62a:	99 0b       	sbc	r25, r25
     62c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatsisf>
     630:	6b 01       	movw	r12, r22
     632:	7c 01       	movw	r14, r24
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c5 01       	movw	r24, r10
     63a:	b4 01       	movw	r22, r8
     63c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__subsf3>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	48 ec       	ldi	r20, 0xC8	; 200
     646:	52 e4       	ldi	r21, 0x42	; 66
     648:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     64c:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixsfsi>
     650:	8b 01       	movw	r16, r22
     652:	9c 01       	movw	r18, r24
	int P = (int)(Precision * 100);
	int T = W % P;
     654:	cb 01       	movw	r24, r22
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__divmodhi4>
     65e:	b8 01       	movw	r22, r16
     660:	68 1b       	sub	r22, r24
     662:	79 0b       	sbc	r23, r25

	if (T > (P >> 1))
     664:	06 97       	sbiw	r24, 0x06	; 6
     666:	14 f0       	brlt	.+4      	; 0x66c <TemperatureMeasurement+0x78>
	{
		return M + (W - W % P + P) / 100.;
     668:	66 5f       	subi	r22, 0xF6	; 246
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	return M + (W - W % P) / 100.;
     66c:	07 2e       	mov	r0, r23
     66e:	00 0c       	add	r0, r0
     670:	88 0b       	sbc	r24, r24
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatsisf>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 ec       	ldi	r20, 0xC8	; 200
     67e:	52 e4       	ldi	r21, 0x42	; 66
     680:	0e 94 4f 13 	call	0x269e	; 0x269e <__divsf3>
     684:	a7 01       	movw	r20, r14
     686:	96 01       	movw	r18, r12
     688:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__addsf3>
	if (System.IsSHTRegistered)
	{
		SHT_STATUS_t Status = sht_meas();
		if (Status == SHT_Status_Nominal)
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
     68c:	60 93 8e 03 	sts	0x038E, r22
     690:	70 93 8f 03 	sts	0x038F, r23
     694:	80 93 90 03 	sts	0x0390, r24
     698:	90 93 91 03 	sts	0x0391, r25
			System.Humidity = Round(sht_humidity(), PRECISION);
     69c:	0e 94 ef 0b 	call	0x17de	; 0x17de <sht_humidity>
     6a0:	4b 01       	movw	r8, r22
     6a2:	5c 01       	movw	r10, r24

/* Base Conversions Functions */
double Round(double N, double Precision)
{
	int M = (int)N;
	int W = (int)((N - M) * 100);
     6a4:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixsfsi>
     6a8:	07 2e       	mov	r0, r23
     6aa:	00 0c       	add	r0, r0
     6ac:	88 0b       	sbc	r24, r24
     6ae:	99 0b       	sbc	r25, r25
     6b0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatsisf>
     6b4:	6b 01       	movw	r12, r22
     6b6:	7c 01       	movw	r14, r24
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	c5 01       	movw	r24, r10
     6be:	b4 01       	movw	r22, r8
     6c0:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__subsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 ec       	ldi	r20, 0xC8	; 200
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     6d0:	0e 94 b7 13 	call	0x276e	; 0x276e <__fixsfsi>
     6d4:	8b 01       	movw	r16, r22
     6d6:	9c 01       	movw	r18, r24
	int P = (int)(Precision * 100);
	int T = W % P;
     6d8:	cb 01       	movw	r24, r22
     6da:	6a e0       	ldi	r22, 0x0A	; 10
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__divmodhi4>
     6e2:	b8 01       	movw	r22, r16
     6e4:	68 1b       	sub	r22, r24
     6e6:	79 0b       	sbc	r23, r25

	if (T > (P >> 1))
     6e8:	06 97       	sbiw	r24, 0x06	; 6
     6ea:	14 f0       	brlt	.+4      	; 0x6f0 <TemperatureMeasurement+0xfc>
	{
		return M + (W - W % P + P) / 100.;
     6ec:	66 5f       	subi	r22, 0xF6	; 246
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	return M + (W - W % P) / 100.;
     6f0:	07 2e       	mov	r0, r23
     6f2:	00 0c       	add	r0, r0
     6f4:	88 0b       	sbc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__floatsisf>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	48 ec       	ldi	r20, 0xC8	; 200
     702:	52 e4       	ldi	r21, 0x42	; 66
     704:	0e 94 4f 13 	call	0x269e	; 0x269e <__divsf3>
     708:	a7 01       	movw	r20, r14
     70a:	96 01       	movw	r18, r12
     70c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__addsf3>
	{
		SHT_STATUS_t Status = sht_meas();
		if (Status == SHT_Status_Nominal)
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
			System.Humidity = Round(sht_humidity(), PRECISION);
     710:	60 93 92 03 	sts	0x0392, r22
     714:	70 93 93 03 	sts	0x0393, r23
     718:	80 93 94 03 	sts	0x0394, r24
     71c:	90 93 95 03 	sts	0x0395, r25
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	09 c0       	rjmp	.+18     	; 0x736 <TemperatureMeasurement+0x142>
			return Status_OK;
		}
		else
		{
			System.IsSHTRegistered = false;
     724:	80 91 88 02 	lds	r24, 0x0288
     728:	8d 7f       	andi	r24, 0xFD	; 253
     72a:	80 93 88 02 	sts	0x0288, r24
			twi_error();
     72e:	c0 d5       	rcall	.+2944   	; 0x12b0 <twi_error>
			return Status_Error;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	01 c0       	rjmp	.+2      	; 0x736 <TemperatureMeasurement+0x142>
		}
	}
	return Status_Unregistered;
     734:	83 e0       	ldi	r24, 0x03	; 3
}
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	08 95       	ret

0000074c <main>:
#include "main.h"

/* Main Function */
int main(void)
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	a7 97       	sbiw	r28, 0x27	; 39
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
}
/* Base Initialization Functions */
void Init_IO(void)
{
	/* IO initialization */
	MEASURING_SYSTEM_OFF;
     760:	2e 9a       	sbi	0x05, 6	; 5
	LEDS_OFF;
     762:	47 98       	cbi	0x08, 7	; 8
     764:	5d 98       	cbi	0x0b, 5	; 11
     766:	28 98       	cbi	0x05, 0	; 5
	SET_INTERNAL_PULLUPS;
     768:	5c 9a       	sbi	0x0b, 4	; 11
     76a:	5a 9a       	sbi	0x0b, 2	; 11
     76c:	5b 9a       	sbi	0x0b, 3	; 11
	SET_PORTS_DIR;
     76e:	26 9a       	sbi	0x04, 6	; 4
     770:	27 9a       	sbi	0x04, 7	; 4
     772:	3f 9a       	sbi	0x07, 7	; 7
     774:	55 9a       	sbi	0x0a, 5	; 10
     776:	20 9a       	sbi	0x04, 0	; 4
}
void Init_Pheripherals(void)
{
	twi_init(TWI_FREQ_400kHz);
     778:	60 e8       	ldi	r22, 0x80	; 128
     77a:	7a e1       	ldi	r23, 0x1A	; 26
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	92 d5       	rcall	.+2852   	; 0x12a6 <twi_init>
	System.IsLCDRegistered = twi_detect(LCD_ADDR);
     782:	87 e2       	ldi	r24, 0x27	; 39
     784:	cd d5       	rcall	.+2970   	; 0x1320 <twi_detect>
     786:	90 91 88 02 	lds	r25, 0x0288
     78a:	80 fb       	bst	r24, 0
     78c:	90 f9       	bld	r25, 0
     78e:	90 93 88 02 	sts	0x0288, r25
	System.IsSHTRegistered = twi_detect(SHT_ADDR);
     792:	80 e7       	ldi	r24, 0x70	; 112
     794:	c5 d5       	rcall	.+2954   	; 0x1320 <twi_detect>
     796:	90 91 88 02 	lds	r25, 0x0288
     79a:	80 fb       	bst	r24, 0
     79c:	91 f9       	bld	r25, 1
     79e:	90 93 88 02 	sts	0x0288, r25

	/* Device initialization */
	if (System.IsSHTRegistered)
     7a2:	80 91 88 02 	lds	r24, 0x0288
     7a6:	81 ff       	sbrs	r24, 1
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <main+0x62>
	{
		sht_init();
     7aa:	4f d7       	rcall	.+3742   	; 0x164a <sht_init>
		LED2_ON;
     7ac:	5d 9a       	sbi	0x0b, 5	; 11
	}
	if (System.IsLCDRegistered)
     7ae:	80 91 88 02 	lds	r24, 0x0288
     7b2:	80 ff       	sbrs	r24, 0
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <main+0x74>
	{
		lcd_init();
     7b6:	85 d6       	rcall	.+3338   	; 0x14c2 <lcd_init>
		lcd_create_stream(&LCD_Stream);
     7b8:	8b e3       	ldi	r24, 0x3B	; 59
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	6a d6       	rcall	.+3284   	; 0x1492 <lcd_create_stream>
		LED3_ON;
     7be:	28 9a       	sbi	0x05, 0	; 5
#include "main.h"

/* Main Function */
int main(void)
{
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
void Init_Variables(void)
{
	/* Buffors initialization */
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE; i++)
	{
		System.Samples[i] = 0;
     7c4:	fc 01       	movw	r30, r24
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e8 57       	subi	r30, 0x78	; 120
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	12 82       	std	Z+2, r1	; 0x02
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	01 96       	adiw	r24, 0x01	; 1
	}
}
void Init_Variables(void)
{
	/* Buffors initialization */
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE; i++)
     7d4:	82 38       	cpi	r24, 0x82	; 130
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f7       	brne	.-22     	; 0x7c4 <main+0x78>
	{
		System.Samples[i] = 0;
	}
	/* Variables initialization */
	System.IsCMDReceived = false;
     7da:	80 91 88 02 	lds	r24, 0x0288
     7de:	87 7f       	andi	r24, 0xF7	; 247
     7e0:	80 93 88 02 	sts	0x0288, r24
	System.IsMeasurementEnd = false;
     7e4:	80 91 88 02 	lds	r24, 0x0288
     7e8:	8f 7e       	andi	r24, 0xEF	; 239
     7ea:	80 93 88 02 	sts	0x0288, r24
	System.IsHostReady  = false;
     7ee:	80 91 88 02 	lds	r24, 0x0288
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	80 93 88 02 	sts	0x0288, r24
	System.Temperature = -45.0;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	a4 e3       	ldi	r26, 0x34	; 52
     7fe:	b2 ec       	ldi	r27, 0xC2	; 194
     800:	80 93 8e 03 	sts	0x038E, r24
     804:	90 93 8f 03 	sts	0x038F, r25
     808:	a0 93 90 03 	sts	0x0390, r26
     80c:	b0 93 91 03 	sts	0x0391, r27
	System.Humidity = 0.0;
     810:	10 92 92 03 	sts	0x0392, r1
     814:	10 92 93 03 	sts	0x0393, r1
     818:	10 92 94 03 	sts	0x0394, r1
     81c:	10 92 95 03 	sts	0x0395, r1
	RingBuffer_Init(&USB_Buffer, Buffer, MAX_USB_BUF_SIZE);
     820:	40 e8       	ldi	r20, 0x80	; 128
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	6b eb       	ldi	r22, 0xBB	; 187
     826:	71 e0       	ldi	r23, 0x01	; 1
     828:	81 eb       	ldi	r24, 0xB1	; 177
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	e1 d7       	rcall	.+4034   	; 0x17f0 <RingBuffer_Init>
	/* Constants Values from EEPROM */
	READ_CONSTANTS__EEMEM;
     82e:	44 e1       	ldi	r20, 0x14	; 20
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	60 e1       	ldi	r22, 0x10	; 16
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	87 e6       	ldi	r24, 0x67	; 103
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__eerd_block_m32u4>
	/* Corrections Values from EEPROM */
	READ_CORRECTIONS__EEMEM;
     83e:	40 e1       	ldi	r20, 0x10	; 16
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	87 e5       	ldi	r24, 0x57	; 87
     848:	92 e0       	ldi	r25, 0x02	; 2
     84a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__eerd_block_m32u4>
//READ_CONSTANTS__PGM;
//READ_CORRECTIONS__PGM;
void Init_USB(void)
{
	/* USB initialization */
	cbi(MCUSR, WDRF);
     84e:	84 b7       	in	r24, 0x34	; 52
     850:	87 7f       	andi	r24, 0xF7	; 247
     852:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     854:	88 e1       	ldi	r24, 0x18	; 24
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	80 93 60 00 	sts	0x0060, r24
     85e:	10 92 60 00 	sts	0x0060, r1
     862:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	80 93 61 00 	sts	0x0061, r24
     870:	90 93 61 00 	sts	0x0061, r25
     874:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	USB_Init();
     876:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <USB_Init>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USB_Stream);
     87a:	69 e4       	ldi	r22, 0x49	; 73
     87c:	72 e0       	ldi	r23, 0x02	; 2
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 25 12 	call	0x244a	; 0x244a <CDC_Device_CreateStream>
}
void Init_InputCapture(void)
{
#if ENABLE_NOISE_CANCELER
	/* Input Capture Noise Canceler For ICP1 */
	sbi(TCCR1B, ICNC1);
     886:	80 91 81 00 	lds	r24, 0x0081
     88a:	80 68       	ori	r24, 0x80	; 128
     88c:	80 93 81 00 	sts	0x0081, r24
#endif
	/* Input Capture Edge Select - Rising Edge */
	sbi(TCCR1B, ICES1);
     890:	80 91 81 00 	lds	r24, 0x0081
     894:	80 64       	ori	r24, 0x40	; 64
     896:	80 93 81 00 	sts	0x0081, r24
}
void Init_Message(void)
{
	if (System.IsLCDRegistered)
     89a:	80 91 88 02 	lds	r24, 0x0288
     89e:	80 ff       	sbrs	r24, 0
     8a0:	18 c0       	rjmp	.+48     	; 0x8d2 <main+0x186>
	{
		lcd_str_al_P(0, 0, PSTR("********************"));
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	e3 d5       	rcall	.+3014   	; 0x146e <lcd_locate>
     8a8:	80 e3       	ldi	r24, 0x30	; 48
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	66 d6       	rcall	.+3276   	; 0x157a <lcd_str_P>
		lcd_str_al_P(1, 0, PSTR("*  CapacitySensor  *"));
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	dd d5       	rcall	.+3002   	; 0x146e <lcd_locate>
     8b4:	8b e1       	ldi	r24, 0x1B	; 27
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	60 d6       	rcall	.+3264   	; 0x157a <lcd_str_P>
		lcd_str_al_P(2, 0, PSTR("*  PG 2022 / 2023  *"));
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	d7 d5       	rcall	.+2990   	; 0x146e <lcd_locate>
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	5a d6       	rcall	.+3252   	; 0x157a <lcd_str_P>
		lcd_str_al_P(3, 0, PSTR("********************"));
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	d1 d5       	rcall	.+2978   	; 0x146e <lcd_locate>
     8cc:	81 ef       	ldi	r24, 0xF1	; 241
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	54 d6       	rcall	.+3240   	; 0x157a <lcd_str_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8d2:	2f ef       	ldi	r18, 0xFF	; 255
     8d4:	33 ed       	ldi	r19, 0xD3	; 211
     8d6:	80 e3       	ldi	r24, 0x30	; 48
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <main+0x18c>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <main+0x196>
     8e2:	00 00       	nop
	}
	_delay_ms(1000);
	LEDS_OFF;
     8e4:	47 98       	cbi	0x08, 7	; 8
     8e6:	5d 98       	cbi	0x0b, 5	; 11
     8e8:	28 98       	cbi	0x05, 0	; 5
     8ea:	9f ef       	ldi	r25, 0xFF	; 255
     8ec:	e9 e6       	ldi	r30, 0x69	; 105
     8ee:	f8 e1       	ldi	r31, 0x18	; 24
     8f0:	91 50       	subi	r25, 0x01	; 1
     8f2:	e0 40       	sbci	r30, 0x00	; 0
     8f4:	f0 40       	sbci	r31, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <main+0x1a4>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <main+0x1ae>
     8fa:	00 00       	nop
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     8fc:	78 94       	sei
	{
		/* Buffer Overflow Error */
		RingBuffer_Clear(&USB_Buffer);
		CMD_BufferOverflow = true;
		LED_CMD_REC_ON;
		fprintf_P(&USB_Stream, PSTR("Device Error: USB Buffer Overflow!\r\n"));
     8fe:	09 e4       	ldi	r16, 0x49	; 73
     900:	12 e0       	ldi	r17, 0x02	; 2
				{
					if (System.IsLCDRegistered)
					{
						byte TimeStamp[10], Capacity[10], TicksCP[7], TicksDP[7], Progress[5];

						RingBuffer_GetAsString(&USB_Buffer, TimeStamp, ' ');
     902:	6e 01       	movw	r12, r28
     904:	2b e0       	ldi	r18, 0x0B	; 11
     906:	c2 0e       	add	r12, r18
     908:	d1 1c       	adc	r13, r1
						RingBuffer_GetAsString(&USB_Buffer, Capacity, ' ');
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	1c 01       	movw	r2, r24
						RingBuffer_GetAsString(&USB_Buffer, TicksCP, ' ');
     910:	2e 01       	movw	r4, r28
     912:	9c e1       	ldi	r25, 0x1C	; 28
     914:	49 0e       	add	r4, r25
     916:	51 1c       	adc	r5, r1
						RingBuffer_GetAsString(&USB_Buffer, TicksDP, ' ');
     918:	3e 01       	movw	r6, r28
     91a:	e5 e1       	ldi	r30, 0x15	; 21
     91c:	6e 0e       	add	r6, r30
     91e:	71 1c       	adc	r7, r1
						RingBuffer_GetAsString(&USB_Buffer, Progress, ENDCMD);
     920:	4e 01       	movw	r8, r28
     922:	f3 e2       	ldi	r31, 0x23	; 35
     924:	8f 0e       	add	r8, r31
     926:	91 1c       	adc	r9, r1
						else
						{
							fprintf_P(&LCD_Stream, PSTR("TimeStamp  %s"), TimeStamp);
						}
						lcd_locate(1, 0);
						fprintf_P(&LCD_Stream, PSTR("Capacity %s pF"), Capacity);
     928:	9b e3       	ldi	r25, 0x3B	; 59
     92a:	e9 2e       	mov	r14, r25
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	f9 2e       	mov	r15, r25

/* Accumulating & Parsing Data */
void USB_ReceiveData(void)
{
	static bool CMD_BufferOverflow = false;
	if (!RingBuffer_IsFull(&USB_Buffer))
     930:	81 eb       	ldi	r24, 0xB1	; 177
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	ea d7       	rcall	.+4052   	; 0x190a <RingBuffer_IsFull>
     936:	81 11       	cpse	r24, r1
     938:	20 c0       	rjmp	.+64     	; 0x97a <main+0x22e>
	{
		int16_t USB_Received = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <CDC_Device_ReceiveByte>
		/* Check Received Status */
		if (USB_Received >= 0)
     942:	97 fd       	sbrc	r25, 7
     944:	2d c0       	rjmp	.+90     	; 0x9a0 <main+0x254>
		{
			/* Insert Received Data */
			byte Data = (byte)USB_Received;
     946:	b8 2e       	mov	r11, r24
			RingBuffer_Insert(&USB_Buffer, Data);
     948:	68 2f       	mov	r22, r24
     94a:	81 eb       	ldi	r24, 0xB1	; 177
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	64 d7       	rcall	.+3784   	; 0x1818 <RingBuffer_Insert>
			if (Data == ENDCMD)
     950:	2a e0       	ldi	r18, 0x0A	; 10
     952:	b2 12       	cpse	r11, r18
     954:	25 c0       	rjmp	.+74     	; 0x9a0 <main+0x254>
			{
				if (CMD_BufferOverflow)
     956:	80 91 30 01 	lds	r24, 0x0130
     95a:	88 23       	and	r24, r24
     95c:	39 f0       	breq	.+14     	; 0x96c <main+0x220>
				{
					RingBuffer_Clear(&USB_Buffer);
     95e:	81 eb       	ldi	r24, 0xB1	; 177
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	52 d7       	rcall	.+3748   	; 0x1808 <RingBuffer_Clear>
					CMD_BufferOverflow = false;
     964:	10 92 30 01 	sts	0x0130, r1
					LED_CMD_REC_OFF;
     968:	47 98       	cbi	0x08, 7	; 8
     96a:	1a c0       	rjmp	.+52     	; 0x9a0 <main+0x254>
				}
				else
				{
					/* CMD Received Flag */
					System.IsCMDReceived = true;
     96c:	80 91 88 02 	lds	r24, 0x0288
     970:	88 60       	ori	r24, 0x08	; 8
     972:	80 93 88 02 	sts	0x0288, r24
					LED_CMD_REC_ON;
     976:	47 9a       	sbi	0x08, 7	; 8
     978:	13 c0       	rjmp	.+38     	; 0x9a0 <main+0x254>
		}
	}
	else
	{
		/* Buffer Overflow Error */
		RingBuffer_Clear(&USB_Buffer);
     97a:	81 eb       	ldi	r24, 0xB1	; 177
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	44 d7       	rcall	.+3720   	; 0x1808 <RingBuffer_Clear>
		CMD_BufferOverflow = true;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 30 01 	sts	0x0130, r24
		LED_CMD_REC_ON;
     986:	47 9a       	sbi	0x08, 7	; 8
		fprintf_P(&USB_Stream, PSTR("Device Error: USB Buffer Overflow!\r\n"));
     988:	8c ec       	ldi	r24, 0xCC	; 204
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	1f 93       	push	r17
     992:	0f 93       	push	r16
     994:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
	}
}
void CMD_Parse(void)
{
	if (System.IsCMDReceived)
     9a0:	80 91 88 02 	lds	r24, 0x0288
     9a4:	83 ff       	sbrs	r24, 3
     9a6:	db c3       	rjmp	.+1974   	; 0x115e <__stack+0x65f>
	{
		/* Clear Flag */
		System.IsCMDReceived = false;
     9a8:	80 91 88 02 	lds	r24, 0x0288
     9ac:	87 7f       	andi	r24, 0xF7	; 247
     9ae:	80 93 88 02 	sts	0x0288, r24
		/* Size of Received Data */
		size_t Size = RingBuffer_Size(&USB_Buffer);
     9b2:	81 eb       	ldi	r24, 0xB1	; 177
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	bd d7       	rcall	.+3962   	; 0x1932 <RingBuffer_Size>

		if (Size == 2)
     9b8:	02 97       	sbiw	r24, 0x02	; 2
     9ba:	09 f0       	breq	.+2      	; 0x9be <main+0x272>
     9bc:	2f c2       	rjmp	.+1118   	; 0xe1c <__stack+0x31d>
		{
			/* Primary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD);
     9be:	4a e0       	ldi	r20, 0x0A	; 10
     9c0:	61 e3       	ldi	r22, 0x31	; 49
     9c2:	71 e0       	ldi	r23, 0x01	; 1
     9c4:	81 eb       	ldi	r24, 0xB1	; 177
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	6b d7       	rcall	.+3798   	; 0x18a0 <RingBuffer_GetAsString>
			switch (CMD_Buffer[0])
     9ca:	80 91 31 01 	lds	r24, 0x0131
     9ce:	89 34       	cpi	r24, 0x49	; 73
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <main+0x288>
     9d2:	a2 c0       	rjmp	.+324    	; 0xb18 <__stack+0x19>
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <main+0x28c>
     9d6:	7b c0       	rjmp	.+246    	; 0xace <main+0x382>
     9d8:	84 34       	cpi	r24, 0x44	; 68
     9da:	09 f4       	brne	.+2      	; 0x9de <main+0x292>
     9dc:	8a c0       	rjmp	.+276    	; 0xaf2 <main+0x3a6>
     9de:	08 f0       	brcs	.+2      	; 0x9e2 <main+0x296>
     9e0:	68 c0       	rjmp	.+208    	; 0xab2 <main+0x366>
     9e2:	81 34       	cpi	r24, 0x41	; 65
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <main+0x29c>
     9e6:	15 c2       	rjmp	.+1066   	; 0xe12 <__stack+0x313>
			{
				case GET_CONSTANTS:		/* Get Constants Values */
				{
					SEND_CONSTANT_VALUES;
     9e8:	60 91 67 02 	lds	r22, 0x0267
     9ec:	70 91 68 02 	lds	r23, 0x0268
     9f0:	80 91 69 02 	lds	r24, 0x0269
     9f4:	90 91 6a 02 	lds	r25, 0x026A
     9f8:	44 e0       	ldi	r20, 0x04	; 4
     9fa:	e0 dd       	rcall	.-1088   	; 0x5bc <dtostr>
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	88 ec       	ldi	r24, 0xC8	; 200
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	1f 93       	push	r17
     a0a:	0f 93       	push	r16
     a0c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     a10:	60 91 6b 02 	lds	r22, 0x026B
     a14:	70 91 6c 02 	lds	r23, 0x026C
     a18:	80 91 6d 02 	lds	r24, 0x026D
     a1c:	90 91 6e 02 	lds	r25, 0x026E
     a20:	44 e0       	ldi	r20, 0x04	; 4
     a22:	cc dd       	rcall	.-1128   	; 0x5bc <dtostr>
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	84 ec       	ldi	r24, 0xC4	; 196
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	1f 93       	push	r17
     a32:	0f 93       	push	r16
     a34:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     a38:	60 91 6f 02 	lds	r22, 0x026F
     a3c:	70 91 70 02 	lds	r23, 0x0270
     a40:	80 91 71 02 	lds	r24, 0x0271
     a44:	90 91 72 02 	lds	r25, 0x0272
     a48:	44 e0       	ldi	r20, 0x04	; 4
     a4a:	b8 dd       	rcall	.-1168   	; 0x5bc <dtostr>
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	80 ec       	ldi	r24, 0xC0	; 192
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	1f 93       	push	r17
     a5a:	0f 93       	push	r16
     a5c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     a60:	60 91 73 02 	lds	r22, 0x0273
     a64:	70 91 74 02 	lds	r23, 0x0274
     a68:	80 91 75 02 	lds	r24, 0x0275
     a6c:	90 91 76 02 	lds	r25, 0x0276
     a70:	44 e0       	ldi	r20, 0x04	; 4
     a72:	a4 dd       	rcall	.-1208   	; 0x5bc <dtostr>
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	8c eb       	ldi	r24, 0xBC	; 188
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	1f 93       	push	r17
     a82:	0f 93       	push	r16
     a84:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     a88:	80 91 7a 02 	lds	r24, 0x027A
     a8c:	8f 93       	push	r24
     a8e:	80 91 79 02 	lds	r24, 0x0279
     a92:	8f 93       	push	r24
     a94:	80 91 78 02 	lds	r24, 0x0278
     a98:	8f 93       	push	r24
     a9a:	80 91 77 02 	lds	r24, 0x0277
     a9e:	8f 93       	push	r24
     aa0:	86 eb       	ldi	r24, 0xB6	; 182
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	1f 93       	push	r17
     aaa:	0f 93       	push	r16
     aac:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     ab0:	83 c0       	rjmp	.+262    	; 0xbb8 <__stack+0xb9>

		if (Size == 2)
		{
			/* Primary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD);
			switch (CMD_Buffer[0])
     ab2:	87 34       	cpi	r24, 0x47	; 71
     ab4:	09 f4       	brne	.+2      	; 0xab8 <main+0x36c>
     ab6:	99 c1       	rjmp	.+818    	; 0xdea <__stack+0x2eb>
     ab8:	88 34       	cpi	r24, 0x48	; 72
     aba:	09 f0       	breq	.+2      	; 0xabe <main+0x372>
     abc:	aa c1       	rjmp	.+852    	; 0xe12 <__stack+0x313>
	TCCR0A |= _BV(COM0A0) | _BV(WGM01);
	TCCR0B |= _BV(CS00);
}
void DisableGenerations(void)
{
	TCCR0A = 0;
     abe:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
     ac0:	15 bc       	out	0x25, r1	; 37
	OCR0A  = 0;
     ac2:	17 bc       	out	0x27, r1	; 39
					break;
				}
				case SET_H_VOUT:		/* Set Signal Pin as HIGH */
				{
					DisableGenerations();
					SET_GEN_STATE;
     ac4:	2f 9a       	sbi	0x05, 7	; 5
					MEASURING_SYSTEM_ON;
     ac6:	2e 98       	cbi	0x05, 6	; 5
					SEND_CONFIRMATION;
     ac8:	6d e2       	ldi	r22, 0x2D	; 45
     aca:	72 e0       	ldi	r23, 0x02	; 2
     acc:	2f c3       	rjmp	.+1630   	; 0x112c <__stack+0x62d>

		if (Size == 2)
		{
			/* Primary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD);
			switch (CMD_Buffer[0])
     ace:	8e 34       	cpi	r24, 0x4E	; 78
     ad0:	09 f4       	brne	.+2      	; 0xad4 <main+0x388>
     ad2:	97 c1       	rjmp	.+814    	; 0xe02 <__stack+0x303>
     ad4:	38 f4       	brcc	.+14     	; 0xae4 <main+0x398>
     ad6:	8c 34       	cpi	r24, 0x4C	; 76
     ad8:	09 f4       	brne	.+2      	; 0xadc <main+0x390>
     ada:	7f c1       	rjmp	.+766    	; 0xdda <__stack+0x2db>
     adc:	8d 34       	cpi	r24, 0x4D	; 77
     ade:	09 f4       	brne	.+2      	; 0xae2 <main+0x396>
     ae0:	84 c0       	rjmp	.+264    	; 0xbea <__stack+0xeb>
     ae2:	97 c1       	rjmp	.+814    	; 0xe12 <__stack+0x313>
     ae4:	80 35       	cpi	r24, 0x50	; 80
     ae6:	09 f4       	brne	.+2      	; 0xaea <main+0x39e>
     ae8:	6d c0       	rjmp	.+218    	; 0xbc4 <__stack+0xc5>
     aea:	82 35       	cpi	r24, 0x52	; 82
     aec:	09 f4       	brne	.+2      	; 0xaf0 <main+0x3a4>
     aee:	36 c1       	rjmp	.+620    	; 0xd5c <__stack+0x25d>
     af0:	90 c1       	rjmp	.+800    	; 0xe12 <__stack+0x313>
					SEND_CONSTANT_VALUES;
					break;
				}
				case DEF_CONSTANTS: 	/* Set Default Constants Values */
				{
					READ_CONSTANTS__PGM;
     af2:	44 e1       	ldi	r20, 0x14	; 20
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	65 e5       	ldi	r22, 0x55	; 85
     af8:	73 e0       	ldi	r23, 0x03	; 3
     afa:	87 e6       	ldi	r24, 0x67	; 103
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memcpy_P>
					UPDATE_CONSTANTS__EEMEM;
     b02:	44 e1       	ldi	r20, 0x14	; 20
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	60 e1       	ldi	r22, 0x10	; 16
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	87 e6       	ldi	r24, 0x67	; 103
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     b12:	61 eb       	ldi	r22, 0xB1	; 177
     b14:	72 e0       	ldi	r23, 0x02	; 2
     b16:	0a c3       	rjmp	.+1556   	; 0x112c <__stack+0x62d>
					break;
				}
				case GET_CORRECTIONS:	/* Get Corrections Values */
				{
					SEND_CORRECTION_VALUES;
     b18:	60 91 57 02 	lds	r22, 0x0257
     b1c:	70 91 58 02 	lds	r23, 0x0258
     b20:	80 91 59 02 	lds	r24, 0x0259
     b24:	90 91 5a 02 	lds	r25, 0x025A
     b28:	44 e0       	ldi	r20, 0x04	; 4
     b2a:	48 dd       	rcall	.-1392   	; 0x5bc <dtostr>
     b2c:	9f 93       	push	r25
     b2e:	8f 93       	push	r24
     b30:	8d ea       	ldi	r24, 0xAD	; 173
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	1f 93       	push	r17
     b3a:	0f 93       	push	r16
     b3c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     b40:	60 91 5b 02 	lds	r22, 0x025B
     b44:	70 91 5c 02 	lds	r23, 0x025C
     b48:	80 91 5d 02 	lds	r24, 0x025D
     b4c:	90 91 5e 02 	lds	r25, 0x025E
     b50:	44 e0       	ldi	r20, 0x04	; 4
     b52:	34 dd       	rcall	.-1432   	; 0x5bc <dtostr>
     b54:	9f 93       	push	r25
     b56:	8f 93       	push	r24
     b58:	89 ea       	ldi	r24, 0xA9	; 169
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	1f 93       	push	r17
     b62:	0f 93       	push	r16
     b64:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     b68:	60 91 5f 02 	lds	r22, 0x025F
     b6c:	70 91 60 02 	lds	r23, 0x0260
     b70:	80 91 61 02 	lds	r24, 0x0261
     b74:	90 91 62 02 	lds	r25, 0x0262
     b78:	44 e0       	ldi	r20, 0x04	; 4
     b7a:	20 dd       	rcall	.-1472   	; 0x5bc <dtostr>
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	85 ea       	ldi	r24, 0xA5	; 165
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	1f 93       	push	r17
     b8a:	0f 93       	push	r16
     b8c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     b90:	60 91 63 02 	lds	r22, 0x0263
     b94:	70 91 64 02 	lds	r23, 0x0264
     b98:	80 91 65 02 	lds	r24, 0x0265
     b9c:	90 91 66 02 	lds	r25, 0x0266
     ba0:	44 e0       	ldi	r20, 0x04	; 4
     ba2:	0c dd       	rcall	.-1512   	; 0x5bc <dtostr>
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	80 ea       	ldi	r24, 0xA0	; 160
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	1f 93       	push	r17
     bb2:	0f 93       	push	r16
     bb4:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	c9 c2       	rjmp	.+1426   	; 0x1156 <__stack+0x657>
					break;
				}
				case DEF_CORRECTIONS:	/* Set Default Corrections Values */
				{
					READ_CORRECTIONS__PGM;
     bc4:	40 e1       	ldi	r20, 0x10	; 16
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	65 e4       	ldi	r22, 0x45	; 69
     bca:	73 e0       	ldi	r23, 0x03	; 3
     bcc:	87 e5       	ldi	r24, 0x57	; 87
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memcpy_P>
					UPDATE_CORRECTIONS__EEMEM;
     bd4:	40 e1       	ldi	r20, 0x10	; 16
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	87 e5       	ldi	r24, 0x57	; 87
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     be4:	6b e9       	ldi	r22, 0x9B	; 155
     be6:	72 e0       	ldi	r23, 0x02	; 2
     be8:	a1 c2       	rjmp	.+1346   	; 0x112c <__stack+0x62d>

/* Capacity Measuring Function */
STATUS_t CapacityMeasurement(void)
{
	/* Check Power Status */
	if (!PWR_STATUS)
     bea:	4e 99       	sbic	0x09, 6	; 9
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <__stack+0xf5>
	{
		fprintf_P(&USB_Stream, PSTR("Error: Check the power supply of the module.\r\n"));
     bee:	83 e3       	ldi	r24, 0x33	; 51
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	e8 c0       	rjmp	.+464    	; 0xdc4 <__stack+0x2c5>
		return Status_PowerError;
	}
	/* Discharge Capacity */
	CLR_GEN_STATE;
     bf4:	2f 98       	cbi	0x05, 7	; 5
	MEASURING_SYSTEM_ON;
     bf6:	2e 98       	cbi	0x05, 6	; 5
	/* Temperature and Humidity Measurement */
	STATUS_t Status = TemperatureMeasurement();
     bf8:	fd dc       	rcall	.-1542   	; 0x5f4 <TemperatureMeasurement>
     bfa:	b8 2e       	mov	r11, r24
     bfc:	85 e6       	ldi	r24, 0x65	; 101
     bfe:	90 e0       	ldi	r25, 0x00	; 0
	/* Wait for LOW State on V_Cap Pin */
	uint cnt = 0;
	while (!V_CAP_IS_UNDER_L_THR)
     c00:	4a 99       	sbic	0x09, 2	; 9
     c02:	0b c0       	rjmp	.+22     	; 0xc1a <__stack+0x11b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c04:	ef e8       	ldi	r30, 0x8F	; 143
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <__stack+0x109>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <__stack+0x10f>
     c0e:	00 00       	nop
     c10:	01 97       	sbiw	r24, 0x01	; 1
	{
		_delay_us(100);
		cnt++;
		if (cnt > 100)
     c12:	b1 f7       	brne	.-20     	; 0xc00 <__stack+0x101>
		{
			fprintf_P(&USB_Stream, PSTR("Error: Discharging the tested capacity is unattainable.\r\n"));
     c14:	89 ef       	ldi	r24, 0xF9	; 249
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	d5 c0       	rjmp	.+426    	; 0xdc4 <__stack+0x2c5>
	MEASURING_SYSTEM_ON;
	/* Temperature and Humidity Measurement */
	STATUS_t Status = TemperatureMeasurement();
	/* Wait for LOW State on V_Cap Pin */
	uint cnt = 0;
	while (!V_CAP_IS_UNDER_L_THR)
     c1a:	4b 99       	sbic	0x09, 3	; 9
     c1c:	f3 cf       	rjmp	.-26     	; 0xc04 <__stack+0x105>
			return Status_DischargeTimeout;
		}
	}
	/* Measurement conditions ready - capacity discharged, power supply checked, temperature measured */
	/* Set sample index to 0 */
	System.SampleIdx = 0;
     c1e:	10 92 8d 03 	sts	0x038D, r1
	System.IsMeasurementEnd = false;
     c22:	80 91 88 02 	lds	r24, 0x0288
     c26:	8f 7e       	andi	r24, 0xEF	; 239
     c28:	80 93 88 02 	sts	0x0288, r24

/* Input Capturing Functions */
void EnableInputCapture(void)
{
	/* Timer Clock - No Prescaling - Enable */
	sbi(TCCR1B, CS10);
     c2c:	80 91 81 00 	lds	r24, 0x0081
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	80 93 81 00 	sts	0x0081, r24
	/* Clear Pending Interrupts */
	sbi(TIFR1, ICF1);
     c36:	b5 9a       	sbi	0x16, 5	; 22
	/* Input Capture Interrupt Enable */
	sbi(TIMSK1, ICIE1);
     c38:	80 91 6f 00 	lds	r24, 0x006F
     c3c:	80 62       	ori	r24, 0x20	; 32
     c3e:	80 93 6f 00 	sts	0x006F, r24
	/* Measurement conditions ready - capacity discharged, power supply checked, temperature measured */
	/* Set sample index to 0 */
	System.SampleIdx = 0;
	System.IsMeasurementEnd = false;
	EnableInputCapture();
	SET_GEN_STATE;
     c42:	2f 9a       	sbi	0x05, 7	; 5
     c44:	89 e8       	ldi	r24, 0x89	; 137
     c46:	93 e1       	ldi	r25, 0x13	; 19
	/* Waiting for end measurement */
	cnt = 0;
	while (!System.IsMeasurementEnd)
     c48:	20 91 88 02 	lds	r18, 0x0288
     c4c:	24 fd       	sbrc	r18, 4
     c4e:	0e c0       	rjmp	.+28     	; 0xc6c <__stack+0x16d>
     c50:	ef e8       	ldi	r30, 0x8F	; 143
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <__stack+0x155>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <__stack+0x15b>
     c5a:	00 00       	nop
     c5c:	01 97       	sbiw	r24, 0x01	; 1
	{
		_delay_us(100);
		cnt++;
		if (cnt > 5000)
     c5e:	a1 f7       	brne	.-24     	; 0xc48 <__stack+0x149>
		{
			DisableInputCapture();
     c60:	a2 dc       	rcall	.-1724   	; 0x5a6 <DisableInputCapture>
			CLR_GEN_STATE;
     c62:	2f 98       	cbi	0x05, 7	; 5
			MEASURING_SYSTEM_OFF;
     c64:	2e 9a       	sbi	0x05, 6	; 5
			fprintf_P(&USB_Stream, PSTR("Error: Measurement timeout the tested capacity.\r\n"));
     c66:	87 ec       	ldi	r24, 0xC7	; 199
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	ac c0       	rjmp	.+344    	; 0xdc4 <__stack+0x2c5>
			return Status_MeasurementTimeout;
		}
	}
	/* Measurement End - Disable measuring system */
	DisableInputCapture();
     c6c:	9c dc       	rcall	.-1736   	; 0x5a6 <DisableInputCapture>
	CLR_GEN_STATE;
     c6e:	2f 98       	cbi	0x05, 7	; 5
	MEASURING_SYSTEM_OFF;
     c70:	2e 9a       	sbi	0x05, 6	; 5
	/* Data presentation */
	if (Status == Status_OK)
     c72:	b1 10       	cpse	r11, r1
     c74:	33 c0       	rjmp	.+102    	; 0xcdc <__stack+0x1dd>
	{
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_TEMP, dtostr(System.Temperature, AFTERPOINT));
     c76:	60 91 8e 03 	lds	r22, 0x038E
     c7a:	70 91 8f 03 	lds	r23, 0x038F
     c7e:	80 91 90 03 	lds	r24, 0x0390
     c82:	90 91 91 03 	lds	r25, 0x0391
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	99 dc       	rcall	.-1742   	; 0x5bc <dtostr>
     c8a:	9f 93       	push	r25
     c8c:	8f 93       	push	r24
     c8e:	1f 92       	push	r1
     c90:	84 e5       	ldi	r24, 0x54	; 84
     c92:	8f 93       	push	r24
     c94:	80 ec       	ldi	r24, 0xC0	; 192
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	1f 93       	push	r17
     c9e:	0f 93       	push	r16
     ca0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_RH, dtostr(System.Humidity, AFTERPOINT));
     ca4:	60 91 92 03 	lds	r22, 0x0392
     ca8:	70 91 93 03 	lds	r23, 0x0393
     cac:	80 91 94 03 	lds	r24, 0x0394
     cb0:	90 91 95 03 	lds	r25, 0x0395
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	82 dc       	rcall	.-1788   	; 0x5bc <dtostr>
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	1f 92       	push	r1
     cbe:	88 e4       	ldi	r24, 0x48	; 72
     cc0:	8f 93       	push	r24
     cc2:	89 eb       	ldi	r24, 0xB9	; 185
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	1f 93       	push	r17
     ccc:	0f 93       	push	r16
     cce:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
	}
	fprintf_P(&USB_Stream, PSTR("%c "), SEND_SP);
     cdc:	1f 92       	push	r1
     cde:	83 e4       	ldi	r24, 0x43	; 67
     ce0:	8f 93       	push	r24
     ce2:	85 eb       	ldi	r24, 0xB5	; 181
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	1f 93       	push	r17
     cec:	0f 93       	push	r16
     cee:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	a1 2c       	mov	r10, r1
     d00:	b1 2c       	mov	r11, r1
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE - 1; i++)
	{
		fprintf_P(&USB_Stream, PSTR("%u "), System.Samples[i]);
     d02:	f5 01       	movw	r30, r10
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e8 57       	subi	r30, 0x78	; 120
     d0a:	fd 4f       	sbci	r31, 0xFD	; 253
     d0c:	81 81       	ldd	r24, Z+1	; 0x01
     d0e:	92 81       	ldd	r25, Z+2	; 0x02
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	81 eb       	ldi	r24, 0xB1	; 177
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	1f 93       	push	r17
     d1e:	0f 93       	push	r16
     d20:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     d24:	ff ef       	ldi	r31, 0xFF	; 255
     d26:	af 1a       	sub	r10, r31
     d28:	bf 0a       	sbc	r11, r31
	{
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_TEMP, dtostr(System.Temperature, AFTERPOINT));
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_RH, dtostr(System.Humidity, AFTERPOINT));
	}
	fprintf_P(&USB_Stream, PSTR("%c "), SEND_SP);
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE - 1; i++)
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	21 e8       	ldi	r18, 0x81	; 129
     d38:	a2 16       	cp	r10, r18
     d3a:	b1 04       	cpc	r11, r1
     d3c:	11 f7       	brne	.-60     	; 0xd02 <__stack+0x203>
	{
		fprintf_P(&USB_Stream, PSTR("%u "), System.Samples[i]);
	}
	fprintf_P(&USB_Stream, PSTR("%u\r\n"), System.Samples[MAX_SAMPLES_BUF_SIZE - 1]);
     d3e:	80 91 8b 03 	lds	r24, 0x038B
     d42:	90 91 8c 03 	lds	r25, 0x038C
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	8c ea       	ldi	r24, 0xAC	; 172
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	89 e4       	ldi	r24, 0x49	; 73
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	f5 c1       	rjmp	.+1002   	; 0x1146 <__stack+0x647>
					CapacityMeasurement();
					break;
				}
				case GET_TEMP_RH: 		/* Get Temperature and Humidity */
				{
					STATUS_t Status = TemperatureMeasurement();
     d5c:	4b dc       	rcall	.-1898   	; 0x5f4 <TemperatureMeasurement>
					if (Status == Status_OK)
     d5e:	81 11       	cpse	r24, r1
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__stack+0x2b1>
					{
						fprintf_P(&USB_Stream, PSTR("%s "), dtostr(System.Temperature, AFTERPOINT));
     d62:	60 91 8e 03 	lds	r22, 0x038E
     d66:	70 91 8f 03 	lds	r23, 0x038F
     d6a:	80 91 90 03 	lds	r24, 0x0390
     d6e:	90 91 91 03 	lds	r25, 0x0391
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	23 dc       	rcall	.-1978   	; 0x5bc <dtostr>
     d76:	9f 93       	push	r25
     d78:	8f 93       	push	r24
     d7a:	87 e9       	ldi	r24, 0x97	; 151
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	1f 93       	push	r17
     d84:	0f 93       	push	r16
     d86:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
						fprintf_P(&USB_Stream, PSTR("%s\r\n"), dtostr(System.Humidity, AFTERPOINT));
     d8a:	60 91 92 03 	lds	r22, 0x0392
     d8e:	70 91 93 03 	lds	r23, 0x0393
     d92:	80 91 94 03 	lds	r24, 0x0394
     d96:	90 91 95 03 	lds	r25, 0x0395
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	0f dc       	rcall	.-2018   	; 0x5bc <dtostr>
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	82 e9       	ldi	r24, 0x92	; 146
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	1f 93       	push	r17
     dac:	0f 93       	push	r16
     dae:	02 cf       	rjmp	.-508    	; 0xbb4 <__stack+0xb5>
					}
					else if (Status == Status_Error)
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	31 f4       	brne	.+12     	; 0xdc0 <__stack+0x2c1>
					{
						fprintf_P(&USB_Stream, PSTR("Device Error: Read temperature unexpected error: %u\r\n"), twi_status());
     db4:	82 d2       	rcall	.+1284   	; 0x12ba <twi_status>
     db6:	1f 92       	push	r1
     db8:	8f 93       	push	r24
     dba:	8c e5       	ldi	r24, 0x5C	; 92
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	bf c1       	rjmp	.+894    	; 0x113e <__stack+0x63f>
					}
					else /* Status == Status_Unregistered */
					{
						fprintf_P(&USB_Stream, PSTR("Device Error: SHTC3 module unregistered\r\n"));
     dc0:	82 e3       	ldi	r24, 0x32	; 50
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	1f 93       	push	r17
     dca:	0f 93       	push	r16
     dcc:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	be c1       	rjmp	.+892    	; 0x1156 <__stack+0x657>
	TCCR0A |= _BV(COM0A0) | _BV(WGM01);
	TCCR0B |= _BV(CS00);
}
void DisableGenerations(void)
{
	TCCR0A = 0;
     dda:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
     ddc:	15 bc       	out	0x25, r1	; 37
	OCR0A  = 0;
     dde:	17 bc       	out	0x27, r1	; 39
					break;
				}
				case SET_L_VOUT: 		/* Set Signal Pin as LOW */
				{
					DisableGenerations();
					CLR_GEN_STATE;
     de0:	2f 98       	cbi	0x05, 7	; 5
					MEASURING_SYSTEM_ON;
     de2:	2e 98       	cbi	0x05, 6	; 5
					SEND_CONFIRMATION;
     de4:	68 e2       	ldi	r22, 0x28	; 40
     de6:	72 e0       	ldi	r23, 0x02	; 2
     de8:	a1 c1       	rjmp	.+834    	; 0x112c <__stack+0x62d>
}

/* Generating Signal Functions */
void EnableGenerations(void)
{
	OCR0A = OCR_VALUE;
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(COM0A0) | _BV(WGM01);
     dee:	84 b5       	in	r24, 0x24	; 36
     df0:	82 64       	ori	r24, 0x42	; 66
     df2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS00);
     df4:	85 b5       	in	r24, 0x25	; 37
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	85 bd       	out	0x25, r24	; 37
					break;
				}
				case SET_GENERATIONS: 	/* Set Generation on Signal Pin */
				{
					EnableGenerations();
					MEASURING_SYSTEM_ON;
     dfa:	2e 98       	cbi	0x05, 6	; 5
					SEND_CONFIRMATION;
     dfc:	63 e2       	ldi	r22, 0x23	; 35
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	95 c1       	rjmp	.+810    	; 0x112c <__stack+0x62d>
	TCCR0A |= _BV(COM0A0) | _BV(WGM01);
	TCCR0B |= _BV(CS00);
}
void DisableGenerations(void)
{
	TCCR0A = 0;
     e02:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
     e04:	15 bc       	out	0x25, r1	; 37
	OCR0A  = 0;
     e06:	17 bc       	out	0x27, r1	; 39
					break;
				}
				case SET_NOMINAL:		/* Set Signal Pin as Nominal (HIGH-Z) */
				{
					DisableGenerations();
					CLR_GEN_STATE;
     e08:	2f 98       	cbi	0x05, 7	; 5
					MEASURING_SYSTEM_OFF;
     e0a:	2e 9a       	sbi	0x05, 6	; 5
					SEND_CONFIRMATION;
     e0c:	6e e1       	ldi	r22, 0x1E	; 30
     e0e:	72 e0       	ldi	r23, 0x02	; 2
     e10:	8d c1       	rjmp	.+794    	; 0x112c <__stack+0x62d>
					break;
				}
				default:				/* Unrecognized Command Signalization */
				{
					fprintf_P(&USB_Stream, PSTR("Device Error: Unrecognized Command: %c\r\n"), CMD_Buffer[0]);
     e12:	1f 92       	push	r1
     e14:	8f 93       	push	r24
     e16:	85 ef       	ldi	r24, 0xF5	; 245
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	91 c1       	rjmp	.+802    	; 0x113e <__stack+0x63f>
			}
		}
		else
		{
			/* Secondary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' ');
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	61 e3       	ldi	r22, 0x31	; 49
     e20:	71 e0       	ldi	r23, 0x01	; 1
     e22:	81 eb       	ldi	r24, 0xB1	; 177
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	3c d5       	rcall	.+2680   	; 0x18a0 <RingBuffer_GetAsString>
			switch (CMD_Buffer[0])
     e28:	80 91 31 01 	lds	r24, 0x0131
     e2c:	83 35       	cpi	r24, 0x53	; 83
     e2e:	09 f4       	brne	.+2      	; 0xe32 <__stack+0x333>
     e30:	59 c0       	rjmp	.+178    	; 0xee4 <__stack+0x3e5>
     e32:	87 35       	cpi	r24, 0x57	; 87
     e34:	09 f4       	brne	.+2      	; 0xe38 <__stack+0x339>
     e36:	bd c0       	rjmp	.+378    	; 0xfb2 <__stack+0x4b3>
     e38:	8f 34       	cpi	r24, 0x4F	; 79
     e3a:	09 f0       	breq	.+2      	; 0xe3e <__stack+0x33f>
     e3c:	7c c1       	rjmp	.+760    	; 0x1136 <__stack+0x637>
					SEND_CONFIRMATION;
					break;
				}
				case SET_CORRECTIONS:
				{
					Corrections.A0 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	61 e3       	ldi	r22, 0x31	; 49
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	81 eb       	ldi	r24, 0xB1	; 177
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	2b d5       	rcall	.+2646   	; 0x18a0 <RingBuffer_GetAsString>
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     e52:	60 93 57 02 	sts	0x0257, r22
     e56:	70 93 58 02 	sts	0x0258, r23
     e5a:	80 93 59 02 	sts	0x0259, r24
     e5e:	90 93 5a 02 	sts	0x025A, r25
					Corrections.A1 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	61 e3       	ldi	r22, 0x31	; 49
     e66:	71 e0       	ldi	r23, 0x01	; 1
     e68:	81 eb       	ldi	r24, 0xB1	; 177
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	19 d5       	rcall	.+2610   	; 0x18a0 <RingBuffer_GetAsString>
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     e76:	60 93 5b 02 	sts	0x025B, r22
     e7a:	70 93 5c 02 	sts	0x025C, r23
     e7e:	80 93 5d 02 	sts	0x025D, r24
     e82:	90 93 5e 02 	sts	0x025E, r25
					Corrections.A2 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	61 e3       	ldi	r22, 0x31	; 49
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	81 eb       	ldi	r24, 0xB1	; 177
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	07 d5       	rcall	.+2574   	; 0x18a0 <RingBuffer_GetAsString>
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     e9a:	60 93 5f 02 	sts	0x025F, r22
     e9e:	70 93 60 02 	sts	0x0260, r23
     ea2:	80 93 61 02 	sts	0x0261, r24
     ea6:	90 93 62 02 	sts	0x0262, r25
					Corrections.A3 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	61 e3       	ldi	r22, 0x31	; 49
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	81 eb       	ldi	r24, 0xB1	; 177
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	f5 d4       	rcall	.+2538   	; 0x18a0 <RingBuffer_GetAsString>
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     ebe:	60 93 63 02 	sts	0x0263, r22
     ec2:	70 93 64 02 	sts	0x0264, r23
     ec6:	80 93 65 02 	sts	0x0265, r24
     eca:	90 93 66 02 	sts	0x0266, r25
					UPDATE_CORRECTIONS__EEMEM;
     ece:	40 e1       	ldi	r20, 0x10	; 16
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	87 e5       	ldi	r24, 0x57	; 87
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     ede:	6b ee       	ldi	r22, 0xEB	; 235
     ee0:	71 e0       	ldi	r23, 0x01	; 1
     ee2:	24 c1       	rjmp	.+584    	; 0x112c <__stack+0x62d>
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' ');
			switch (CMD_Buffer[0])
			{
				case SET_CONSTANTS:
				{
					Constants.H_THR  = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	61 e3       	ldi	r22, 0x31	; 49
     ee8:	71 e0       	ldi	r23, 0x01	; 1
     eea:	81 eb       	ldi	r24, 0xB1	; 177
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	d8 d4       	rcall	.+2480   	; 0x18a0 <RingBuffer_GetAsString>
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     ef8:	60 93 67 02 	sts	0x0267, r22
     efc:	70 93 68 02 	sts	0x0268, r23
     f00:	80 93 69 02 	sts	0x0269, r24
     f04:	90 93 6a 02 	sts	0x026A, r25
					Constants.L_THR  = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	61 e3       	ldi	r22, 0x31	; 49
     f0c:	71 e0       	ldi	r23, 0x01	; 1
     f0e:	81 eb       	ldi	r24, 0xB1	; 177
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	c6 d4       	rcall	.+2444   	; 0x18a0 <RingBuffer_GetAsString>
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     f1c:	60 93 6b 02 	sts	0x026B, r22
     f20:	70 93 6c 02 	sts	0x026C, r23
     f24:	80 93 6d 02 	sts	0x026D, r24
     f28:	90 93 6e 02 	sts	0x026E, r25
					Constants.H_VOUT = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	61 e3       	ldi	r22, 0x31	; 49
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	81 eb       	ldi	r24, 0xB1	; 177
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	b4 d4       	rcall	.+2408   	; 0x18a0 <RingBuffer_GetAsString>
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     f40:	60 93 6f 02 	sts	0x026F, r22
     f44:	70 93 70 02 	sts	0x0270, r23
     f48:	80 93 71 02 	sts	0x0271, r24
     f4c:	90 93 72 02 	sts	0x0272, r25
					Constants.L_VOUT = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	61 e3       	ldi	r22, 0x31	; 49
     f54:	71 e0       	ldi	r23, 0x01	; 1
     f56:	81 eb       	ldi	r24, 0xB1	; 177
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	a2 d4       	rcall	.+2372   	; 0x18a0 <RingBuffer_GetAsString>
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strtod>
     f64:	60 93 73 02 	sts	0x0273, r22
     f68:	70 93 74 02 	sts	0x0274, r23
     f6c:	80 93 75 02 	sts	0x0275, r24
     f70:	90 93 76 02 	sts	0x0276, r25
					Constants.R_MEAS = strtoul((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD), NULL, 10);
     f74:	4a e0       	ldi	r20, 0x0A	; 10
     f76:	61 e3       	ldi	r22, 0x31	; 49
     f78:	71 e0       	ldi	r23, 0x01	; 1
     f7a:	81 eb       	ldi	r24, 0xB1	; 177
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	90 d4       	rcall	.+2336   	; 0x18a0 <RingBuffer_GetAsString>
     f80:	4a e0       	ldi	r20, 0x0A	; 10
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <strtoul>
     f8c:	60 93 77 02 	sts	0x0277, r22
     f90:	70 93 78 02 	sts	0x0278, r23
     f94:	80 93 79 02 	sts	0x0279, r24
     f98:	90 93 7a 02 	sts	0x027A, r25
					UPDATE_CONSTANTS__EEMEM;
     f9c:	44 e1       	ldi	r20, 0x14	; 20
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	60 e1       	ldi	r22, 0x10	; 16
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	87 e6       	ldi	r24, 0x67	; 103
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     fac:	60 ef       	ldi	r22, 0xF0	; 240
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	bd c0       	rjmp	.+378    	; 0x112c <__stack+0x62d>
					SEND_CONFIRMATION;
					break;
				}
				case LCD_AFTERMEAS:
				{
					if (System.IsLCDRegistered)
     fb2:	80 91 88 02 	lds	r24, 0x0288
     fb6:	80 ff       	sbrs	r24, 0
     fb8:	b7 c0       	rjmp	.+366    	; 0x1128 <__stack+0x629>
					{
						byte TimeStamp[10], Capacity[10], TicksCP[7], TicksDP[7], Progress[5];

						RingBuffer_GetAsString(&USB_Buffer, TimeStamp, ' ');
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	b6 01       	movw	r22, r12
     fbe:	81 eb       	ldi	r24, 0xB1	; 177
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	6e d4       	rcall	.+2268   	; 0x18a0 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, Capacity, ' ');
     fc4:	40 e2       	ldi	r20, 0x20	; 32
     fc6:	b1 01       	movw	r22, r2
     fc8:	81 eb       	ldi	r24, 0xB1	; 177
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	69 d4       	rcall	.+2258   	; 0x18a0 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, TicksCP, ' ');
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	b2 01       	movw	r22, r4
     fd2:	81 eb       	ldi	r24, 0xB1	; 177
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	64 d4       	rcall	.+2248   	; 0x18a0 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, TicksDP, ' ');
     fd8:	40 e2       	ldi	r20, 0x20	; 32
     fda:	b3 01       	movw	r22, r6
     fdc:	81 eb       	ldi	r24, 0xB1	; 177
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	5f d4       	rcall	.+2238   	; 0x18a0 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, Progress, ENDCMD);
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	b4 01       	movw	r22, r8
     fe6:	81 eb       	ldi	r24, 0xB1	; 177
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	5a d4       	rcall	.+2228   	; 0x18a0 <RingBuffer_GetAsString>

						lcd_cls();
     fec:	36 d2       	rcall	.+1132   	; 0x145a <lcd_cls>
						if (Progress[0])
     fee:	8b a1       	ldd	r24, Y+35	; 0x23
     ff0:	88 23       	and	r24, r24
     ff2:	d1 f0       	breq	.+52     	; 0x1028 <__stack+0x529>
						{
							fprintf_P(&LCD_Stream, PSTR("t %s "), TimeStamp);
     ff4:	df 92       	push	r13
     ff6:	cf 92       	push	r12
     ff8:	85 ee       	ldi	r24, 0xE5	; 229
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	9f 93       	push	r25
     ffe:	8f 93       	push	r24
    1000:	ff 92       	push	r15
    1002:	ef 92       	push	r14
    1004:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
							fprintf_P(&LCD_Stream, PSTR("P %s/100"), Progress);
    1008:	9f 92       	push	r9
    100a:	8f 92       	push	r8
    100c:	8c ed       	ldi	r24, 0xDC	; 220
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	ff 92       	push	r15
    1016:	ef 92       	push	r14
    1018:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	10 c0       	rjmp	.+32     	; 0x1048 <__stack+0x549>
						}
						else
						{
							fprintf_P(&LCD_Stream, PSTR("TimeStamp  %s"), TimeStamp);
    1028:	df 92       	push	r13
    102a:	cf 92       	push	r12
    102c:	8e ec       	ldi	r24, 0xCE	; 206
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	9f 93       	push	r25
    1032:	8f 93       	push	r24
    1034:	ff 92       	push	r15
    1036:	ef 92       	push	r14
    1038:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
						}
						lcd_locate(1, 0);
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	10 d2       	rcall	.+1056   	; 0x146e <lcd_locate>
						fprintf_P(&LCD_Stream, PSTR("Capacity %s pF"), Capacity);
    104e:	3f 92       	push	r3
    1050:	2f 92       	push	r2
    1052:	ef eb       	ldi	r30, 0xBF	; 191
    1054:	f1 e0       	ldi	r31, 0x01	; 1
    1056:	ff 93       	push	r31
    1058:	ef 93       	push	r30
    105a:	ff 92       	push	r15
    105c:	ef 92       	push	r14
    105e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
						lcd_locate(2, 0);
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	03 d2       	rcall	.+1030   	; 0x146e <lcd_locate>
						fprintf_P(&LCD_Stream, PSTR("Ticks %s / "), TicksCP);
    1068:	5f 92       	push	r5
    106a:	4f 92       	push	r4
    106c:	83 eb       	ldi	r24, 0xB3	; 179
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	9f 93       	push	r25
    1072:	8f 93       	push	r24
    1074:	ff 92       	push	r15
    1076:	ef 92       	push	r14
    1078:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
						fprintf_P(&LCD_Stream, PSTR("%s"), TicksDP);
    107c:	7f 92       	push	r7
    107e:	6f 92       	push	r6
    1080:	80 eb       	ldi	r24, 0xB0	; 176
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	9f 93       	push	r25
    1086:	8f 93       	push	r24
    1088:	ff 92       	push	r15
    108a:	ef 92       	push	r14
    108c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
						lcd_locate(3, 0);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	ec d1       	rcall	.+984    	; 0x146e <lcd_locate>
						if (System.IsSHTRegistered)
    1096:	80 91 88 02 	lds	r24, 0x0288
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	81 ff       	sbrs	r24, 1
    10a6:	34 c0       	rjmp	.+104    	; 0x1110 <__stack+0x611>
						{
							fprintf_P(&LCD_Stream, PSTR("T %s%cC "), dtostr(System.Temperature, AFTERPOINT), 223);
    10a8:	60 91 8e 03 	lds	r22, 0x038E
    10ac:	70 91 8f 03 	lds	r23, 0x038F
    10b0:	80 91 90 03 	lds	r24, 0x0390
    10b4:	90 91 91 03 	lds	r25, 0x0391
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	80 da       	rcall	.-2816   	; 0x5bc <dtostr>
    10bc:	1f 92       	push	r1
    10be:	2f ed       	ldi	r18, 0xDF	; 223
    10c0:	2f 93       	push	r18
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
    10c6:	87 ea       	ldi	r24, 0xA7	; 167
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	ff 92       	push	r15
    10d0:	ef 92       	push	r14
    10d2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
							lcd_locate(3, 10);
    10d6:	6a e0       	ldi	r22, 0x0A	; 10
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	c9 d1       	rcall	.+914    	; 0x146e <lcd_locate>
							fprintf_P(&LCD_Stream, PSTR("RH %s %%"), dtostr(System.Humidity, AFTERPOINT));
    10dc:	60 91 92 03 	lds	r22, 0x0392
    10e0:	70 91 93 03 	lds	r23, 0x0393
    10e4:	80 91 94 03 	lds	r24, 0x0394
    10e8:	90 91 95 03 	lds	r25, 0x0395
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	66 da       	rcall	.-2868   	; 0x5bc <dtostr>
    10f0:	9f 93       	push	r25
    10f2:	8f 93       	push	r24
    10f4:	8e e9       	ldi	r24, 0x9E	; 158
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	ff 92       	push	r15
    10fe:	ef 92       	push	r14
    1100:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <__stack+0x629>
						}
						else
						{
							fprintf_P(&LCD_Stream, PSTR("T ------  RH ------ "));
    1110:	89 e8       	ldi	r24, 0x89	; 137
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	ff 92       	push	r15
    111a:	ef 92       	push	r14
    111c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
						}
					}
					SEND_CONFIRMATION;
    1128:	64 e8       	ldi	r22, 0x84	; 132
    112a:	71 e0       	ldi	r23, 0x01	; 1
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 46 11 	call	0x228c	; 0x228c <CDC_Device_SendString_P>
    1134:	10 c0       	rjmp	.+32     	; 0x1156 <__stack+0x657>
					break;
				}
				default:
				{
					fprintf_P(&USB_Stream, PSTR("Error: Unrecognized Command: %c\r\n"), CMD_Buffer[0]);
    1136:	1f 92       	push	r1
    1138:	8f 93       	push	r24
    113a:	82 e6       	ldi	r24, 0x62	; 98
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	1f 93       	push	r17
    1144:	0f 93       	push	r16
    1146:	0e 94 dd 17 	call	0x2fba	; 0x2fba <fprintf_P>
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
				}
			}
		}
		RingBuffer_Clear(&USB_Buffer);
    1156:	81 eb       	ldi	r24, 0xB1	; 177
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	56 d3       	rcall	.+1708   	; 0x1808 <RingBuffer_Clear>
		LED_CMD_REC_OFF;
    115c:	47 98       	cbi	0x08, 7	; 8
		/* Check & Accumulate Available Data from USB */
		USB_ReceiveData();
		/* Parse Received Commands from Host */
		CMD_Parse();
		/* USB Communication Required Tasks */
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <CDC_Device_USBTask>
		USB_USBTask();
    1166:	0e 94 08 11 	call	0x2210	; 0x2210 <USB_USBTask>
	}
    116a:	e2 cb       	rjmp	.-2108   	; 0x930 <main+0x1e4>

0000116c <__vector_16>:
	cbi(TIMSK1, ICIE1);
}

/* Input Capture Interrupt */
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	System.Samples[System.SampleIdx++] = ICR1;
    117e:	e0 91 8d 03 	lds	r30, 0x038D
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8e 0f       	add	r24, r30
    1186:	80 93 8d 03 	sts	0x038D, r24
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 91 86 00 	lds	r24, 0x0086
    1190:	90 91 87 00 	lds	r25, 0x0087
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	e8 57       	subi	r30, 0x78	; 120
    119a:	fd 4f       	sbci	r31, 0xFD	; 253
    119c:	92 83       	std	Z+2, r25	; 0x02
    119e:	81 83       	std	Z+1, r24	; 0x01
	if (System.SampleIdx == MAX_SAMPLES_BUF_SIZE)
    11a0:	80 91 8d 03 	lds	r24, 0x038D
    11a4:	82 38       	cpi	r24, 0x82	; 130
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <__vector_16+0x46>
	{
		System.IsMeasurementEnd = true;
    11a8:	80 91 88 02 	lds	r24, 0x0288
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	80 93 88 02 	sts	0x0288, r24
	}
	TOG_GEN_STATE;
    11b2:	85 b1       	in	r24, 0x05	; 5
    11b4:	80 58       	subi	r24, 0x80	; 128
    11b6:	85 b9       	out	0x05, r24	; 5
	TCNT1 = 0;
    11b8:	10 92 85 00 	sts	0x0085, r1
    11bc:	10 92 84 00 	sts	0x0084, r1
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <EVENT_USB_Device_Connect>:
}

/* Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LED_USB_CONN;
    11d2:	5d 9a       	sbi	0x0b, 5	; 11
    11d4:	08 95       	ret

000011d6 <EVENT_USB_Device_Disconnect>:
}
/* Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LED_USB_ERROR;
    11d6:	28 98       	cbi	0x05, 0	; 5
	LED_USB_DISCONN;
    11d8:	5d 98       	cbi	0x0b, 5	; 11
	System.IsHostReady = false;
    11da:	e8 e8       	ldi	r30, 0x88	; 136
    11dc:	f2 e0       	ldi	r31, 0x02	; 2
    11de:	80 81       	ld	r24, Z
    11e0:	8b 7f       	andi	r24, 0xFB	; 251
    11e2:	80 83       	st	Z, r24
    11e4:	08 95       	ret

000011e6 <EVENT_USB_Device_ConfigurationChanged>:
}
/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 21 11 	call	0x2242	; 0x2242 <CDC_Device_ConfigureEndpoints>
	if (ConfigSuccess)
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <EVENT_USB_Device_ConfigurationChanged+0x10>
	{
		LED_USB_READY;
    11f2:	28 9a       	sbi	0x05, 0	; 5
    11f4:	08 95       	ret
	}
	else
	{
		LED_USB_ERROR;
    11f6:	28 98       	cbi	0x05, 0	; 5
    11f8:	08 95       	ret

000011fa <EVENT_USB_Device_ControlRequest>:
	}
}
/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <CDC_Device_ProcessControlRequest>

00001202 <EVENT_CDC_Device_ControLineStateChanged>:
}
/* CDC class driver callback function the processing of changes to the virtual control lines sent from the host. */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
	System.IsHostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
    1202:	fc 01       	movw	r30, r24
    1204:	90 89       	ldd	r25, Z+16	; 0x10
    1206:	80 91 88 02 	lds	r24, 0x0288
    120a:	90 fb       	bst	r25, 0
    120c:	82 f9       	bld	r24, 2
    120e:	80 93 88 02 	sts	0x0288, r24
	if (System.IsHostReady)
    1212:	80 91 88 02 	lds	r24, 0x0288
    1216:	82 ff       	sbrs	r24, 2
    1218:	02 c0       	rjmp	.+4      	; 0x121e <EVENT_CDC_Device_ControLineStateChanged+0x1c>
	{
		LED_USB_READY;
    121a:	28 9a       	sbi	0x05, 0	; 5
    121c:	08 95       	ret
	}
	else
	{
		LED_USB_ERROR;
    121e:	28 98       	cbi	0x05, 0	; 5
    1220:	08 95       	ret

00001222 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1222:	29 2f       	mov	r18, r25
    1224:	33 27       	eor	r19, r19
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	59 f0       	breq	.+22     	; 0x1242 <CALLBACK_USB_GetDescriptor+0x20>
    122c:	23 30       	cpi	r18, 0x03	; 3
    122e:	31 05       	cpc	r19, r1
    1230:	69 f0       	breq	.+26     	; 0x124c <CALLBACK_USB_GetDescriptor+0x2a>
    1232:	21 30       	cpi	r18, 0x01	; 1
    1234:	31 05       	cpc	r19, r1
    1236:	e9 f4       	brne	.+58     	; 0x1272 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1238:	82 e1       	ldi	r24, 0x12	; 18
    123a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    123c:	25 e2       	ldi	r18, 0x25	; 37
    123e:	34 e0       	ldi	r19, 0x04	; 4
    1240:	1c c0       	rjmp	.+56     	; 0x127a <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    1242:	8e e3       	ldi	r24, 0x3E	; 62
    1244:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1246:	27 ee       	ldi	r18, 0xE7	; 231
    1248:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    124a:	17 c0       	rjmp	.+46     	; 0x127a <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
    124c:	99 27       	eor	r25, r25
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	49 f0       	breq	.+18     	; 0x1266 <CALLBACK_USB_GetDescriptor+0x44>
    1254:	28 f0       	brcs	.+10     	; 0x1260 <CALLBACK_USB_GetDescriptor+0x3e>
    1256:	02 97       	sbiw	r24, 0x02	; 2
    1258:	61 f4       	brne	.+24     	; 0x1272 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    125a:	e9 e6       	ldi	r30, 0x69	; 105
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	05 c0       	rjmp	.+10     	; 0x126a <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1260:	e3 ee       	ldi	r30, 0xE3	; 227
    1262:	f3 e0       	ldi	r31, 0x03	; 3
    1264:	02 c0       	rjmp	.+4      	; 0x126a <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1266:	e3 ea       	ldi	r30, 0xA3	; 163
    1268:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    126a:	84 91       	lpm	r24, Z
    126c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    126e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1270:	04 c0       	rjmp	.+8      	; 0x127a <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    127a:	fa 01       	movw	r30, r20
    127c:	31 83       	std	Z+1, r19	; 0x01
    127e:	20 83       	st	Z, r18
	return Size;
}
    1280:	08 95       	ret

00001282 <twi_set_bit_rate>:

	twi_set_bit_rate(freq);
}

void twi_set_bit_rate(TWI_SCL_FREQ_t freq)
{
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
	uint temp = ((F_CPU / freq) - 15);
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	74 e2       	ldi	r23, 0x24	; 36
    128a:	84 ef       	ldi	r24, 0xF4	; 244
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>
    1292:	2f 50       	subi	r18, 0x0F	; 15
    1294:	31 09       	sbc	r19, r1
	TWBR = temp / 2 + temp % 2;
    1296:	c9 01       	movw	r24, r18
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	21 70       	andi	r18, 0x01	; 1
    129e:	28 0f       	add	r18, r24
    12a0:	20 93 b8 00 	sts	0x00B8, r18
    12a4:	08 95       	ret

000012a6 <twi_init>:
		if (TWI_SR.error)   { return 0; }

void twi_init(TWI_SCL_FREQ_t freq)
{
	// init status register
	TWI_SR.error = false;
    12a6:	eb e7       	ldi	r30, 0x7B	; 123
    12a8:	f2 e0       	ldi	r31, 0x02	; 2
    12aa:	10 82       	st	Z, r1
	TWI_SR.status = 0;
    12ac:	11 82       	std	Z+1, r1	; 0x01

	twi_set_bit_rate(freq);
    12ae:	e9 cf       	rjmp	.-46     	; 0x1282 <twi_set_bit_rate>

000012b0 <twi_error>:
	TWBR = temp / 2 + temp % 2;
}

bool twi_error()
{
	bool err = TWI_SR.error;
    12b0:	eb e7       	ldi	r30, 0x7B	; 123
    12b2:	f2 e0       	ldi	r31, 0x02	; 2
    12b4:	80 81       	ld	r24, Z
	TWI_SR.error = false;
    12b6:	10 82       	st	Z, r1
	return err;
}
    12b8:	08 95       	ret

000012ba <twi_status>:

byte twi_status(void)
{
	return TWI_SR.status;
}
    12ba:	80 91 7c 02 	lds	r24, 0x027C
    12be:	08 95       	ret

000012c0 <twi_start>:

void twi_start(void)
{
	TW_CHECK_ERROR_STATUS;
    12c0:	80 91 7b 02 	lds	r24, 0x027B
    12c4:	81 11       	cpse	r24, r1
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <twi_start+0x16>

	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
    12c8:	84 ea       	ldi	r24, 0xA4	; 164
    12ca:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    12ce:	80 91 bc 00 	lds	r24, 0x00BC
    12d2:	87 ff       	sbrs	r24, 7
    12d4:	fc cf       	rjmp	.-8      	; 0x12ce <twi_start+0xe>
    12d6:	08 95       	ret

000012d8 <twi_stop>:
#endif
}

void twi_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    12d8:	84 e9       	ldi	r24, 0x94	; 148
    12da:	80 93 bc 00 	sts	0x00BC, r24
    12de:	08 95       	ret

000012e0 <twi_write_sla>:
}

void twi_write_sla(byte SLA)
{
	TW_CHECK_ERROR_STATUS;
    12e0:	90 91 7b 02 	lds	r25, 0x027B
    12e4:	91 11       	cpse	r25, r1
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <twi_write_sla+0x3e>

	TWDR = SLA;
    12e8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    12ec:	84 e8       	ldi	r24, 0x84	; 132
    12ee:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    12f2:	80 91 bc 00 	lds	r24, 0x00BC
    12f6:	87 ff       	sbrs	r24, 7
    12f8:	fc cf       	rjmp	.-8      	; 0x12f2 <twi_write_sla+0x12>

	if (TW_STATUS != TW_MT_SLA_ACK && TW_STATUS != TW_MR_SLA_ACK)
    12fa:	80 91 b9 00 	lds	r24, 0x00B9
    12fe:	88 7f       	andi	r24, 0xF8	; 248
    1300:	88 31       	cpi	r24, 0x18	; 24
    1302:	69 f0       	breq	.+26     	; 0x131e <twi_write_sla+0x3e>
    1304:	80 91 b9 00 	lds	r24, 0x00B9
    1308:	88 7f       	andi	r24, 0xF8	; 248
    130a:	80 34       	cpi	r24, 0x40	; 64
    130c:	41 f0       	breq	.+16     	; 0x131e <twi_write_sla+0x3e>
	{
		TWI_SR.error = true;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 7b 02 	sts	0x027B, r24
		TWI_SR.status = TW_STATUS;
    1314:	80 91 b9 00 	lds	r24, 0x00B9
    1318:	88 7f       	andi	r24, 0xF8	; 248
    131a:	80 93 7c 02 	sts	0x027C, r24
    131e:	08 95       	ret

00001320 <twi_detect>:
	}
}

bool twi_detect(byte SLA)
{
    1320:	cf 93       	push	r28
    1322:	c8 2f       	mov	r28, r24
	twi_start();
    1324:	cd df       	rcall	.-102    	; 0x12c0 <twi_start>
	twi_write_sla(TW_SLA_W(SLA));
    1326:	8c 2f       	mov	r24, r28
    1328:	88 0f       	add	r24, r24
    132a:	da df       	rcall	.-76     	; 0x12e0 <twi_write_sla>
#endif
}

void twi_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    132c:	84 e9       	ldi	r24, 0x94	; 148
    132e:	80 93 bc 00 	sts	0x00BC, r24
	TWBR = temp / 2 + temp % 2;
}

bool twi_error()
{
	bool err = TWI_SR.error;
    1332:	eb e7       	ldi	r30, 0x7B	; 123
    1334:	f2 e0       	ldi	r31, 0x02	; 2
    1336:	90 81       	ld	r25, Z
	TWI_SR.error = false;
    1338:	10 82       	st	Z, r1
	twi_start();
	twi_write_sla(TW_SLA_W(SLA));
	twi_stop();

	return !twi_error();
}
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 27       	eor	r24, r25
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <twi_write>:

void twi_write(byte data)
{
	TW_CHECK_ERROR_STATUS;
    1342:	90 91 7b 02 	lds	r25, 0x027B
    1346:	91 11       	cpse	r25, r1
    1348:	09 c0       	rjmp	.+18     	; 0x135c <twi_write+0x1a>

	TWDR = data;
    134a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    134e:	84 e8       	ldi	r24, 0x84	; 132
    1350:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    1354:	80 91 bc 00 	lds	r24, 0x00BC
    1358:	87 ff       	sbrs	r24, 7
    135a:	fc cf       	rjmp	.-8      	; 0x1354 <twi_write+0x12>
    135c:	08 95       	ret

0000135e <twi_read>:
#endif
}

byte twi_read(bool ACK)
{
	TW_CHECK_ERROR_STATUS_RET;
    135e:	90 91 7b 02 	lds	r25, 0x027B
    1362:	91 11       	cpse	r25, r1
    1364:	24 c0       	rjmp	.+72     	; 0x13ae <twi_read+0x50>

	TWCR = _BV(TWINT) | _BV(TWEN) | (ACK << TWEA);
    1366:	90 e4       	ldi	r25, 0x40	; 64
    1368:	89 9f       	mul	r24, r25
    136a:	90 01       	movw	r18, r0
    136c:	11 24       	eor	r1, r1
    136e:	24 68       	ori	r18, 0x84	; 132
    1370:	20 93 bc 00 	sts	0x00BC, r18

	loop_until_bit_is_set(TWCR, TWINT);
    1374:	90 91 bc 00 	lds	r25, 0x00BC
    1378:	97 ff       	sbrs	r25, 7
    137a:	fc cf       	rjmp	.-8      	; 0x1374 <twi_read+0x16>

	if (TW_STATUS != ( ACK ? TW_MR_DATA_ACK : TW_MR_DATA_NACK ))
    137c:	20 91 b9 00 	lds	r18, 0x00B9
    1380:	28 7f       	andi	r18, 0xF8	; 248
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 11       	cpse	r24, r1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <twi_read+0x30>
    1388:	88 e5       	ldi	r24, 0x58	; 88
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <twi_read+0x34>
    138e:	80 e5       	ldi	r24, 0x50	; 80
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	82 17       	cp	r24, r18
    1394:	93 07       	cpc	r25, r19
    1396:	41 f0       	breq	.+16     	; 0x13a8 <twi_read+0x4a>
	{
		TWI_SR.error = true;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	80 93 7b 02 	sts	0x027B, r24
		TWI_SR.status = TW_STATUS;
    139e:	80 91 b9 00 	lds	r24, 0x00B9
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	80 93 7c 02 	sts	0x027C, r24
	}

	return TWDR;
    13a8:	80 91 bb 00 	lds	r24, 0x00BB
    13ac:	08 95       	ret
#endif
}

byte twi_read(bool ACK)
{
	TW_CHECK_ERROR_STATUS_RET;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
		TWI_SR.error = true;
		TWI_SR.status = TW_STATUS;
	}

	return TWDR;
}
    13b0:	08 95       	ret

000013b2 <lcd_send>:
	while (*text)
	{
		lcd_char(*text);
		text++;
	}
}
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <lcd_send+0xe>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <lcd_send+0x10>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	90 91 7d 02 	lds	r25, 0x027D
    13ca:	69 2b       	or	r22, r25
    13cc:	38 2f       	mov	r19, r24
    13ce:	32 95       	swap	r19
    13d0:	3f 70       	andi	r19, 0x0F	; 15
    13d2:	30 ff       	sbrs	r19, 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <lcd_send+0x28>
    13d6:	20 e1       	ldi	r18, 0x10	; 16
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <lcd_send+0x2a>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	31 fd       	sbrc	r19, 1
    13de:	20 62       	ori	r18, 0x20	; 32
    13e0:	32 fd       	sbrc	r19, 2
    13e2:	20 64       	ori	r18, 0x40	; 64
    13e4:	38 70       	andi	r19, 0x08	; 8
    13e6:	09 f0       	breq	.+2      	; 0x13ea <lcd_send+0x38>
    13e8:	20 68       	ori	r18, 0x80	; 128
    13ea:	26 2b       	or	r18, r22
    13ec:	80 ff       	sbrs	r24, 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <lcd_send+0x42>
    13f0:	90 e1       	ldi	r25, 0x10	; 16
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <lcd_send+0x44>
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	81 fd       	sbrc	r24, 1
    13f8:	90 62       	ori	r25, 0x20	; 32
    13fa:	82 fd       	sbrc	r24, 2
    13fc:	90 64       	ori	r25, 0x40	; 64
    13fe:	83 fd       	sbrc	r24, 3
    1400:	90 68       	ori	r25, 0x80	; 128
    1402:	96 2b       	or	r25, r22
    1404:	82 2f       	mov	r24, r18
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	2a 83       	std	Y+2, r18	; 0x02
    140c:	89 2f       	mov	r24, r25
    140e:	84 60       	ori	r24, 0x04	; 4
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	55 df       	rcall	.-342    	; 0x12c0 <twi_start>
    1416:	8e e4       	ldi	r24, 0x4E	; 78
    1418:	63 df       	rcall	.-314    	; 0x12e0 <twi_write_sla>
    141a:	8e 01       	movw	r16, r28
    141c:	0f 5f       	subi	r16, 0xFF	; 255
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	7e 01       	movw	r14, r28
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	e8 0e       	add	r14, r24
    1426:	f1 1c       	adc	r15, r1
    1428:	f8 01       	movw	r30, r16
    142a:	81 91       	ld	r24, Z+
    142c:	8f 01       	movw	r16, r30
    142e:	89 df       	rcall	.-238    	; 0x1342 <twi_write>
    1430:	0e 15       	cp	r16, r14
    1432:	1f 05       	cpc	r17, r15
    1434:	c9 f7       	brne	.-14     	; 0x1428 <lcd_send+0x76>
    1436:	50 df       	rcall	.-352    	; 0x12d8 <twi_stop>
    1438:	8f ed       	ldi	r24, 0xDF	; 223
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <lcd_send+0x8a>
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <lcd_send+0x90>
    1442:	00 00       	nop
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <lcd_cls>:
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	a9 df       	rcall	.-174    	; 0x13b2 <lcd_send>
    1460:	8f e8       	ldi	r24, 0x8F	; 143
    1462:	9c e4       	ldi	r25, 0x4C	; 76
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <lcd_cls+0xa>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <lcd_cls+0x10>
    146a:	00 00       	nop
    146c:	08 95       	ret

0000146e <lcd_locate>:
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	31 f0       	breq	.+12     	; 0x147e <lcd_locate+0x10>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	31 f0       	breq	.+12     	; 0x1482 <lcd_locate+0x14>
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	31 f0       	breq	.+12     	; 0x1486 <lcd_locate+0x18>
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <lcd_locate+0x1a>
    147e:	98 e2       	ldi	r25, 0x28	; 40
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <lcd_locate+0x1a>
    1482:	94 e1       	ldi	r25, 0x14	; 20
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <lcd_locate+0x1a>
    1486:	94 e5       	ldi	r25, 0x54	; 84
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	86 0f       	add	r24, r22
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	89 0f       	add	r24, r25
    1490:	90 cf       	rjmp	.-224    	; 0x13b2 <lcd_send>

00001492 <lcd_create_stream>:
    1492:	fc 01       	movw	r30, r24
    1494:	8e e0       	ldi	r24, 0x0E	; 14
    1496:	df 01       	movw	r26, r30
    1498:	1d 92       	st	X+, r1
    149a:	8a 95       	dec	r24
    149c:	e9 f7       	brne	.-6      	; 0x1498 <lcd_create_stream+0x6>
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	83 83       	std	Z+3, r24	; 0x03
    14a2:	89 eb       	ldi	r24, 0xB9	; 185
    14a4:	9a e0       	ldi	r25, 0x0A	; 10
    14a6:	91 87       	std	Z+9, r25	; 0x09
    14a8:	80 87       	std	Z+8, r24	; 0x08
    14aa:	08 95       	ret

000014ac <lcd_backlight_on>:
    14ac:	88 e0       	ldi	r24, 0x08	; 8
    14ae:	80 93 7d 02 	sts	0x027D, r24
    14b2:	06 df       	rcall	.-500    	; 0x12c0 <twi_start>
    14b4:	8e e4       	ldi	r24, 0x4E	; 78
    14b6:	14 df       	rcall	.-472    	; 0x12e0 <twi_write_sla>
    14b8:	80 91 7d 02 	lds	r24, 0x027D
    14bc:	80 6f       	ori	r24, 0xF0	; 240
    14be:	41 df       	rcall	.-382    	; 0x1342 <twi_write>
    14c0:	0b cf       	rjmp	.-490    	; 0x12d8 <twi_stop>

000014c2 <lcd_init>:
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <lcd_init+0xe>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <lcd_init+0x10>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	ea df       	rcall	.-44     	; 0x14ac <lcd_backlight_on>
    14d8:	f3 de       	rcall	.-538    	; 0x12c0 <twi_start>
    14da:	8e e4       	ldi	r24, 0x4E	; 78
    14dc:	01 df       	rcall	.-510    	; 0x12e0 <twi_write_sla>
    14de:	80 91 7d 02 	lds	r24, 0x027D
    14e2:	80 6f       	ori	r24, 0xF0	; 240
    14e4:	2e df       	rcall	.-420    	; 0x1342 <twi_write>
    14e6:	f8 de       	rcall	.-528    	; 0x12d8 <twi_stop>
    14e8:	28 98       	cbi	0x05, 0	; 5
    14ea:	8f e5       	ldi	r24, 0x5F	; 95
    14ec:	9a ee       	ldi	r25, 0xEA	; 234
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <lcd_init+0x2c>
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <lcd_init+0x32>
    14f4:	00 00       	nop
    14f6:	80 e3       	ldi	r24, 0x30	; 48
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	8b 83       	std	Y+3, r24	; 0x03
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	de de       	rcall	.-580    	; 0x12c0 <twi_start>
    1504:	8e e4       	ldi	r24, 0x4E	; 78
    1506:	ec de       	rcall	.-552    	; 0x12e0 <twi_write_sla>
    1508:	fe 01       	movw	r30, r28
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	7f 01       	movw	r14, r30
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	f7 01       	movw	r30, r14
    1512:	01 91       	ld	r16, Z+
    1514:	7f 01       	movw	r14, r30
    1516:	80 91 7d 02 	lds	r24, 0x027D
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	80 2b       	or	r24, r16
    151e:	11 df       	rcall	.-478    	; 0x1342 <twi_write>
    1520:	80 91 7d 02 	lds	r24, 0x027D
    1524:	80 2b       	or	r24, r16
    1526:	0d df       	rcall	.-486    	; 0x1342 <twi_write>
    1528:	11 11       	cpse	r17, r1
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <lcd_init+0x76>
    152c:	8f e8       	ldi	r24, 0x8F	; 143
    152e:	9c e4       	ldi	r25, 0x4C	; 76
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <lcd_init+0x6e>
    1534:	00 c0       	rjmp	.+0      	; 0x1536 <lcd_init+0x74>
    1536:	00 00       	nop
    1538:	1f 5f       	subi	r17, 0xFF	; 255
    153a:	14 30       	cpi	r17, 0x04	; 4
    153c:	49 f7       	brne	.-46     	; 0x1510 <lcd_init+0x4e>
    153e:	cc de       	rcall	.-616    	; 0x12d8 <twi_stop>
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	88 e2       	ldi	r24, 0x28	; 40
    1544:	36 df       	rcall	.-404    	; 0x13b2 <lcd_send>
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	33 df       	rcall	.-410    	; 0x13b2 <lcd_send>
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	30 df       	rcall	.-416    	; 0x13b2 <lcd_send>
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	8c e0       	ldi	r24, 0x0C	; 12
    1556:	2d df       	rcall	.-422    	; 0x13b2 <lcd_send>
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	76 cf       	rjmp	.-276    	; 0x145a <lcd_cls>

0000156e <lcd_char>:
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	20 cf       	rjmp	.-448    	; 0x13b2 <lcd_send>

00001572 <lcd_char_stream>:
    1572:	fd df       	rcall	.-6      	; 0x156e <lcd_char>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	08 95       	ret

0000157a <lcd_str_P>:

#if USE_LCD_STR_P
void lcd_str_P(const char * text)
{
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
	register char _char = 0;
	while (1)
	{
		_char = pgm_read_byte(text);
    1580:	fe 01       	movw	r30, r28
    1582:	84 91       	lpm	r24, Z

		if (_char == 0) break;
    1584:	88 23       	and	r24, r24
    1586:	19 f0       	breq	.+6      	; 0x158e <lcd_str_P+0x14>

		text++;
    1588:	21 96       	adiw	r28, 0x01	; 1
		lcd_char(_char);
    158a:	f1 df       	rcall	.-30     	; 0x156e <lcd_char>
	}
    158c:	f9 cf       	rjmp	.-14     	; 0x1580 <lcd_str_P+0x6>
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <sht_checkCRC>:
	}
}

void sht_low_pwr(bool value)
{
	SHTSR.low_pwr = value;
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	00 d0       	rcall	.+0      	; 0x159a <sht_checkCRC+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6a 83       	std	Y+2, r22	; 0x02
    15a2:	fe 01       	movw	r30, r28
    15a4:	31 96       	adiw	r30, 0x01	; 1
    15a6:	9e 01       	movw	r18, r28
    15a8:	2d 5f       	subi	r18, 0xFD	; 253
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	51 e3       	ldi	r21, 0x31	; 49
    15b0:	81 91       	ld	r24, Z+
    15b2:	98 27       	eor	r25, r24
    15b4:	88 e0       	ldi	r24, 0x08	; 8
    15b6:	97 ff       	sbrs	r25, 7
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <sht_checkCRC+0x2c>
    15ba:	99 0f       	add	r25, r25
    15bc:	95 27       	eor	r25, r21
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <sht_checkCRC+0x2e>
    15c0:	99 0f       	add	r25, r25
    15c2:	81 50       	subi	r24, 0x01	; 1
    15c4:	c1 f7       	brne	.-16     	; 0x15b6 <sht_checkCRC+0x22>
    15c6:	e2 17       	cp	r30, r18
    15c8:	f3 07       	cpc	r31, r19
    15ca:	91 f7       	brne	.-28     	; 0x15b0 <sht_checkCRC+0x1c>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	94 13       	cpse	r25, r20
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <sht_command>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	6e de       	rcall	.-804    	; 0x12c0 <twi_start>
    15e4:	80 ee       	ldi	r24, 0xE0	; 224
    15e6:	7c de       	rcall	.-776    	; 0x12e0 <twi_write_sla>
    15e8:	8d 2f       	mov	r24, r29
    15ea:	ab de       	rcall	.-682    	; 0x1342 <twi_write>
    15ec:	8c 2f       	mov	r24, r28
    15ee:	a9 de       	rcall	.-686    	; 0x1342 <twi_write>
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	71 ce       	rjmp	.-798    	; 0x12d8 <twi_stop>

000015f6 <sht_checkID>:
}

SHT_STATUS_t sht_checkID(void)
{
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	sht_command(SHT_READID);
    15fc:	88 ec       	ldi	r24, 0xC8	; 200
    15fe:	9f ee       	ldi	r25, 0xEF	; 239
    1600:	ed df       	rcall	.-38     	; 0x15dc <sht_command>

	twi_start();
    1602:	5e de       	rcall	.-836    	; 0x12c0 <twi_start>
	twi_write_sla(TW_SLA_R(SHT_ADDR));
    1604:	81 ee       	ldi	r24, 0xE1	; 225
    1606:	6c de       	rcall	.-808    	; 0x12e0 <twi_write_sla>
	byte ID_MSB = twi_read(ACK);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	a9 de       	rcall	.-686    	; 0x135e <twi_read>
    160c:	d8 2f       	mov	r29, r24
	byte ID_LSB = twi_read(ACK);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	a6 de       	rcall	.-692    	; 0x135e <twi_read>
    1612:	c8 2f       	mov	r28, r24
	byte ID_CRC = twi_read(ACK);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	a3 de       	rcall	.-698    	; 0x135e <twi_read>
    1618:	18 2f       	mov	r17, r24
	twi_stop();
    161a:	5e de       	rcall	.-836    	; 0x12d8 <twi_stop>

	uint16_t ID = MERGE(ID_MSB, ID_LSB);

	if (sht_checkCRC(ID_MSB, ID_LSB, ID_CRC))
    161c:	41 2f       	mov	r20, r17
    161e:	6c 2f       	mov	r22, r28
    1620:	8d 2f       	mov	r24, r29
    1622:	b8 df       	rcall	.-144    	; 0x1594 <sht_checkCRC>
    1624:	88 23       	and	r24, r24
    1626:	51 f0       	breq	.+20     	; 0x163c <sht_checkID+0x46>
	{
		if ((ID & 0x083F) != 0x0807)
    1628:	8c 2f       	mov	r24, r28
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9d 2b       	or	r25, r29
    162e:	8f 73       	andi	r24, 0x3F	; 63
    1630:	98 70       	andi	r25, 0x08	; 8
    1632:	87 30       	cpi	r24, 0x07	; 7
    1634:	98 40       	sbci	r25, 0x08	; 8
    1636:	21 f4       	brne	.+8      	; 0x1640 <sht_checkID+0x4a>
		{
			return SHT_Status_ID_Fail;
		}

		return SHT_Status_Nominal;
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <sht_checkID+0x4c>
	}

	return SHT_Status_Error;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <sht_checkID+0x4c>

	if (sht_checkCRC(ID_MSB, ID_LSB, ID_CRC))
	{
		if ((ID & 0x083F) != 0x0807)
		{
			return SHT_Status_ID_Fail;
    1640:	83 e0       	ldi	r24, 0x03	; 3

		return SHT_Status_Nominal;
	}

	return SHT_Status_Error;
}
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	08 95       	ret

0000164a <sht_init>:

SHT_STATUS_t sht_init(void)
{
    164a:	cf 93       	push	r28
}

static inline void sht_wakeup(void);
static inline void sht_wakeup(void)
{
	sht_command(SHT_WAKEUP);
    164c:	87 e1       	ldi	r24, 0x17	; 23
    164e:	95 e3       	ldi	r25, 0x35	; 53
    1650:	c5 df       	rcall	.-118    	; 0x15dc <sht_command>
    1652:	8f eb       	ldi	r24, 0xBF	; 191
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <sht_init+0xc>
    165a:	00 c0       	rjmp	.+0      	; 0x165c <sht_init+0x12>
    165c:	00 00       	nop

SHT_STATUS_t sht_init(void)
{
	byte retval = 0;
	sht_wakeup();
	retval = sht_checkID();
    165e:	cb df       	rcall	.-106    	; 0x15f6 <sht_checkID>
    1660:	c8 2f       	mov	r28, r24
}

static inline void sht_sleep(void);
static inline void sht_sleep(void)
{
	sht_command(SHT_SLEEP);
    1662:	88 e9       	ldi	r24, 0x98	; 152
    1664:	90 eb       	ldi	r25, 0xB0	; 176
    1666:	ba df       	rcall	.-140    	; 0x15dc <sht_command>
    1668:	8f eb       	ldi	r24, 0xBF	; 191
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <sht_init+0x22>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <sht_init+0x28>
    1672:	00 00       	nop
	}
}

void sht_low_pwr(bool value)
{
	SHTSR.low_pwr = value;
    1674:	10 92 7f 02 	sts	0x027F, r1
	sht_wakeup();
	retval = sht_checkID();
	sht_sleep();
	sht_low_pwr(false);
	return retval;
}
    1678:	8c 2f       	mov	r24, r28
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <sht_meas>:

SHT_STATUS_t sht_meas(void)
{
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
}

static inline void sht_wakeup(void);
static inline void sht_wakeup(void)
{
	sht_command(SHT_WAKEUP);
    168a:	87 e1       	ldi	r24, 0x17	; 23
    168c:	95 e3       	ldi	r25, 0x35	; 53
    168e:	a6 df       	rcall	.-180    	; 0x15dc <sht_command>
    1690:	8f eb       	ldi	r24, 0xBF	; 191
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <sht_meas+0x16>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <sht_meas+0x1c>
    169a:	00 00       	nop
}

static inline void sht_mode(void);
static inline void sht_mode(void)
{
	if (SHTSR.low_pwr)
    169c:	80 91 7f 02 	lds	r24, 0x027F
    16a0:	88 23       	and	r24, r24
    16a2:	41 f0       	breq	.+16     	; 0x16b4 <sht_meas+0x36>
	{
		sht_command((SHT_COMMAND_t)SHT_LOWPOW_MEAS_TFIRST);
    16a4:	8c e9       	ldi	r24, 0x9C	; 156
    16a6:	90 e6       	ldi	r25, 0x60	; 96
    16a8:	99 df       	rcall	.-206    	; 0x15dc <sht_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16aa:	8f e9       	ldi	r24, 0x9F	; 159
    16ac:	9f e0       	ldi	r25, 0x0F	; 15
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <sht_meas+0x30>
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <sht_meas+0x44>
		_delay_ms(1);
	}
	else
	{
		sht_command((SHT_COMMAND_t)SHT_NORMAL_MEAS_TFIRST);
    16b4:	86 e6       	ldi	r24, 0x66	; 102
    16b6:	98 e7       	ldi	r25, 0x78	; 120
    16b8:	91 df       	rcall	.-222    	; 0x15dc <sht_command>
    16ba:	8f e5       	ldi	r24, 0x5F	; 95
    16bc:	9a ee       	ldi	r25, 0xEA	; 234
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <sht_meas+0x40>
    16c2:	00 c0       	rjmp	.+0      	; 0x16c4 <sht_meas+0x46>
    16c4:	00 00       	nop
SHT_STATUS_t sht_meas(void)
{
	sht_wakeup();
	sht_mode();

	twi_start();
    16c6:	fc dd       	rcall	.-1032   	; 0x12c0 <twi_start>
	twi_write_sla(TW_SLA_R(SHT_ADDR));
    16c8:	81 ee       	ldi	r24, 0xE1	; 225
    16ca:	0a de       	rcall	.-1004   	; 0x12e0 <twi_write_sla>
	byte T_MSB = twi_read(ACK);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	47 de       	rcall	.-882    	; 0x135e <twi_read>
    16d0:	08 2f       	mov	r16, r24
	byte T_LSB = twi_read(ACK);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	44 de       	rcall	.-888    	; 0x135e <twi_read>
    16d6:	d8 2f       	mov	r29, r24
	byte T_CRC = twi_read(ACK);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	41 de       	rcall	.-894    	; 0x135e <twi_read>
    16dc:	e8 2e       	mov	r14, r24
	byte H_MSB = twi_read(ACK);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	3e de       	rcall	.-900    	; 0x135e <twi_read>
    16e2:	18 2f       	mov	r17, r24
	byte H_LSB = twi_read(ACK);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	3b de       	rcall	.-906    	; 0x135e <twi_read>
    16e8:	c8 2f       	mov	r28, r24
	byte H_CRC = twi_read(ACK);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	38 de       	rcall	.-912    	; 0x135e <twi_read>
    16ee:	f8 2e       	mov	r15, r24
	twi_stop();
    16f0:	f3 dd       	rcall	.-1050   	; 0x12d8 <twi_stop>
}

static inline void sht_sleep(void);
static inline void sht_sleep(void)
{
	sht_command(SHT_SLEEP);
    16f2:	88 e9       	ldi	r24, 0x98	; 152
    16f4:	90 eb       	ldi	r25, 0xB0	; 176
    16f6:	72 df       	rcall	.-284    	; 0x15dc <sht_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f8:	8f eb       	ldi	r24, 0xBF	; 191
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <sht_meas+0x7e>
    1700:	00 c0       	rjmp	.+0      	; 0x1702 <sht_meas+0x84>
    1702:	00 00       	nop
	byte H_CRC = twi_read(ACK);
	twi_stop();

	sht_sleep();

	if (sht_checkCRC(T_MSB, T_LSB, T_CRC) && sht_checkCRC(H_MSB, H_LSB, H_CRC))
    1704:	4e 2d       	mov	r20, r14
    1706:	6d 2f       	mov	r22, r29
    1708:	80 2f       	mov	r24, r16
    170a:	44 df       	rcall	.-376    	; 0x1594 <sht_checkCRC>
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <sht_meas+0x94>
    1710:	41 c0       	rjmp	.+130    	; 0x1794 <sht_meas+0x116>
    1712:	4f 2d       	mov	r20, r15
    1714:	6c 2f       	mov	r22, r28
    1716:	81 2f       	mov	r24, r17
    1718:	3d df       	rcall	.-390    	; 0x1594 <sht_checkCRC>
    171a:	88 23       	and	r24, r24
    171c:	d9 f1       	breq	.+118    	; 0x1794 <sht_meas+0x116>
static SHT_SR_t SHTSR;

static inline void sht_calcT(uint16_t temperature);
static inline void sht_calcT(uint16_t temperature)
{
	SHTSR.T = (double)temperature * 175. / 65535. - 45.;
    171e:	6d 2f       	mov	r22, r29
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	70 2b       	or	r23, r16
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatunsisf>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4f e2       	ldi	r20, 0x2F	; 47
    1732:	53 e4       	ldi	r21, 0x43	; 67
    1734:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	4f e7       	ldi	r20, 0x7F	; 127
    173e:	57 e4       	ldi	r21, 0x47	; 71
    1740:	ae d7       	rcall	.+3932   	; 0x269e <__divsf3>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	44 e3       	ldi	r20, 0x34	; 52
    1748:	52 e4       	ldi	r21, 0x42	; 66
    174a:	44 d7       	rcall	.+3720   	; 0x25d4 <__subsf3>
    174c:	60 93 80 02 	sts	0x0280, r22
    1750:	70 93 81 02 	sts	0x0281, r23
    1754:	80 93 82 02 	sts	0x0282, r24
    1758:	90 93 83 02 	sts	0x0283, r25
}

static inline void sht_calcRH(uint16_t humidity);
static inline void sht_calcRH(uint16_t humidity)
{
	SHTSR.RH = (double)humidity / 65535. * 100.;
    175c:	6c 2f       	mov	r22, r28
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	71 2b       	or	r23, r17
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatunsisf>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	3f ef       	ldi	r19, 0xFF	; 255
    176e:	4f e7       	ldi	r20, 0x7F	; 127
    1770:	57 e4       	ldi	r21, 0x47	; 71
    1772:	95 d7       	rcall	.+3882   	; 0x269e <__divsf3>
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	48 ec       	ldi	r20, 0xC8	; 200
    177a:	52 e4       	ldi	r21, 0x42	; 66
    177c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1780:	60 93 84 02 	sts	0x0284, r22
    1784:	70 93 85 02 	sts	0x0285, r23
    1788:	80 93 86 02 	sts	0x0286, r24
    178c:	90 93 87 02 	sts	0x0287, r25

	if (sht_checkCRC(T_MSB, T_LSB, T_CRC) && sht_checkCRC(H_MSB, H_LSB, H_CRC))
	{
		sht_calcT(MERGE(T_MSB, T_LSB));
		sht_calcRH(MERGE(H_MSB, H_LSB));
		return SHT_Status_Nominal;
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	15 c0       	rjmp	.+42     	; 0x17be <sht_meas+0x140>
	}

	SHTSR.T = -45.;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a4 e3       	ldi	r26, 0x34	; 52
    179a:	b2 ec       	ldi	r27, 0xC2	; 194
    179c:	80 93 80 02 	sts	0x0280, r24
    17a0:	90 93 81 02 	sts	0x0281, r25
    17a4:	a0 93 82 02 	sts	0x0282, r26
    17a8:	b0 93 83 02 	sts	0x0283, r27
	SHTSR.RH = 0.;
    17ac:	10 92 84 02 	sts	0x0284, r1
    17b0:	10 92 85 02 	sts	0x0285, r1
    17b4:	10 92 86 02 	sts	0x0286, r1
    17b8:	10 92 87 02 	sts	0x0287, r1
	return SHT_Status_CRC_Fail;
    17bc:	82 e0       	ldi	r24, 0x02	; 2
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	08 95       	ret

000017cc <sht_temperature>:

double sht_temperature(void)
{
	return SHTSR.T;
    17cc:	60 91 80 02 	lds	r22, 0x0280
    17d0:	70 91 81 02 	lds	r23, 0x0281
    17d4:	80 91 82 02 	lds	r24, 0x0282
    17d8:	90 91 83 02 	lds	r25, 0x0283
}
    17dc:	08 95       	ret

000017de <sht_humidity>:

double sht_humidity(void)
{
	return SHTSR.RH;
    17de:	60 91 84 02 	lds	r22, 0x0284
    17e2:	70 91 85 02 	lds	r23, 0x0285
    17e6:	80 91 86 02 	lds	r24, 0x0286
    17ea:	90 91 87 02 	lds	r25, 0x0287
}
    17ee:	08 95       	ret

000017f0 <RingBuffer_Init>:
}

size_t RingBuffer_Capacity(RingBuffer_t * Q)
{
	return Q->Size;
}
    17f0:	fc 01       	movw	r30, r24
    17f2:	71 83       	std	Z+1, r23	; 0x01
    17f4:	60 83       	st	Z, r22
    17f6:	55 83       	std	Z+5, r21	; 0x05
    17f8:	44 83       	std	Z+4, r20	; 0x04
    17fa:	17 82       	std	Z+7, r1	; 0x07
    17fc:	16 82       	std	Z+6, r1	; 0x06
    17fe:	11 86       	std	Z+9, r1	; 0x09
    1800:	10 86       	std	Z+8, r1	; 0x08
    1802:	13 82       	std	Z+3, r1	; 0x03
    1804:	12 82       	std	Z+2, r1	; 0x02
    1806:	08 95       	ret

00001808 <RingBuffer_Clear>:
    1808:	fc 01       	movw	r30, r24
    180a:	17 82       	std	Z+7, r1	; 0x07
    180c:	16 82       	std	Z+6, r1	; 0x06
    180e:	11 86       	std	Z+9, r1	; 0x09
    1810:	10 86       	std	Z+8, r1	; 0x08
    1812:	13 82       	std	Z+3, r1	; 0x03
    1814:	12 82       	std	Z+2, r1	; 0x02
    1816:	08 95       	ret

00001818 <RingBuffer_Insert>:
    1818:	fc 01       	movw	r30, r24
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	24 81       	ldd	r18, Z+4	; 0x04
    1822:	35 81       	ldd	r19, Z+5	; 0x05
    1824:	82 17       	cp	r24, r18
    1826:	93 07       	cpc	r25, r19
    1828:	11 f4       	brne	.+4      	; 0x182e <RingBuffer_Insert+0x16>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	20 85       	ldd	r18, Z+8	; 0x08
    1830:	31 85       	ldd	r19, Z+9	; 0x09
    1832:	82 17       	cp	r24, r18
    1834:	93 07       	cpc	r25, r19
    1836:	71 f0       	breq	.+28     	; 0x1854 <RingBuffer_Insert+0x3c>
    1838:	a0 81       	ld	r26, Z
    183a:	b1 81       	ldd	r27, Z+1	; 0x01
    183c:	a8 0f       	add	r26, r24
    183e:	b9 1f       	adc	r27, r25
    1840:	6c 93       	st	X, r22
    1842:	97 83       	std	Z+7, r25	; 0x07
    1844:	86 83       	std	Z+6, r24	; 0x06
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	93 83       	std	Z+3, r25	; 0x03
    184e:	82 83       	std	Z+2, r24	; 0x02
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	08 95       	ret
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	08 95       	ret

00001858 <RingBuffer_Get>:
    1858:	fc 01       	movw	r30, r24
    185a:	80 85       	ldd	r24, Z+8	; 0x08
    185c:	91 85       	ldd	r25, Z+9	; 0x09
    185e:	26 81       	ldd	r18, Z+6	; 0x06
    1860:	37 81       	ldd	r19, Z+7	; 0x07
    1862:	28 17       	cp	r18, r24
    1864:	39 07       	cpc	r19, r25
    1866:	d1 f0       	breq	.+52     	; 0x189c <RingBuffer_Get+0x44>
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	91 87       	std	Z+9, r25	; 0x09
    186c:	80 87       	std	Z+8, r24	; 0x08
    186e:	24 81       	ldd	r18, Z+4	; 0x04
    1870:	35 81       	ldd	r19, Z+5	; 0x05
    1872:	82 17       	cp	r24, r18
    1874:	93 07       	cpc	r25, r19
    1876:	11 f4       	brne	.+4      	; 0x187c <RingBuffer_Get+0x24>
    1878:	11 86       	std	Z+9, r1	; 0x09
    187a:	10 86       	std	Z+8, r1	; 0x08
    187c:	a0 81       	ld	r26, Z
    187e:	b1 81       	ldd	r27, Z+1	; 0x01
    1880:	80 85       	ldd	r24, Z+8	; 0x08
    1882:	91 85       	ldd	r25, Z+9	; 0x09
    1884:	a8 0f       	add	r26, r24
    1886:	b9 1f       	adc	r27, r25
    1888:	8c 91       	ld	r24, X
    188a:	db 01       	movw	r26, r22
    188c:	8c 93       	st	X, r24
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	08 95       	ret
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	08 95       	ret

000018a0 <RingBuffer_GetAsString>:
    18a0:	9f 92       	push	r9
    18a2:	af 92       	push	r10
    18a4:	bf 92       	push	r11
    18a6:	cf 92       	push	r12
    18a8:	df 92       	push	r13
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	1f 92       	push	r1
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	5c 01       	movw	r10, r24
    18be:	8b 01       	movw	r16, r22
    18c0:	94 2e       	mov	r9, r20
    18c2:	6b 01       	movw	r12, r22
    18c4:	76 01       	movw	r14, r12
    18c6:	e0 1a       	sub	r14, r16
    18c8:	f1 0a       	sbc	r15, r17
    18ca:	be 01       	movw	r22, r28
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	c5 01       	movw	r24, r10
    18d2:	c2 df       	rcall	.-124    	; 0x1858 <RingBuffer_Get>
    18d4:	88 23       	and	r24, r24
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <RingBuffer_GetAsString+0x46>
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	89 15       	cp	r24, r9
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <RingBuffer_GetAsString+0x46>
    18de:	f6 01       	movw	r30, r12
    18e0:	81 93       	st	Z+, r24
    18e2:	6f 01       	movw	r12, r30
    18e4:	ef cf       	rjmp	.-34     	; 0x18c4 <RingBuffer_GetAsString+0x24>
    18e6:	f8 01       	movw	r30, r16
    18e8:	ee 0d       	add	r30, r14
    18ea:	ff 1d       	adc	r31, r15
    18ec:	10 82       	st	Z, r1
    18ee:	c8 01       	movw	r24, r16
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	08 95       	ret

0000190a <RingBuffer_IsFull>:
    190a:	fc 01       	movw	r30, r24
    190c:	26 81       	ldd	r18, Z+6	; 0x06
    190e:	37 81       	ldd	r19, Z+7	; 0x07
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	84 81       	ldd	r24, Z+4	; 0x04
    1916:	95 81       	ldd	r25, Z+5	; 0x05
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	11 f4       	brne	.+4      	; 0x1922 <RingBuffer_IsFull+0x18>
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	40 85       	ldd	r20, Z+8	; 0x08
    1926:	51 85       	ldd	r21, Z+9	; 0x09
    1928:	42 17       	cp	r20, r18
    192a:	53 07       	cpc	r21, r19
    192c:	09 f0       	breq	.+2      	; 0x1930 <RingBuffer_IsFull+0x26>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	08 95       	ret

00001932 <RingBuffer_Size>:

size_t RingBuffer_Size(RingBuffer_t * Q)
{
	return Q->Count;
}
    1932:	fc 01       	movw	r30, r24
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	08 95       	ret

0000193a <Endpoint_Write_PStream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ec 01       	movw	r28, r24
    194c:	8b 01       	movw	r16, r22
    194e:	7a 01       	movw	r14, r20
    1950:	68 d1       	rcall	.+720    	; 0x1c22 <Endpoint_WaitUntilReady>
    1952:	81 11       	cpse	r24, r1
    1954:	34 c0       	rjmp	.+104    	; 0x19be <Endpoint_Write_PStream_LE+0x84>
    1956:	e1 14       	cp	r14, r1
    1958:	f1 04       	cpc	r15, r1
    195a:	39 f0       	breq	.+14     	; 0x196a <Endpoint_Write_PStream_LE+0x30>
    195c:	f7 01       	movw	r30, r14
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	08 1b       	sub	r16, r24
    1964:	19 0b       	sbc	r17, r25
    1966:	c8 0f       	add	r28, r24
    1968:	d9 1f       	adc	r29, r25
    196a:	c1 2c       	mov	r12, r1
    196c:	d1 2c       	mov	r13, r1
    196e:	01 15       	cp	r16, r1
    1970:	11 05       	cpc	r17, r1
    1972:	21 f1       	breq	.+72     	; 0x19bc <Endpoint_Write_PStream_LE+0x82>
    1974:	80 91 e8 00 	lds	r24, 0x00E8
    1978:	85 fd       	sbrc	r24, 5
    197a:	15 c0       	rjmp	.+42     	; 0x19a6 <Endpoint_Write_PStream_LE+0x6c>
    197c:	80 91 e8 00 	lds	r24, 0x00E8
    1980:	8e 77       	andi	r24, 0x7E	; 126
    1982:	80 93 e8 00 	sts	0x00E8, r24
    1986:	e1 14       	cp	r14, r1
    1988:	f1 04       	cpc	r15, r1
    198a:	49 f0       	breq	.+18     	; 0x199e <Endpoint_Write_PStream_LE+0x64>
    198c:	f7 01       	movw	r30, r14
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	c8 0e       	add	r12, r24
    1994:	d9 1e       	adc	r13, r25
    1996:	d1 82       	std	Z+1, r13	; 0x01
    1998:	c0 82       	st	Z, r12
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	10 c0       	rjmp	.+32     	; 0x19be <Endpoint_Write_PStream_LE+0x84>
    199e:	41 d1       	rcall	.+642    	; 0x1c22 <Endpoint_WaitUntilReady>
    19a0:	88 23       	and	r24, r24
    19a2:	29 f3       	breq	.-54     	; 0x196e <Endpoint_Write_PStream_LE+0x34>
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <Endpoint_Write_PStream_LE+0x84>
    19a6:	fe 01       	movw	r30, r28
    19a8:	84 91       	lpm	r24, Z
    19aa:	80 93 f1 00 	sts	0x00F1, r24
    19ae:	21 96       	adiw	r28, 0x01	; 1
    19b0:	01 50       	subi	r16, 0x01	; 1
    19b2:	11 09       	sbc	r17, r1
    19b4:	ff ef       	ldi	r31, 0xFF	; 255
    19b6:	cf 1a       	sub	r12, r31
    19b8:	df 0a       	sbc	r13, r31
    19ba:	d9 cf       	rjmp	.-78     	; 0x196e <Endpoint_Write_PStream_LE+0x34>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	08 95       	ret

000019d0 <Endpoint_Write_Control_Stream_LE>:
    19d0:	20 91 a0 03 	lds	r18, 0x03A0
    19d4:	30 91 a1 03 	lds	r19, 0x03A1
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	48 f0       	brcs	.+18     	; 0x19f0 <Endpoint_Write_Control_Stream_LE+0x20>
    19de:	61 15       	cp	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	39 f4       	brne	.+14     	; 0x19f2 <Endpoint_Write_Control_Stream_LE+0x22>
    19e4:	20 91 e8 00 	lds	r18, 0x00E8
    19e8:	2e 77       	andi	r18, 0x7E	; 126
    19ea:	20 93 e8 00 	sts	0x00E8, r18
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <Endpoint_Write_Control_Stream_LE+0x22>
    19f0:	b9 01       	movw	r22, r18
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	71 f1       	breq	.+92     	; 0x1a58 <Endpoint_Write_Control_Stream_LE+0x88>
    19fc:	8e b3       	in	r24, 0x1e	; 30
    19fe:	88 23       	and	r24, r24
    1a00:	e9 f1       	breq	.+122    	; 0x1a7c <Endpoint_Write_Control_Stream_LE+0xac>
    1a02:	85 30       	cpi	r24, 0x05	; 5
    1a04:	e9 f1       	breq	.+122    	; 0x1a80 <Endpoint_Write_Control_Stream_LE+0xb0>
    1a06:	80 91 e8 00 	lds	r24, 0x00E8
    1a0a:	83 fd       	sbrc	r24, 3
    1a0c:	3b c0       	rjmp	.+118    	; 0x1a84 <Endpoint_Write_Control_Stream_LE+0xb4>
    1a0e:	80 91 e8 00 	lds	r24, 0x00E8
    1a12:	82 fd       	sbrc	r24, 2
    1a14:	2d c0       	rjmp	.+90     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0xa0>
    1a16:	80 91 e8 00 	lds	r24, 0x00E8
    1a1a:	80 ff       	sbrs	r24, 0
    1a1c:	ec cf       	rjmp	.-40     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x26>
    1a1e:	20 91 f3 00 	lds	r18, 0x00F3
    1a22:	80 91 f2 00 	lds	r24, 0x00F2
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	92 2b       	or	r25, r18
    1a2a:	61 15       	cp	r22, r1
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	51 f0       	breq	.+20     	; 0x1a44 <Endpoint_Write_Control_Stream_LE+0x74>
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	91 05       	cpc	r25, r1
    1a34:	38 f4       	brcc	.+14     	; 0x1a44 <Endpoint_Write_Control_Stream_LE+0x74>
    1a36:	21 91       	ld	r18, Z+
    1a38:	20 93 f1 00 	sts	0x00F1, r18
    1a3c:	61 50       	subi	r22, 0x01	; 1
    1a3e:	71 09       	sbc	r23, r1
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	f3 cf       	rjmp	.-26     	; 0x1a2a <Endpoint_Write_Control_Stream_LE+0x5a>
    1a44:	21 e0       	ldi	r18, 0x01	; 1
    1a46:	08 97       	sbiw	r24, 0x08	; 8
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <Endpoint_Write_Control_Stream_LE+0x7c>
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8
    1a50:	8e 77       	andi	r24, 0x7E	; 126
    1a52:	80 93 e8 00 	sts	0x00E8, r24
    1a56:	cf cf       	rjmp	.-98     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x26>
    1a58:	21 11       	cpse	r18, r1
    1a5a:	d0 cf       	rjmp	.-96     	; 0x19fc <Endpoint_Write_Control_Stream_LE+0x2c>
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0xa0>
    1a5e:	8e b3       	in	r24, 0x1e	; 30
    1a60:	88 23       	and	r24, r24
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <Endpoint_Write_Control_Stream_LE+0xac>
    1a64:	85 30       	cpi	r24, 0x05	; 5
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <Endpoint_Write_Control_Stream_LE+0xb0>
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	83 fd       	sbrc	r24, 3
    1a6e:	0a c0       	rjmp	.+20     	; 0x1a84 <Endpoint_Write_Control_Stream_LE+0xb4>
    1a70:	80 91 e8 00 	lds	r24, 0x00E8
    1a74:	82 ff       	sbrs	r24, 2
    1a76:	f3 cf       	rjmp	.-26     	; 0x1a5e <Endpoint_Write_Control_Stream_LE+0x8e>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	08 95       	ret
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	08 95       	ret
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	08 95       	ret
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	08 95       	ret

00001a88 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a88:	20 91 a0 03 	lds	r18, 0x03A0
    1a8c:	30 91 a1 03 	lds	r19, 0x03A1
    1a90:	26 17       	cp	r18, r22
    1a92:	37 07       	cpc	r19, r23
    1a94:	48 f0       	brcs	.+18     	; 0x1aa8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a96:	61 15       	cp	r22, r1
    1a98:	71 05       	cpc	r23, r1
    1a9a:	39 f4       	brne	.+14     	; 0x1aaa <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a9c:	20 91 e8 00 	lds	r18, 0x00E8
    1aa0:	2e 77       	andi	r18, 0x7E	; 126
    1aa2:	20 93 e8 00 	sts	0x00E8, r18
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <Endpoint_Write_Control_PStream_LE+0x22>
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	fc 01       	movw	r30, r24
    1aac:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1aae:	61 15       	cp	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	89 f1       	breq	.+98     	; 0x1b16 <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ab4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab6:	88 23       	and	r24, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <Endpoint_Write_Control_PStream_LE+0x34>
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1abc:	85 30       	cpi	r24, 0x05	; 5
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <Endpoint_Write_Control_PStream_LE+0x3a>
    1ac0:	3e c0       	rjmp	.+124    	; 0x1b3e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ac2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ac6:	83 fd       	sbrc	r24, 3
    1ac8:	3c c0       	rjmp	.+120    	; 0x1b42 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ace:	82 fd       	sbrc	r24, 2
    1ad0:	2e c0       	rjmp	.+92     	; 0x1b2e <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ad2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1ad6:	80 ff       	sbrs	r24, 0
    1ad8:	ea cf       	rjmp	.-44     	; 0x1aae <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ada:	20 91 f3 00 	lds	r18, 0x00F3
    1ade:	80 91 f2 00 	lds	r24, 0x00F2
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ae6:	61 15       	cp	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	59 f0       	breq	.+22     	; 0x1b02 <Endpoint_Write_Control_PStream_LE+0x7a>
    1aec:	88 30       	cpi	r24, 0x08	; 8
    1aee:	91 05       	cpc	r25, r1
    1af0:	40 f4       	brcc	.+16     	; 0x1b02 <Endpoint_Write_Control_PStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1af2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1af4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1af8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	f2 cf       	rjmp	.-28     	; 0x1ae6 <Endpoint_Write_Control_PStream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b02:	21 e0       	ldi	r18, 0x01	; 1
    1b04:	08 97       	sbiw	r24, 0x08	; 8
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <Endpoint_Write_Control_PStream_LE+0x82>
    1b08:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b0a:	80 91 e8 00 	lds	r24, 0x00E8
    1b0e:	8e 77       	andi	r24, 0x7E	; 126
    1b10:	80 93 e8 00 	sts	0x00E8, r24
    1b14:	cc cf       	rjmp	.-104    	; 0x1aae <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b16:	21 11       	cpse	r18, r1
    1b18:	cd cf       	rjmp	.-102    	; 0x1ab4 <Endpoint_Write_Control_PStream_LE+0x2c>
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b1c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b1e:	88 23       	and	r24, r24
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b22:	85 30       	cpi	r24, 0x05	; 5
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b26:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b2a:	83 fd       	sbrc	r24, 3
    1b2c:	0a c0       	rjmp	.+20     	; 0x1b42 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b32:	82 ff       	sbrs	r24, 2
    1b34:	f3 cf       	rjmp	.-26     	; 0x1b1c <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b44:	08 95       	ret

00001b46 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1b46:	8f 70       	andi	r24, 0x0F	; 15
    1b48:	80 93 e9 00 	sts	0x00E9, r24
    1b4c:	eb ee       	ldi	r30, 0xEB	; 235
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	81 60       	ori	r24, 0x01	; 1
    1b54:	80 83       	st	Z, r24
    1b56:	ed ee       	ldi	r30, 0xED	; 237
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	10 82       	st	Z, r1
    1b5c:	60 93 ec 00 	sts	0x00EC, r22
    1b60:	40 83       	st	Z, r20
    1b62:	80 91 ee 00 	lds	r24, 0x00EE
    1b66:	88 1f       	adc	r24, r24
    1b68:	88 27       	eor	r24, r24
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	08 95       	ret

00001b6e <Endpoint_ConfigureEndpointTable>:
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	06 2f       	mov	r16, r22
    1b78:	ec 01       	movw	r28, r24
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	10 17       	cp	r17, r16
    1b7e:	71 f1       	breq	.+92     	; 0x1bdc <Endpoint_ConfigureEndpointTable+0x6e>
    1b80:	68 81       	ld	r22, Y
    1b82:	61 11       	cpse	r22, r1
    1b84:	03 c0       	rjmp	.+6      	; 0x1b8c <Endpoint_ConfigureEndpointTable+0x1e>
    1b86:	1f 5f       	subi	r17, 0xFF	; 255
    1b88:	25 96       	adiw	r28, 0x05	; 5
    1b8a:	f8 cf       	rjmp	.-16     	; 0x1b7c <Endpoint_ConfigureEndpointTable+0xe>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	a9 81       	ldd	r26, Y+1	; 0x01
    1b90:	ba 81       	ldd	r27, Y+2	; 0x02
    1b92:	9b 81       	ldd	r25, Y+3	; 0x03
    1b94:	86 2f       	mov	r24, r22
    1b96:	8f 70       	andi	r24, 0x0F	; 15
    1b98:	87 30       	cpi	r24, 0x07	; 7
    1b9a:	10 f0       	brcs	.+4      	; 0x1ba0 <Endpoint_ConfigureEndpointTable+0x32>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	1f c0       	rjmp	.+62     	; 0x1bde <Endpoint_ConfigureEndpointTable+0x70>
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	10 f4       	brcc	.+4      	; 0x1ba8 <Endpoint_ConfigureEndpointTable+0x3a>
    1ba4:	42 e0       	ldi	r20, 0x02	; 2
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <Endpoint_ConfigureEndpointTable+0x3c>
    1ba8:	46 e0       	ldi	r20, 0x06	; 6
    1baa:	e8 e0       	ldi	r30, 0x08	; 8
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	ea 17       	cp	r30, r26
    1bb2:	fb 07       	cpc	r31, r27
    1bb4:	20 f4       	brcc	.+8      	; 0x1bbe <Endpoint_ConfigureEndpointTable+0x50>
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	f9 cf       	rjmp	.-14     	; 0x1bb0 <Endpoint_ConfigureEndpointTable+0x42>
    1bbe:	22 95       	swap	r18
    1bc0:	20 7f       	andi	r18, 0xF0	; 240
    1bc2:	42 2b       	or	r20, r18
    1bc4:	50 e4       	ldi	r21, 0x40	; 64
    1bc6:	95 9f       	mul	r25, r21
    1bc8:	90 01       	movw	r18, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	66 1f       	adc	r22, r22
    1bce:	66 27       	eor	r22, r22
    1bd0:	66 1f       	adc	r22, r22
    1bd2:	62 2b       	or	r22, r18
    1bd4:	b8 df       	rcall	.-144    	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	d6 cf       	rjmp	.-84     	; 0x1b86 <Endpoint_ConfigureEndpointTable+0x18>
    1bda:	e0 cf       	rjmp	.-64     	; 0x1b9c <Endpoint_ConfigureEndpointTable+0x2e>
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1be8:	80 91 9a 03 	lds	r24, 0x039A
    1bec:	87 ff       	sbrs	r24, 7
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bf0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1bf4:	82 fd       	sbrc	r24, 2
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bf8:	8e b3       	in	r24, 0x1e	; 30
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	f9 cf       	rjmp	.-14     	; 0x1bf0 <Endpoint_ClearStatusStage+0x8>
    1bfe:	10 c0       	rjmp	.+32     	; 0x1c20 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c00:	80 91 e8 00 	lds	r24, 0x00E8
    1c04:	8b 77       	andi	r24, 0x7B	; 123
    1c06:	0a c0       	rjmp	.+20     	; 0x1c1c <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c08:	8e b3       	in	r24, 0x1e	; 30
    1c0a:	88 23       	and	r24, r24
    1c0c:	49 f0       	breq	.+18     	; 0x1c20 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c0e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c12:	80 ff       	sbrs	r24, 0
    1c14:	f9 cf       	rjmp	.-14     	; 0x1c08 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c16:	80 91 e8 00 	lds	r24, 0x00E8
    1c1a:	8e 77       	andi	r24, 0x7E	; 126
    1c1c:	80 93 e8 00 	sts	0x00E8, r24
    1c20:	08 95       	ret

00001c22 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c22:	20 91 e4 00 	lds	r18, 0x00E4
    1c26:	30 91 e5 00 	lds	r19, 0x00E5
    1c2a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c2c:	40 91 ec 00 	lds	r20, 0x00EC
    1c30:	84 2f       	mov	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	40 ff       	sbrs	r20, 0
    1c36:	22 c0       	rjmp	.+68     	; 0x1c7c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c38:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c3c:	80 fd       	sbrc	r24, 0
    1c3e:	1c c0       	rjmp	.+56     	; 0x1c78 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c40:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c42:	88 23       	and	r24, r24
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c46:	85 30       	cpi	r24, 0x05	; 5
    1c48:	99 f0       	breq	.+38     	; 0x1c70 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c4a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c4e:	85 fd       	sbrc	r24, 5
    1c50:	11 c0       	rjmp	.+34     	; 0x1c74 <Endpoint_WaitUntilReady+0x52>
    1c52:	40 91 e4 00 	lds	r20, 0x00E4
    1c56:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c5a:	24 17       	cp	r18, r20
    1c5c:	35 07       	cpc	r19, r21
    1c5e:	31 f3       	breq	.-52     	; 0x1c2c <Endpoint_WaitUntilReady+0xa>
    1c60:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <Endpoint_WaitUntilReady+0x46>
    1c64:	9a 01       	movw	r18, r20
    1c66:	e2 cf       	rjmp	.-60     	; 0x1c2c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c7c:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c80:	42 ff       	sbrs	r20, 2
    1c82:	de cf       	rjmp	.-68     	; 0x1c40 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c84:	08 95       	ret

00001c86 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c8e:	4a d0       	rcall	.+148    	; 0x1d24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c90:	51 d0       	rcall	.+162    	; 0x1d34 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c92:	c8 ed       	ldi	r28, 0xD8	; 216
    1c94:	d0 e0       	ldi	r29, 0x00	; 0
    1c96:	88 81       	ld	r24, Y
    1c98:	8f 77       	andi	r24, 0x7F	; 127
    1c9a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c9c:	88 81       	ld	r24, Y
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ca2:	88 81       	ld	r24, Y
    1ca4:	8f 7d       	andi	r24, 0xDF	; 223
    1ca6:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ca8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1caa:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    1cac:	10 92 96 03 	sts	0x0396, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1cb0:	10 92 98 03 	sts	0x0398, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1cb4:	10 92 97 03 	sts	0x0397, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1cb8:	00 ee       	ldi	r16, 0xE0	; 224
    1cba:	10 e0       	ldi	r17, 0x00	; 0
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8b 7f       	andi	r24, 0xFB	; 251
    1cc2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1cc4:	88 81       	ld	r24, Y
    1cc6:	81 60       	ori	r24, 0x01	; 1
    1cc8:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cca:	42 e0       	ldi	r20, 0x02	; 2
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	3a df       	rcall	.-396    	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cd2:	e1 ee       	ldi	r30, 0xE1	; 225
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8e 7f       	andi	r24, 0xFE	; 254
    1cda:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cdc:	e2 ee       	ldi	r30, 0xE2	; 226
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 60       	ori	r24, 0x08	; 8
    1cea:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1cec:	f8 01       	movw	r30, r16
    1cee:	80 81       	ld	r24, Z
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cf4:	88 81       	ld	r24, Y
    1cf6:	80 61       	ori	r24, 0x10	; 16
    1cf8:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d04:	e8 ed       	ldi	r30, 0xD8	; 216
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 7e       	andi	r24, 0xEF	; 239
    1d0c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d0e:	e7 ed       	ldi	r30, 0xD7	; 215
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	81 60       	ori	r24, 0x01	; 1
    1d16:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d18:	84 e0       	ldi	r24, 0x04	; 4
    1d1a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 99 03 	sts	0x0399, r24

	USB_ResetInterface();
    1d22:	b1 cf       	rjmp	.-158    	; 0x1c86 <USB_ResetInterface>

00001d24 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d24:	e8 ed       	ldi	r30, 0xD8	; 216
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8e 7f       	andi	r24, 0xFE	; 254
    1d2c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d2e:	10 92 e2 00 	sts	0x00E2, r1
    1d32:	08 95       	ret

00001d34 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d34:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d38:	10 92 e1 00 	sts	0x00E1, r1
    1d3c:	08 95       	ret

00001d3e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d60:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d64:	82 ff       	sbrs	r24, 2
    1d66:	0a c0       	rjmp	.+20     	; 0x1d7c <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d68:	80 91 e2 00 	lds	r24, 0x00E2
    1d6c:	82 ff       	sbrs	r24, 2
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d70:	80 91 e1 00 	lds	r24, 0x00E1
    1d74:	8b 7f       	andi	r24, 0xFB	; 251
    1d76:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d7a:	49 d2       	rcall	.+1170   	; 0x220e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d7c:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d80:	80 ff       	sbrs	r24, 0
    1d82:	1b c0       	rjmp	.+54     	; 0x1dba <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d84:	80 91 d8 00 	lds	r24, 0x00D8
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	17 c0       	rjmp	.+46     	; 0x1dba <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d8c:	80 91 da 00 	lds	r24, 0x00DA
    1d90:	8e 7f       	andi	r24, 0xFE	; 254
    1d92:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d96:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d9a:	80 ff       	sbrs	r24, 0
    1d9c:	0b c0       	rjmp	.+22     	; 0x1db4 <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d9e:	80 e1       	ldi	r24, 0x10	; 16
    1da0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1da2:	82 e1       	ldi	r24, 0x12	; 18
    1da4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1da6:	09 b4       	in	r0, 0x29	; 41
    1da8:	00 fe       	sbrs	r0, 0
    1daa:	fd cf       	rjmp	.-6      	; 0x1da6 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1db0:	10 da       	rcall	.-3040   	; 0x11d2 <EVENT_USB_Device_Connect>
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <__vector_10+0x7c>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1db4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1db6:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1db8:	0e da       	rcall	.-3044   	; 0x11d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1dba:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1dbe:	80 ff       	sbrs	r24, 0
    1dc0:	17 c0       	rjmp	.+46     	; 0x1df0 <__vector_10+0xb2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1dc2:	80 91 e2 00 	lds	r24, 0x00E2
    1dc6:	80 ff       	sbrs	r24, 0
    1dc8:	13 c0       	rjmp	.+38     	; 0x1df0 <__vector_10+0xb2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dca:	80 91 e2 00 	lds	r24, 0x00E2
    1dce:	8e 7f       	andi	r24, 0xFE	; 254
    1dd0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1dd4:	80 91 e2 00 	lds	r24, 0x00E2
    1dd8:	80 61       	ori	r24, 0x10	; 16
    1dda:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1dde:	80 91 d8 00 	lds	r24, 0x00D8
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1de8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1dee:	0f d2       	rcall	.+1054   	; 0x220e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1df0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1df4:	84 ff       	sbrs	r24, 4
    1df6:	2e c0       	rjmp	.+92     	; 0x1e54 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1df8:	80 91 e2 00 	lds	r24, 0x00E2
    1dfc:	84 ff       	sbrs	r24, 4
    1dfe:	2a c0       	rjmp	.+84     	; 0x1e54 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e00:	80 e1       	ldi	r24, 0x10	; 16
    1e02:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e04:	82 e1       	ldi	r24, 0x12	; 18
    1e06:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e08:	09 b4       	in	r0, 0x29	; 41
    1e0a:	00 fe       	sbrs	r0, 0
    1e0c:	fd cf       	rjmp	.-6      	; 0x1e08 <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e0e:	80 91 d8 00 	lds	r24, 0x00D8
    1e12:	8f 7d       	andi	r24, 0xDF	; 223
    1e14:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e18:	80 91 e1 00 	lds	r24, 0x00E1
    1e1c:	8f 7e       	andi	r24, 0xEF	; 239
    1e1e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e22:	80 91 e2 00 	lds	r24, 0x00E2
    1e26:	8f 7e       	andi	r24, 0xEF	; 239
    1e28:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e2c:	80 91 e2 00 	lds	r24, 0x00E2
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e36:	80 91 96 03 	lds	r24, 0x0396
    1e3a:	88 23       	and	r24, r24
    1e3c:	11 f0       	breq	.+4      	; 0x1e42 <__vector_10+0x104>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e3e:	84 e0       	ldi	r24, 0x04	; 4
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e42:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e46:	87 fd       	sbrc	r24, 7
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <__vector_10+0x110>
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <__vector_10+0x112>
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e52:	dd d1       	rcall	.+954    	; 0x220e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e54:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e58:	83 ff       	sbrs	r24, 3
    1e5a:	26 c0       	rjmp	.+76     	; 0x1ea8 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e5c:	80 91 e2 00 	lds	r24, 0x00E2
    1e60:	83 ff       	sbrs	r24, 3
    1e62:	22 c0       	rjmp	.+68     	; 0x1ea8 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e64:	80 91 e1 00 	lds	r24, 0x00E1
    1e68:	87 7f       	andi	r24, 0xF7	; 247
    1e6a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1e72:	10 92 96 03 	sts	0x0396, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e76:	80 91 e1 00 	lds	r24, 0x00E1
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e80:	80 91 e2 00 	lds	r24, 0x00E2
    1e84:	8e 7f       	andi	r24, 0xFE	; 254
    1e86:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e8a:	80 91 e2 00 	lds	r24, 0x00E2
    1e8e:	80 61       	ori	r24, 0x10	; 16
    1e90:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e94:	42 e0       	ldi	r20, 0x02	; 2
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	55 de       	rcall	.-854    	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e9c:	80 91 f0 00 	lds	r24, 0x00F0
    1ea0:	88 60       	ori	r24, 0x08	; 8
    1ea2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ea6:	b3 d1       	rcall	.+870    	; 0x220e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	7f 91       	pop	r23
    1eb6:	6f 91       	pop	r22
    1eb8:	5f 91       	pop	r21
    1eba:	4f 91       	pop	r20
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0f 90       	pop	r0
    1ec6:	1f 90       	pop	r1
    1ec8:	18 95       	reti

00001eca <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1eca:	1f 92       	push	r1
    1ecc:	0f 92       	push	r0
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	0f 92       	push	r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	ef 93       	push	r30
    1eee:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ef0:	c0 91 e9 00 	lds	r28, 0x00E9
    1ef4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ef6:	80 91 ec 00 	lds	r24, 0x00EC
    1efa:	d8 2f       	mov	r29, r24
    1efc:	d1 70       	andi	r29, 0x01	; 1
    1efe:	80 fd       	sbrc	r24, 0
    1f00:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f02:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f06:	80 91 f0 00 	lds	r24, 0x00F0
    1f0a:	87 7f       	andi	r24, 0xF7	; 247
    1f0c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f10:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f12:	1e d0       	rcall	.+60     	; 0x1f50 <USB_Device_ProcessControlRequest>
    1f14:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f18:	80 91 f0 00 	lds	r24, 0x00F0
    1f1c:	88 60       	ori	r24, 0x08	; 8
    1f1e:	80 93 f0 00 	sts	0x00F0, r24
    1f22:	cd 2b       	or	r28, r29
    1f24:	cf 70       	andi	r28, 0x0F	; 15
    1f26:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	0f 90       	pop	r0
    1f4c:	1f 90       	pop	r1
    1f4e:	18 95       	reti

00001f50 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	aa 97       	sbiw	r28, 0x2a	; 42
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	ea e9       	ldi	r30, 0x9A	; 154
    1f68:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f6a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1f6e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1f70:	23 e0       	ldi	r18, 0x03	; 3
    1f72:	e2 3a       	cpi	r30, 0xA2	; 162
    1f74:	f2 07       	cpc	r31, r18
    1f76:	c9 f7       	brne	.-14     	; 0x1f6a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1f78:	40 d9       	rcall	.-3456   	; 0x11fa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f7a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1f7e:	83 ff       	sbrs	r24, 3
    1f80:	2e c1       	rjmp	.+604    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1f82:	80 91 9a 03 	lds	r24, 0x039A

		switch (USB_ControlRequest.bRequest)
    1f86:	90 91 9b 03 	lds	r25, 0x039B
    1f8a:	95 30       	cpi	r25, 0x05	; 5
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <USB_Device_ProcessControlRequest+0x40>
    1f8e:	83 c0       	rjmp	.+262    	; 0x2096 <USB_Device_ProcessControlRequest+0x146>
    1f90:	30 f4       	brcc	.+12     	; 0x1f9e <USB_Device_ProcessControlRequest+0x4e>
    1f92:	91 30       	cpi	r25, 0x01	; 1
    1f94:	a9 f1       	breq	.+106    	; 0x2000 <USB_Device_ProcessControlRequest+0xb0>
    1f96:	68 f0       	brcs	.+26     	; 0x1fb2 <USB_Device_ProcessControlRequest+0x62>
    1f98:	93 30       	cpi	r25, 0x03	; 3
    1f9a:	91 f1       	breq	.+100    	; 0x2000 <USB_Device_ProcessControlRequest+0xb0>
    1f9c:	20 c1       	rjmp	.+576    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
    1f9e:	98 30       	cpi	r25, 0x08	; 8
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <USB_Device_ProcessControlRequest+0x54>
    1fa2:	ee c0       	rjmp	.+476    	; 0x2180 <USB_Device_ProcessControlRequest+0x230>
    1fa4:	99 30       	cpi	r25, 0x09	; 9
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <USB_Device_ProcessControlRequest+0x5a>
    1fa8:	fa c0       	rjmp	.+500    	; 0x219e <USB_Device_ProcessControlRequest+0x24e>
    1faa:	96 30       	cpi	r25, 0x06	; 6
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <USB_Device_ProcessControlRequest+0x60>
    1fae:	17 c1       	rjmp	.+558    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
    1fb0:	93 c0       	rjmp	.+294    	; 0x20d8 <USB_Device_ProcessControlRequest+0x188>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fb2:	80 38       	cpi	r24, 0x80	; 128
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <USB_Device_ProcessControlRequest+0x6e>
    1fb6:	82 38       	cpi	r24, 0x82	; 130
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0x6c>
    1fba:	11 c1       	rjmp	.+546    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1fbe:	80 91 97 03 	lds	r24, 0x0397
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1fc2:	90 91 98 03 	lds	r25, 0x0398
    1fc6:	99 23       	and	r25, r25
    1fc8:	89 f0       	breq	.+34     	; 0x1fec <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1fca:	82 60       	ori	r24, 0x02	; 2
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1fce:	80 91 9e 03 	lds	r24, 0x039E
    1fd2:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1fd4:	87 30       	cpi	r24, 0x07	; 7
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <USB_Device_ProcessControlRequest+0x8a>
    1fd8:	02 c1       	rjmp	.+516    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fda:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fde:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1fe2:	85 fb       	bst	r24, 5
    1fe4:	88 27       	eor	r24, r24
    1fe6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fec:	90 91 e8 00 	lds	r25, 0x00E8
    1ff0:	97 7f       	andi	r25, 0xF7	; 247
    1ff2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ff6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1ffa:	10 92 f1 00 	sts	0x00F1, r1
    1ffe:	cb c0       	rjmp	.+406    	; 0x2196 <USB_Device_ProcessControlRequest+0x246>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2000:	28 2f       	mov	r18, r24
    2002:	2d 7f       	andi	r18, 0xFD	; 253
    2004:	09 f0       	breq	.+2      	; 0x2008 <USB_Device_ProcessControlRequest+0xb8>
    2006:	eb c0       	rjmp	.+470    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2008:	88 23       	and	r24, r24
    200a:	19 f0       	breq	.+6      	; 0x2012 <USB_Device_ProcessControlRequest+0xc2>
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	61 f0       	breq	.+24     	; 0x2028 <USB_Device_ProcessControlRequest+0xd8>
    2010:	e6 c0       	rjmp	.+460    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2012:	80 91 9c 03 	lds	r24, 0x039C
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	09 f0       	breq	.+2      	; 0x201c <USB_Device_ProcessControlRequest+0xcc>
    201a:	e1 c0       	rjmp	.+450    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    201c:	93 30       	cpi	r25, 0x03	; 3
    201e:	09 f0       	breq	.+2      	; 0x2022 <USB_Device_ProcessControlRequest+0xd2>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	80 93 98 03 	sts	0x0398, r24
    2026:	2e c0       	rjmp	.+92     	; 0x2084 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2028:	80 91 9c 03 	lds	r24, 0x039C
    202c:	81 11       	cpse	r24, r1
    202e:	2a c0       	rjmp	.+84     	; 0x2084 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2030:	80 91 9e 03 	lds	r24, 0x039E
    2034:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	28 0f       	add	r18, r24
    203a:	26 30       	cpi	r18, 0x06	; 6
    203c:	08 f0       	brcs	.+2      	; 0x2040 <USB_Device_ProcessControlRequest+0xf0>
    203e:	cf c0       	rjmp	.+414    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2040:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2044:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2048:	20 ff       	sbrs	r18, 0
    204a:	1c c0       	rjmp	.+56     	; 0x2084 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    204c:	93 30       	cpi	r25, 0x03	; 3
    204e:	21 f4       	brne	.+8      	; 0x2058 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2050:	80 91 eb 00 	lds	r24, 0x00EB
    2054:	80 62       	ori	r24, 0x20	; 32
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2058:	90 91 eb 00 	lds	r25, 0x00EB
    205c:	90 61       	ori	r25, 0x10	; 16
    205e:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	a9 01       	movw	r20, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <USB_Device_ProcessControlRequest+0x11e>
    206a:	44 0f       	add	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	8a 95       	dec	r24
    2070:	e2 f7       	brpl	.-8      	; 0x206a <USB_Device_ProcessControlRequest+0x11a>
    2072:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    2076:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    207a:	80 91 eb 00 	lds	r24, 0x00EB
    207e:	88 60       	ori	r24, 0x08	; 8
    2080:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2084:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2088:	80 91 e8 00 	lds	r24, 0x00E8
    208c:	87 7f       	andi	r24, 0xF7	; 247
    208e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2092:	aa dd       	rcall	.-1196   	; 0x1be8 <Endpoint_ClearStatusStage>
    2094:	a4 c0       	rjmp	.+328    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2096:	81 11       	cpse	r24, r1
    2098:	a2 c0       	rjmp	.+324    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    209a:	10 91 9c 03 	lds	r17, 0x039C
    209e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    20a0:	80 91 e3 00 	lds	r24, 0x00E3
    20a4:	80 78       	andi	r24, 0x80	; 128
    20a6:	81 2b       	or	r24, r17
    20a8:	80 93 e3 00 	sts	0x00E3, r24
    20ac:	80 91 e8 00 	lds	r24, 0x00E8
    20b0:	87 7f       	andi	r24, 0xF7	; 247
    20b2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20b6:	98 dd       	rcall	.-1232   	; 0x1be8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20b8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    20bc:	80 ff       	sbrs	r24, 0
    20be:	fc cf       	rjmp	.-8      	; 0x20b8 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    20c0:	80 91 e3 00 	lds	r24, 0x00E3
    20c4:	80 68       	ori	r24, 0x80	; 128
    20c6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    20ca:	11 11       	cpse	r17, r1
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <USB_Device_ProcessControlRequest+0x182>
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <USB_Device_ProcessControlRequest+0x184>
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	8e bb       	out	0x1e, r24	; 30
    20d6:	83 c0       	rjmp	.+262    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20d8:	80 58       	subi	r24, 0x80	; 128
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	08 f0       	brcs	.+2      	; 0x20e0 <USB_Device_ProcessControlRequest+0x190>
    20de:	7f c0       	rjmp	.+254    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    20e0:	80 91 9c 03 	lds	r24, 0x039C
    20e4:	90 91 9d 03 	lds	r25, 0x039D
    20e8:	8c 3d       	cpi	r24, 0xDC	; 220
    20ea:	53 e0       	ldi	r21, 0x03	; 3
    20ec:	95 07       	cpc	r25, r21
    20ee:	71 f5       	brne	.+92     	; 0x214c <USB_Device_ProcessControlRequest+0x1fc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    20f4:	8a e2       	ldi	r24, 0x2A	; 42
    20f6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    20f8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    20fa:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    20fc:	de 01       	movw	r26, r28
    20fe:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2100:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2102:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2104:	51 e2       	ldi	r21, 0x21	; 33
    2106:	e3 2f       	mov	r30, r19
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	50 93 57 00 	sts	0x0057, r21
    210e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2110:	20 ff       	sbrs	r18, 0
    2112:	03 c0       	rjmp	.+6      	; 0x211a <USB_Device_ProcessControlRequest+0x1ca>
					{
						SerialByte >>= 4;
    2114:	e2 95       	swap	r30
    2116:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2118:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    211a:	ef 70       	andi	r30, 0x0F	; 15
    211c:	8e 2f       	mov	r24, r30
    211e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2120:	ea 30       	cpi	r30, 0x0A	; 10
    2122:	10 f0       	brcs	.+4      	; 0x2128 <USB_Device_ProcessControlRequest+0x1d8>
    2124:	c7 96       	adiw	r24, 0x37	; 55
    2126:	01 c0       	rjmp	.+2      	; 0x212a <USB_Device_ProcessControlRequest+0x1da>
    2128:	c0 96       	adiw	r24, 0x30	; 48
    212a:	8d 93       	st	X+, r24
    212c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	24 31       	cpi	r18, 0x14	; 20
    2132:	49 f7       	brne	.-46     	; 0x2106 <USB_Device_ProcessControlRequest+0x1b6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2134:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2136:	80 91 e8 00 	lds	r24, 0x00E8
    213a:	87 7f       	andi	r24, 0xF7	; 247
    213c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2140:	6a e2       	ldi	r22, 0x2A	; 42
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	ce 01       	movw	r24, r28
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	43 dc       	rcall	.-1914   	; 0x19d0 <Endpoint_Write_Control_Stream_LE>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <USB_Device_ProcessControlRequest+0x224>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    214c:	60 91 9e 03 	lds	r22, 0x039E
    2150:	70 91 9f 03 	lds	r23, 0x039F
    2154:	ae 01       	movw	r20, r28
    2156:	4f 5f       	subi	r20, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	63 d8       	rcall	.-3898   	; 0x1222 <CALLBACK_USB_GetDescriptor>
    215c:	bc 01       	movw	r22, r24
    215e:	89 2b       	or	r24, r25
    2160:	09 f4       	brne	.+2      	; 0x2164 <USB_Device_ProcessControlRequest+0x214>
    2162:	3d c0       	rjmp	.+122    	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
    2164:	90 91 e8 00 	lds	r25, 0x00E8
    2168:	97 7f       	andi	r25, 0xF7	; 247
    216a:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	8a dc       	rcall	.-1772   	; 0x1a88 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2174:	80 91 e8 00 	lds	r24, 0x00E8
    2178:	8b 77       	andi	r24, 0x7B	; 123
    217a:	80 93 e8 00 	sts	0x00E8, r24
    217e:	2f c0       	rjmp	.+94     	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2180:	80 38       	cpi	r24, 0x80	; 128
    2182:	69 f5       	brne	.+90     	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2184:	80 91 e8 00 	lds	r24, 0x00E8
    2188:	87 7f       	andi	r24, 0xF7	; 247
    218a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    218e:	80 91 96 03 	lds	r24, 0x0396
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2192:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2196:	80 91 e8 00 	lds	r24, 0x00E8
    219a:	8e 77       	andi	r24, 0x7E	; 126
    219c:	78 cf       	rjmp	.-272    	; 0x208e <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    219e:	81 11       	cpse	r24, r1
    21a0:	1e c0       	rjmp	.+60     	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21a2:	80 91 9c 03 	lds	r24, 0x039C
    21a6:	90 91 9d 03 	lds	r25, 0x039D
    21aa:	99 27       	eor	r25, r25
    21ac:	02 97       	sbiw	r24, 0x02	; 2
    21ae:	bc f4       	brge	.+46     	; 0x21de <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21b0:	80 91 e8 00 	lds	r24, 0x00E8
    21b4:	87 7f       	andi	r24, 0xF7	; 247
    21b6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21ba:	80 91 9c 03 	lds	r24, 0x039C
    21be:	80 93 96 03 	sts	0x0396, r24

	Endpoint_ClearStatusStage();
    21c2:	12 dd       	rcall	.-1500   	; 0x1be8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    21c4:	80 91 96 03 	lds	r24, 0x0396
    21c8:	81 11       	cpse	r24, r1
    21ca:	06 c0       	rjmp	.+12     	; 0x21d8 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21cc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    21d0:	87 fd       	sbrc	r24, 7
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <USB_Device_ProcessControlRequest+0x288>
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <USB_Device_ProcessControlRequest+0x28a>
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    21dc:	04 d8       	rcall	.-4088   	; 0x11e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21de:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    21e2:	83 ff       	sbrs	r24, 3
    21e4:	0a c0       	rjmp	.+20     	; 0x21fa <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21e6:	80 91 e8 00 	lds	r24, 0x00E8
    21ea:	87 7f       	andi	r24, 0xF7	; 247
    21ec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21f0:	80 91 eb 00 	lds	r24, 0x00EB
    21f4:	80 62       	ori	r24, 0x20	; 32
    21f6:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    21fa:	aa 96       	adiw	r28, 0x2a	; 42
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	08 95       	ret

0000220e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    220e:	08 95       	ret

00002210 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2210:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2212:	8e b3       	in	r24, 0x1e	; 30
    2214:	88 23       	and	r24, r24
    2216:	99 f0       	breq	.+38     	; 0x223e <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2218:	c0 91 e9 00 	lds	r28, 0x00E9
    221c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    221e:	90 91 ec 00 	lds	r25, 0x00EC
    2222:	89 2f       	mov	r24, r25
    2224:	81 70       	andi	r24, 0x01	; 1
    2226:	90 fd       	sbrc	r25, 0
    2228:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    222a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    222c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2230:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2234:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2236:	8c de       	rcall	.-744    	; 0x1f50 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2238:	cf 70       	andi	r28, 0x0F	; 15
    223a:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <CDC_Device_ConfigureEndpoints>:

	void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
	                                     FILE* const Stream)
	{
		*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
		fdev_set_udata(Stream, CDCInterfaceInfo);
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	ec 01       	movw	r28, r24
    2248:	fc 01       	movw	r30, r24
    224a:	70 96       	adiw	r30, 0x10	; 16
    224c:	8b e0       	ldi	r24, 0x0B	; 11
    224e:	df 01       	movw	r26, r30
    2250:	1d 92       	st	X+, r1
    2252:	8a 95       	dec	r24
    2254:	e9 f7       	brne	.-6      	; 0x2250 <CDC_Device_ConfigureEndpoints+0xe>
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	8c 83       	std	Y+4, r24	; 0x04
    225a:	89 87       	std	Y+9, r24	; 0x09
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	8e 87       	std	Y+14, r24	; 0x0e
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	ce 01       	movw	r24, r28
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	83 dc       	rcall	.-1786   	; 0x1b6e <Endpoint_ConfigureEndpointTable>
    2268:	88 23       	and	r24, r24
    226a:	61 f0       	breq	.+24     	; 0x2284 <CDC_Device_ConfigureEndpoints+0x42>
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	ce 01       	movw	r24, r28
    2270:	06 96       	adiw	r24, 0x06	; 6
    2272:	7d dc       	rcall	.-1798   	; 0x1b6e <Endpoint_ConfigureEndpointTable>
    2274:	88 23       	and	r24, r24
    2276:	31 f0       	breq	.+12     	; 0x2284 <CDC_Device_ConfigureEndpoints+0x42>
    2278:	61 e0       	ldi	r22, 0x01	; 1
    227a:	ce 01       	movw	r24, r28
    227c:	0b 96       	adiw	r24, 0x0b	; 11
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	75 cc       	rjmp	.-1814   	; 0x1b6e <Endpoint_ConfigureEndpointTable>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <CDC_Device_SendString_P>:
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	2e b3       	in	r18, 0x1e	; 30
    2296:	24 30       	cpi	r18, 0x04	; 4
    2298:	c9 f4       	brne	.+50     	; 0x22cc <CDC_Device_SendString_P+0x40>
    229a:	fc 01       	movw	r30, r24
    229c:	04 89       	ldd	r16, Z+20	; 0x14
    229e:	15 89       	ldd	r17, Z+21	; 0x15
    22a0:	26 89       	ldd	r18, Z+22	; 0x16
    22a2:	37 89       	ldd	r19, Z+23	; 0x17
    22a4:	01 2b       	or	r16, r17
    22a6:	02 2b       	or	r16, r18
    22a8:	03 2b       	or	r16, r19
    22aa:	81 f0       	breq	.+32     	; 0x22cc <CDC_Device_SendString_P+0x40>
    22ac:	eb 01       	movw	r28, r22
    22ae:	81 81       	ldd	r24, Z+1	; 0x01
    22b0:	8f 70       	andi	r24, 0x0F	; 15
    22b2:	80 93 e9 00 	sts	0x00E9, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	5f d6       	rcall	.+3262   	; 0x2f78 <__strlen_P>
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	bc 01       	movw	r22, r24
    22c0:	ce 01       	movw	r24, r28
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	37 cb       	rjmp	.-2450   	; 0x193a <Endpoint_Write_PStream_LE>
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <CDC_Device_SendByte>:
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	2e b3       	in	r18, 0x1e	; 30
    22e0:	24 30       	cpi	r18, 0x04	; 4
    22e2:	f9 f4       	brne	.+62     	; 0x2322 <CDC_Device_SendByte+0x4a>
    22e4:	fc 01       	movw	r30, r24
    22e6:	04 89       	ldd	r16, Z+20	; 0x14
    22e8:	15 89       	ldd	r17, Z+21	; 0x15
    22ea:	26 89       	ldd	r18, Z+22	; 0x16
    22ec:	37 89       	ldd	r19, Z+23	; 0x17
    22ee:	01 2b       	or	r16, r17
    22f0:	02 2b       	or	r16, r18
    22f2:	03 2b       	or	r16, r19
    22f4:	b1 f0       	breq	.+44     	; 0x2322 <CDC_Device_SendByte+0x4a>
    22f6:	c6 2f       	mov	r28, r22
    22f8:	81 81       	ldd	r24, Z+1	; 0x01
    22fa:	8f 70       	andi	r24, 0x0F	; 15
    22fc:	80 93 e9 00 	sts	0x00E9, r24
    2300:	80 91 e8 00 	lds	r24, 0x00E8
    2304:	85 ff       	sbrs	r24, 5
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <CDC_Device_SendByte+0x38>
    2308:	c0 93 f1 00 	sts	0x00F1, r28
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	0a c0       	rjmp	.+20     	; 0x2324 <CDC_Device_SendByte+0x4c>
    2310:	80 91 e8 00 	lds	r24, 0x00E8
    2314:	8e 77       	andi	r24, 0x7E	; 126
    2316:	80 93 e8 00 	sts	0x00E8, r24
    231a:	83 dc       	rcall	.-1786   	; 0x1c22 <Endpoint_WaitUntilReady>
    231c:	88 23       	and	r24, r24
    231e:	a1 f3       	breq	.-24     	; 0x2308 <CDC_Device_SendByte+0x30>
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <CDC_Device_SendByte+0x4c>
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret

0000232c <CDC_Device_putchar>:
    232c:	cf 93       	push	r28
    232e:	c8 2f       	mov	r28, r24
    2330:	fb 01       	movw	r30, r22
    2332:	68 2f       	mov	r22, r24
    2334:	84 85       	ldd	r24, Z+12	; 0x0c
    2336:	95 85       	ldd	r25, Z+13	; 0x0d
    2338:	cf df       	rcall	.-98     	; 0x22d8 <CDC_Device_SendByte>
    233a:	81 11       	cpse	r24, r1
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <CDC_Device_putchar+0x18>
    233e:	8c 2f       	mov	r24, r28
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <CDC_Device_putchar+0x1c>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	9f ef       	ldi	r25, 0xFF	; 255
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <CDC_Device_Flush>:
    234c:	2e b3       	in	r18, 0x1e	; 30
    234e:	24 30       	cpi	r18, 0x04	; 4
    2350:	41 f5       	brne	.+80     	; 0x23a2 <CDC_Device_Flush+0x56>
    2352:	fc 01       	movw	r30, r24
    2354:	44 89       	ldd	r20, Z+20	; 0x14
    2356:	55 89       	ldd	r21, Z+21	; 0x15
    2358:	66 89       	ldd	r22, Z+22	; 0x16
    235a:	77 89       	ldd	r23, Z+23	; 0x17
    235c:	45 2b       	or	r20, r21
    235e:	46 2b       	or	r20, r22
    2360:	47 2b       	or	r20, r23
    2362:	f9 f0       	breq	.+62     	; 0x23a2 <CDC_Device_Flush+0x56>
    2364:	81 81       	ldd	r24, Z+1	; 0x01
    2366:	8f 70       	andi	r24, 0x0F	; 15
    2368:	80 93 e9 00 	sts	0x00E9, r24
    236c:	20 91 f3 00 	lds	r18, 0x00F3
    2370:	80 91 f2 00 	lds	r24, 0x00F2
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	92 2b       	or	r25, r18
    2378:	89 2b       	or	r24, r25
    237a:	89 f0       	breq	.+34     	; 0x239e <CDC_Device_Flush+0x52>
    237c:	90 91 e8 00 	lds	r25, 0x00E8
    2380:	80 91 e8 00 	lds	r24, 0x00E8
    2384:	8e 77       	andi	r24, 0x7E	; 126
    2386:	80 93 e8 00 	sts	0x00E8, r24
    238a:	95 fd       	sbrc	r25, 5
    238c:	08 c0       	rjmp	.+16     	; 0x239e <CDC_Device_Flush+0x52>
    238e:	49 dc       	rcall	.-1902   	; 0x1c22 <Endpoint_WaitUntilReady>
    2390:	81 11       	cpse	r24, r1
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <CDC_Device_Flush+0x58>
    2394:	80 91 e8 00 	lds	r24, 0x00E8
    2398:	8e 77       	andi	r24, 0x7E	; 126
    239a:	80 93 e8 00 	sts	0x00E8, r24
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	08 95       	ret
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	08 95       	ret

000023a6 <CDC_Device_USBTask>:
    23a6:	2e b3       	in	r18, 0x1e	; 30
    23a8:	24 30       	cpi	r18, 0x04	; 4
    23aa:	89 f4       	brne	.+34     	; 0x23ce <CDC_Device_USBTask+0x28>
    23ac:	fc 01       	movw	r30, r24
    23ae:	44 89       	ldd	r20, Z+20	; 0x14
    23b0:	55 89       	ldd	r21, Z+21	; 0x15
    23b2:	66 89       	ldd	r22, Z+22	; 0x16
    23b4:	77 89       	ldd	r23, Z+23	; 0x17
    23b6:	45 2b       	or	r20, r21
    23b8:	46 2b       	or	r20, r22
    23ba:	47 2b       	or	r20, r23
    23bc:	41 f0       	breq	.+16     	; 0x23ce <CDC_Device_USBTask+0x28>
    23be:	21 81       	ldd	r18, Z+1	; 0x01
    23c0:	2f 70       	andi	r18, 0x0F	; 15
    23c2:	20 93 e9 00 	sts	0x00E9, r18
    23c6:	20 91 e8 00 	lds	r18, 0x00E8
    23ca:	20 fd       	sbrc	r18, 0
    23cc:	bf cf       	rjmp	.-130    	; 0x234c <CDC_Device_Flush>
    23ce:	08 95       	ret

000023d0 <CDC_Device_ReceiveByte>:
    23d0:	2e b3       	in	r18, 0x1e	; 30
    23d2:	24 30       	cpi	r18, 0x04	; 4
    23d4:	19 f0       	breq	.+6      	; 0x23dc <CDC_Device_ReceiveByte+0xc>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	08 95       	ret
    23dc:	fc 01       	movw	r30, r24
    23de:	44 89       	ldd	r20, Z+20	; 0x14
    23e0:	55 89       	ldd	r21, Z+21	; 0x15
    23e2:	66 89       	ldd	r22, Z+22	; 0x16
    23e4:	77 89       	ldd	r23, Z+23	; 0x17
    23e6:	45 2b       	or	r20, r21
    23e8:	46 2b       	or	r20, r22
    23ea:	47 2b       	or	r20, r23
    23ec:	a1 f3       	breq	.-24     	; 0x23d6 <CDC_Device_ReceiveByte+0x6>
    23ee:	86 81       	ldd	r24, Z+6	; 0x06
    23f0:	8f 70       	andi	r24, 0x0F	; 15
    23f2:	80 93 e9 00 	sts	0x00E9, r24
    23f6:	80 91 e8 00 	lds	r24, 0x00E8
    23fa:	82 ff       	sbrs	r24, 2
    23fc:	ec cf       	rjmp	.-40     	; 0x23d6 <CDC_Device_ReceiveByte+0x6>
    23fe:	20 91 f3 00 	lds	r18, 0x00F3
    2402:	80 91 f2 00 	lds	r24, 0x00F2
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	92 2b       	or	r25, r18
    240a:	89 2b       	or	r24, r25
    240c:	21 f0       	breq	.+8      	; 0x2416 <CDC_Device_ReceiveByte+0x46>
    240e:	20 91 f1 00 	lds	r18, 0x00F1
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <CDC_Device_ReceiveByte+0x4a>
    2416:	2f ef       	ldi	r18, 0xFF	; 255
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	40 91 f3 00 	lds	r20, 0x00F3
    241e:	80 91 f2 00 	lds	r24, 0x00F2
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	94 2b       	or	r25, r20
    2426:	89 2b       	or	r24, r25
    2428:	29 f4       	brne	.+10     	; 0x2434 <CDC_Device_ReceiveByte+0x64>
    242a:	80 91 e8 00 	lds	r24, 0x00E8
    242e:	8b 77       	andi	r24, 0x7B	; 123
    2430:	80 93 e8 00 	sts	0x00E8, r24
    2434:	c9 01       	movw	r24, r18
    2436:	08 95       	ret

00002438 <CDC_Device_getchar>:
    2438:	fc 01       	movw	r30, r24
    243a:	84 85       	ldd	r24, Z+12	; 0x0c
    243c:	95 85       	ldd	r25, Z+13	; 0x0d
    243e:	c8 df       	rcall	.-112    	; 0x23d0 <CDC_Device_ReceiveByte>
    2440:	97 ff       	sbrs	r25, 7
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <CDC_Device_getchar+0x10>
    2444:	8e ef       	ldi	r24, 0xFE	; 254
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	08 95       	ret

0000244a <CDC_Device_CreateStream>:
    244a:	fb 01       	movw	r30, r22
    244c:	2e e0       	ldi	r18, 0x0E	; 14
    244e:	db 01       	movw	r26, r22
    2450:	1d 92       	st	X+, r1
    2452:	2a 95       	dec	r18
    2454:	e9 f7       	brne	.-6      	; 0x2450 <CDC_Device_CreateStream+0x6>
    2456:	23 e0       	ldi	r18, 0x03	; 3
    2458:	23 83       	std	Z+3, r18	; 0x03
    245a:	26 e9       	ldi	r18, 0x96	; 150
    245c:	31 e1       	ldi	r19, 0x11	; 17
    245e:	31 87       	std	Z+9, r19	; 0x09
    2460:	20 87       	std	Z+8, r18	; 0x08
    2462:	2c e1       	ldi	r18, 0x1C	; 28
    2464:	32 e1       	ldi	r19, 0x12	; 18
    2466:	33 87       	std	Z+11, r19	; 0x0b
    2468:	22 87       	std	Z+10, r18	; 0x0a
    246a:	95 87       	std	Z+13, r25	; 0x0d
    246c:	84 87       	std	Z+12, r24	; 0x0c
    246e:	08 95       	ret

00002470 <CDC_Device_Event_Stub>:
		return ReceivedByte;
	}
#endif

void CDC_Device_Event_Stub(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2470:	08 95       	ret

00002472 <CDC_Device_Event_Stub_2>:

}

void CDC_Device_Event_Stub_2(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t _1)
{
    2472:	08 95       	ret

00002474 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    247a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    247e:	83 ff       	sbrs	r24, 3
    2480:	a6 c0       	rjmp	.+332    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2482:	88 81       	ld	r24, Y
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	20 91 9e 03 	lds	r18, 0x039E
    248a:	30 91 9f 03 	lds	r19, 0x039F
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	09 f0       	breq	.+2      	; 0x2496 <CDC_Device_ProcessControlRequest+0x22>
    2494:	9c c0       	rjmp	.+312    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    2496:	80 91 9b 03 	lds	r24, 0x039B
    249a:	81 32       	cpi	r24, 0x21	; 33
    249c:	61 f0       	breq	.+24     	; 0x24b6 <CDC_Device_ProcessControlRequest+0x42>
    249e:	20 f4       	brcc	.+8      	; 0x24a8 <CDC_Device_ProcessControlRequest+0x34>
    24a0:	80 32       	cpi	r24, 0x20	; 32
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <CDC_Device_ProcessControlRequest+0x32>
    24a4:	3e c0       	rjmp	.+124    	; 0x2522 <CDC_Device_ProcessControlRequest+0xae>
    24a6:	93 c0       	rjmp	.+294    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
    24a8:	82 32       	cpi	r24, 0x22	; 34
    24aa:	09 f4       	brne	.+2      	; 0x24ae <CDC_Device_ProcessControlRequest+0x3a>
    24ac:	6b c0       	rjmp	.+214    	; 0x2584 <CDC_Device_ProcessControlRequest+0x110>
    24ae:	83 32       	cpi	r24, 0x23	; 35
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <CDC_Device_ProcessControlRequest+0x40>
    24b2:	7d c0       	rjmp	.+250    	; 0x25ae <CDC_Device_ProcessControlRequest+0x13a>
    24b4:	8c c0       	rjmp	.+280    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24b6:	80 91 9a 03 	lds	r24, 0x039A
    24ba:	81 3a       	cpi	r24, 0xA1	; 161
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <CDC_Device_ProcessControlRequest+0x4c>
    24be:	87 c0       	rjmp	.+270    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24c0:	80 91 e8 00 	lds	r24, 0x00E8
    24c4:	87 7f       	andi	r24, 0xF7	; 247
    24c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24ca:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    24ce:	80 ff       	sbrs	r24, 0
    24d0:	fc cf       	rjmp	.-8      	; 0x24ca <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    24d2:	8c 89       	ldd	r24, Y+20	; 0x14
    24d4:	9d 89       	ldd	r25, Y+21	; 0x15
    24d6:	ae 89       	ldd	r26, Y+22	; 0x16
    24d8:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    24da:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    24de:	49 2f       	mov	r20, r25
    24e0:	5a 2f       	mov	r21, r26
    24e2:	6b 2f       	mov	r22, r27
    24e4:	77 27       	eor	r23, r23
    24e6:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
    24ea:	ad 01       	movw	r20, r26
    24ec:	66 27       	eor	r22, r22
    24ee:	77 27       	eor	r23, r23
    24f0:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
    24f4:	8b 2f       	mov	r24, r27
    24f6:	99 27       	eor	r25, r25
    24f8:	aa 27       	eor	r26, r26
    24fa:	bb 27       	eor	r27, r27
    24fc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2500:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2502:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    2506:	89 8d       	ldd	r24, Y+25	; 0x19
    2508:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    250c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    250e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2512:	80 91 e8 00 	lds	r24, 0x00E8
    2516:	8e 77       	andi	r24, 0x7E	; 126
    2518:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2520:	63 cb       	rjmp	.-2362   	; 0x1be8 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2522:	80 91 9a 03 	lds	r24, 0x039A
    2526:	81 32       	cpi	r24, 0x21	; 33
    2528:	09 f0       	breq	.+2      	; 0x252c <CDC_Device_ProcessControlRequest+0xb8>
    252a:	51 c0       	rjmp	.+162    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    252c:	80 91 e8 00 	lds	r24, 0x00E8
    2530:	87 7f       	andi	r24, 0xF7	; 247
    2532:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2536:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    253a:	82 fd       	sbrc	r24, 2
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <CDC_Device_ProcessControlRequest+0xd2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    253e:	8e b3       	in	r24, 0x1e	; 30
    2540:	81 11       	cpse	r24, r1
    2542:	f9 cf       	rjmp	.-14     	; 0x2536 <CDC_Device_ProcessControlRequest+0xc2>
    2544:	44 c0       	rjmp	.+136    	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    2546:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    254a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    254e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    2552:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2556:	3c 8b       	std	Y+20, r19	; 0x14
    2558:	2d 8b       	std	Y+21, r18	; 0x15
    255a:	9e 8b       	std	Y+22, r25	; 0x16
    255c:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    255e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2562:	88 8f       	std	Y+24, r24	; 0x18
    2564:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2568:	89 8f       	std	Y+25, r24	; 0x19
    256a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    256e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2570:	80 91 e8 00 	lds	r24, 0x00E8
    2574:	8b 77       	andi	r24, 0x7B	; 123
    2576:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    257a:	36 db       	rcall	.-2452   	; 0x1be8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    257c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2582:	76 cf       	rjmp	.-276    	; 0x2470 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2584:	80 91 9a 03 	lds	r24, 0x039A
    2588:	81 32       	cpi	r24, 0x21	; 33
    258a:	09 f5       	brne	.+66     	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    258c:	80 91 e8 00 	lds	r24, 0x00E8
    2590:	87 7f       	andi	r24, 0xF7	; 247
    2592:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2596:	28 db       	rcall	.-2480   	; 0x1be8 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2598:	80 91 9c 03 	lds	r24, 0x039C
    259c:	90 91 9d 03 	lds	r25, 0x039D
    25a0:	99 8b       	std	Y+17, r25	; 0x11
    25a2:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    25a4:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    25aa:	0c 94 01 09 	jmp	0x1202	; 0x1202 <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25ae:	80 91 9a 03 	lds	r24, 0x039A
    25b2:	81 32       	cpi	r24, 0x21	; 33
    25b4:	61 f4       	brne	.+24     	; 0x25ce <CDC_Device_ProcessControlRequest+0x15a>
    25b6:	80 91 e8 00 	lds	r24, 0x00E8
    25ba:	87 7f       	andi	r24, 0xF7	; 247
    25bc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    25c0:	13 db       	rcall	.-2522   	; 0x1be8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    25c2:	60 91 9c 03 	lds	r22, 0x039C
    25c6:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    25cc:	52 cf       	rjmp	.-348    	; 0x2472 <CDC_Device_Event_Stub_2>
			}

			break;
	}
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <__subsf3>:
    25d4:	50 58       	subi	r21, 0x80	; 128

000025d6 <__addsf3>:
    25d6:	bb 27       	eor	r27, r27
    25d8:	aa 27       	eor	r26, r26
    25da:	0e d0       	rcall	.+28     	; 0x25f8 <__addsf3x>
    25dc:	4d c1       	rjmp	.+666    	; 0x2878 <__fp_round>
    25de:	3e d1       	rcall	.+636    	; 0x285c <__fp_pscA>
    25e0:	30 f0       	brcs	.+12     	; 0x25ee <__addsf3+0x18>
    25e2:	43 d1       	rcall	.+646    	; 0x286a <__fp_pscB>
    25e4:	20 f0       	brcs	.+8      	; 0x25ee <__addsf3+0x18>
    25e6:	31 f4       	brne	.+12     	; 0x25f4 <__addsf3+0x1e>
    25e8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ea:	11 f4       	brne	.+4      	; 0x25f0 <__addsf3+0x1a>
    25ec:	1e f4       	brtc	.+6      	; 0x25f4 <__addsf3+0x1e>
    25ee:	33 c1       	rjmp	.+614    	; 0x2856 <__fp_nan>
    25f0:	0e f4       	brtc	.+2      	; 0x25f4 <__addsf3+0x1e>
    25f2:	e0 95       	com	r30
    25f4:	e7 fb       	bst	r30, 7
    25f6:	29 c1       	rjmp	.+594    	; 0x284a <__fp_inf>

000025f8 <__addsf3x>:
    25f8:	e9 2f       	mov	r30, r25
    25fa:	4f d1       	rcall	.+670    	; 0x289a <__fp_split3>
    25fc:	80 f3       	brcs	.-32     	; 0x25de <__addsf3+0x8>
    25fe:	ba 17       	cp	r27, r26
    2600:	62 07       	cpc	r22, r18
    2602:	73 07       	cpc	r23, r19
    2604:	84 07       	cpc	r24, r20
    2606:	95 07       	cpc	r25, r21
    2608:	18 f0       	brcs	.+6      	; 0x2610 <__addsf3x+0x18>
    260a:	71 f4       	brne	.+28     	; 0x2628 <__addsf3x+0x30>
    260c:	9e f5       	brtc	.+102    	; 0x2674 <__addsf3x+0x7c>
    260e:	67 c1       	rjmp	.+718    	; 0x28de <__fp_zero>
    2610:	0e f4       	brtc	.+2      	; 0x2614 <__addsf3x+0x1c>
    2612:	e0 95       	com	r30
    2614:	0b 2e       	mov	r0, r27
    2616:	ba 2f       	mov	r27, r26
    2618:	a0 2d       	mov	r26, r0
    261a:	0b 01       	movw	r0, r22
    261c:	b9 01       	movw	r22, r18
    261e:	90 01       	movw	r18, r0
    2620:	0c 01       	movw	r0, r24
    2622:	ca 01       	movw	r24, r20
    2624:	a0 01       	movw	r20, r0
    2626:	11 24       	eor	r1, r1
    2628:	ff 27       	eor	r31, r31
    262a:	59 1b       	sub	r21, r25
    262c:	99 f0       	breq	.+38     	; 0x2654 <__addsf3x+0x5c>
    262e:	59 3f       	cpi	r21, 0xF9	; 249
    2630:	50 f4       	brcc	.+20     	; 0x2646 <__addsf3x+0x4e>
    2632:	50 3e       	cpi	r21, 0xE0	; 224
    2634:	68 f1       	brcs	.+90     	; 0x2690 <__addsf3x+0x98>
    2636:	1a 16       	cp	r1, r26
    2638:	f0 40       	sbci	r31, 0x00	; 0
    263a:	a2 2f       	mov	r26, r18
    263c:	23 2f       	mov	r18, r19
    263e:	34 2f       	mov	r19, r20
    2640:	44 27       	eor	r20, r20
    2642:	58 5f       	subi	r21, 0xF8	; 248
    2644:	f3 cf       	rjmp	.-26     	; 0x262c <__addsf3x+0x34>
    2646:	46 95       	lsr	r20
    2648:	37 95       	ror	r19
    264a:	27 95       	ror	r18
    264c:	a7 95       	ror	r26
    264e:	f0 40       	sbci	r31, 0x00	; 0
    2650:	53 95       	inc	r21
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__addsf3x+0x4e>
    2654:	7e f4       	brtc	.+30     	; 0x2674 <__addsf3x+0x7c>
    2656:	1f 16       	cp	r1, r31
    2658:	ba 0b       	sbc	r27, r26
    265a:	62 0b       	sbc	r22, r18
    265c:	73 0b       	sbc	r23, r19
    265e:	84 0b       	sbc	r24, r20
    2660:	ba f0       	brmi	.+46     	; 0x2690 <__addsf3x+0x98>
    2662:	91 50       	subi	r25, 0x01	; 1
    2664:	a1 f0       	breq	.+40     	; 0x268e <__addsf3x+0x96>
    2666:	ff 0f       	add	r31, r31
    2668:	bb 1f       	adc	r27, r27
    266a:	66 1f       	adc	r22, r22
    266c:	77 1f       	adc	r23, r23
    266e:	88 1f       	adc	r24, r24
    2670:	c2 f7       	brpl	.-16     	; 0x2662 <__addsf3x+0x6a>
    2672:	0e c0       	rjmp	.+28     	; 0x2690 <__addsf3x+0x98>
    2674:	ba 0f       	add	r27, r26
    2676:	62 1f       	adc	r22, r18
    2678:	73 1f       	adc	r23, r19
    267a:	84 1f       	adc	r24, r20
    267c:	48 f4       	brcc	.+18     	; 0x2690 <__addsf3x+0x98>
    267e:	87 95       	ror	r24
    2680:	77 95       	ror	r23
    2682:	67 95       	ror	r22
    2684:	b7 95       	ror	r27
    2686:	f7 95       	ror	r31
    2688:	9e 3f       	cpi	r25, 0xFE	; 254
    268a:	08 f0       	brcs	.+2      	; 0x268e <__addsf3x+0x96>
    268c:	b3 cf       	rjmp	.-154    	; 0x25f4 <__addsf3+0x1e>
    268e:	93 95       	inc	r25
    2690:	88 0f       	add	r24, r24
    2692:	08 f0       	brcs	.+2      	; 0x2696 <__addsf3x+0x9e>
    2694:	99 27       	eor	r25, r25
    2696:	ee 0f       	add	r30, r30
    2698:	97 95       	ror	r25
    269a:	87 95       	ror	r24
    269c:	08 95       	ret

0000269e <__divsf3>:
    269e:	0c d0       	rcall	.+24     	; 0x26b8 <__divsf3x>
    26a0:	eb c0       	rjmp	.+470    	; 0x2878 <__fp_round>
    26a2:	e3 d0       	rcall	.+454    	; 0x286a <__fp_pscB>
    26a4:	40 f0       	brcs	.+16     	; 0x26b6 <__divsf3+0x18>
    26a6:	da d0       	rcall	.+436    	; 0x285c <__fp_pscA>
    26a8:	30 f0       	brcs	.+12     	; 0x26b6 <__divsf3+0x18>
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <__divsf3+0x16>
    26ac:	5f 3f       	cpi	r21, 0xFF	; 255
    26ae:	19 f0       	breq	.+6      	; 0x26b6 <__divsf3+0x18>
    26b0:	cc c0       	rjmp	.+408    	; 0x284a <__fp_inf>
    26b2:	51 11       	cpse	r21, r1
    26b4:	15 c1       	rjmp	.+554    	; 0x28e0 <__fp_szero>
    26b6:	cf c0       	rjmp	.+414    	; 0x2856 <__fp_nan>

000026b8 <__divsf3x>:
    26b8:	f0 d0       	rcall	.+480    	; 0x289a <__fp_split3>
    26ba:	98 f3       	brcs	.-26     	; 0x26a2 <__divsf3+0x4>

000026bc <__divsf3_pse>:
    26bc:	99 23       	and	r25, r25
    26be:	c9 f3       	breq	.-14     	; 0x26b2 <__divsf3+0x14>
    26c0:	55 23       	and	r21, r21
    26c2:	b1 f3       	breq	.-20     	; 0x26b0 <__divsf3+0x12>
    26c4:	95 1b       	sub	r25, r21
    26c6:	55 0b       	sbc	r21, r21
    26c8:	bb 27       	eor	r27, r27
    26ca:	aa 27       	eor	r26, r26
    26cc:	62 17       	cp	r22, r18
    26ce:	73 07       	cpc	r23, r19
    26d0:	84 07       	cpc	r24, r20
    26d2:	38 f0       	brcs	.+14     	; 0x26e2 <__divsf3_pse+0x26>
    26d4:	9f 5f       	subi	r25, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	22 0f       	add	r18, r18
    26da:	33 1f       	adc	r19, r19
    26dc:	44 1f       	adc	r20, r20
    26de:	aa 1f       	adc	r26, r26
    26e0:	a9 f3       	breq	.-22     	; 0x26cc <__divsf3_pse+0x10>
    26e2:	33 d0       	rcall	.+102    	; 0x274a <__divsf3_pse+0x8e>
    26e4:	0e 2e       	mov	r0, r30
    26e6:	3a f0       	brmi	.+14     	; 0x26f6 <__divsf3_pse+0x3a>
    26e8:	e0 e8       	ldi	r30, 0x80	; 128
    26ea:	30 d0       	rcall	.+96     	; 0x274c <__divsf3_pse+0x90>
    26ec:	91 50       	subi	r25, 0x01	; 1
    26ee:	50 40       	sbci	r21, 0x00	; 0
    26f0:	e6 95       	lsr	r30
    26f2:	00 1c       	adc	r0, r0
    26f4:	ca f7       	brpl	.-14     	; 0x26e8 <__divsf3_pse+0x2c>
    26f6:	29 d0       	rcall	.+82     	; 0x274a <__divsf3_pse+0x8e>
    26f8:	fe 2f       	mov	r31, r30
    26fa:	27 d0       	rcall	.+78     	; 0x274a <__divsf3_pse+0x8e>
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	88 1f       	adc	r24, r24
    2702:	bb 1f       	adc	r27, r27
    2704:	26 17       	cp	r18, r22
    2706:	37 07       	cpc	r19, r23
    2708:	48 07       	cpc	r20, r24
    270a:	ab 07       	cpc	r26, r27
    270c:	b0 e8       	ldi	r27, 0x80	; 128
    270e:	09 f0       	breq	.+2      	; 0x2712 <__divsf3_pse+0x56>
    2710:	bb 0b       	sbc	r27, r27
    2712:	80 2d       	mov	r24, r0
    2714:	bf 01       	movw	r22, r30
    2716:	ff 27       	eor	r31, r31
    2718:	93 58       	subi	r25, 0x83	; 131
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	2a f0       	brmi	.+10     	; 0x2728 <__divsf3_pse+0x6c>
    271e:	9e 3f       	cpi	r25, 0xFE	; 254
    2720:	51 05       	cpc	r21, r1
    2722:	68 f0       	brcs	.+26     	; 0x273e <__divsf3_pse+0x82>
    2724:	92 c0       	rjmp	.+292    	; 0x284a <__fp_inf>
    2726:	dc c0       	rjmp	.+440    	; 0x28e0 <__fp_szero>
    2728:	5f 3f       	cpi	r21, 0xFF	; 255
    272a:	ec f3       	brlt	.-6      	; 0x2726 <__divsf3_pse+0x6a>
    272c:	98 3e       	cpi	r25, 0xE8	; 232
    272e:	dc f3       	brlt	.-10     	; 0x2726 <__divsf3_pse+0x6a>
    2730:	86 95       	lsr	r24
    2732:	77 95       	ror	r23
    2734:	67 95       	ror	r22
    2736:	b7 95       	ror	r27
    2738:	f7 95       	ror	r31
    273a:	9f 5f       	subi	r25, 0xFF	; 255
    273c:	c9 f7       	brne	.-14     	; 0x2730 <__divsf3_pse+0x74>
    273e:	88 0f       	add	r24, r24
    2740:	91 1d       	adc	r25, r1
    2742:	96 95       	lsr	r25
    2744:	87 95       	ror	r24
    2746:	97 f9       	bld	r25, 7
    2748:	08 95       	ret
    274a:	e1 e0       	ldi	r30, 0x01	; 1
    274c:	66 0f       	add	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	bb 1f       	adc	r27, r27
    2754:	62 17       	cp	r22, r18
    2756:	73 07       	cpc	r23, r19
    2758:	84 07       	cpc	r24, r20
    275a:	ba 07       	cpc	r27, r26
    275c:	20 f0       	brcs	.+8      	; 0x2766 <__divsf3_pse+0xaa>
    275e:	62 1b       	sub	r22, r18
    2760:	73 0b       	sbc	r23, r19
    2762:	84 0b       	sbc	r24, r20
    2764:	ba 0b       	sbc	r27, r26
    2766:	ee 1f       	adc	r30, r30
    2768:	88 f7       	brcc	.-30     	; 0x274c <__divsf3_pse+0x90>
    276a:	e0 95       	com	r30
    276c:	08 95       	ret

0000276e <__fixsfsi>:
    276e:	04 d0       	rcall	.+8      	; 0x2778 <__fixunssfsi>
    2770:	68 94       	set
    2772:	b1 11       	cpse	r27, r1
    2774:	b5 c0       	rjmp	.+362    	; 0x28e0 <__fp_szero>
    2776:	08 95       	ret

00002778 <__fixunssfsi>:
    2778:	98 d0       	rcall	.+304    	; 0x28aa <__fp_splitA>
    277a:	88 f0       	brcs	.+34     	; 0x279e <__fixunssfsi+0x26>
    277c:	9f 57       	subi	r25, 0x7F	; 127
    277e:	90 f0       	brcs	.+36     	; 0x27a4 <__fixunssfsi+0x2c>
    2780:	b9 2f       	mov	r27, r25
    2782:	99 27       	eor	r25, r25
    2784:	b7 51       	subi	r27, 0x17	; 23
    2786:	a0 f0       	brcs	.+40     	; 0x27b0 <__fixunssfsi+0x38>
    2788:	d1 f0       	breq	.+52     	; 0x27be <__fixunssfsi+0x46>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	1a f0       	brmi	.+6      	; 0x279a <__fixunssfsi+0x22>
    2794:	ba 95       	dec	r27
    2796:	c9 f7       	brne	.-14     	; 0x278a <__fixunssfsi+0x12>
    2798:	12 c0       	rjmp	.+36     	; 0x27be <__fixunssfsi+0x46>
    279a:	b1 30       	cpi	r27, 0x01	; 1
    279c:	81 f0       	breq	.+32     	; 0x27be <__fixunssfsi+0x46>
    279e:	9f d0       	rcall	.+318    	; 0x28de <__fp_zero>
    27a0:	b1 e0       	ldi	r27, 0x01	; 1
    27a2:	08 95       	ret
    27a4:	9c c0       	rjmp	.+312    	; 0x28de <__fp_zero>
    27a6:	67 2f       	mov	r22, r23
    27a8:	78 2f       	mov	r23, r24
    27aa:	88 27       	eor	r24, r24
    27ac:	b8 5f       	subi	r27, 0xF8	; 248
    27ae:	39 f0       	breq	.+14     	; 0x27be <__fixunssfsi+0x46>
    27b0:	b9 3f       	cpi	r27, 0xF9	; 249
    27b2:	cc f3       	brlt	.-14     	; 0x27a6 <__fixunssfsi+0x2e>
    27b4:	86 95       	lsr	r24
    27b6:	77 95       	ror	r23
    27b8:	67 95       	ror	r22
    27ba:	b3 95       	inc	r27
    27bc:	d9 f7       	brne	.-10     	; 0x27b4 <__fixunssfsi+0x3c>
    27be:	3e f4       	brtc	.+14     	; 0x27ce <__fixunssfsi+0x56>
    27c0:	90 95       	com	r25
    27c2:	80 95       	com	r24
    27c4:	70 95       	com	r23
    27c6:	61 95       	neg	r22
    27c8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ca:	8f 4f       	sbci	r24, 0xFF	; 255
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	08 95       	ret

000027d0 <__floatunsisf>:
    27d0:	e8 94       	clt
    27d2:	09 c0       	rjmp	.+18     	; 0x27e6 <__floatsisf+0x12>

000027d4 <__floatsisf>:
    27d4:	97 fb       	bst	r25, 7
    27d6:	3e f4       	brtc	.+14     	; 0x27e6 <__floatsisf+0x12>
    27d8:	90 95       	com	r25
    27da:	80 95       	com	r24
    27dc:	70 95       	com	r23
    27de:	61 95       	neg	r22
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	8f 4f       	sbci	r24, 0xFF	; 255
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	99 23       	and	r25, r25
    27e8:	a9 f0       	breq	.+42     	; 0x2814 <__floatsisf+0x40>
    27ea:	f9 2f       	mov	r31, r25
    27ec:	96 e9       	ldi	r25, 0x96	; 150
    27ee:	bb 27       	eor	r27, r27
    27f0:	93 95       	inc	r25
    27f2:	f6 95       	lsr	r31
    27f4:	87 95       	ror	r24
    27f6:	77 95       	ror	r23
    27f8:	67 95       	ror	r22
    27fa:	b7 95       	ror	r27
    27fc:	f1 11       	cpse	r31, r1
    27fe:	f8 cf       	rjmp	.-16     	; 0x27f0 <__floatsisf+0x1c>
    2800:	fa f4       	brpl	.+62     	; 0x2840 <__floatsisf+0x6c>
    2802:	bb 0f       	add	r27, r27
    2804:	11 f4       	brne	.+4      	; 0x280a <__floatsisf+0x36>
    2806:	60 ff       	sbrs	r22, 0
    2808:	1b c0       	rjmp	.+54     	; 0x2840 <__floatsisf+0x6c>
    280a:	6f 5f       	subi	r22, 0xFF	; 255
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	8f 4f       	sbci	r24, 0xFF	; 255
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	16 c0       	rjmp	.+44     	; 0x2840 <__floatsisf+0x6c>
    2814:	88 23       	and	r24, r24
    2816:	11 f0       	breq	.+4      	; 0x281c <__floatsisf+0x48>
    2818:	96 e9       	ldi	r25, 0x96	; 150
    281a:	11 c0       	rjmp	.+34     	; 0x283e <__floatsisf+0x6a>
    281c:	77 23       	and	r23, r23
    281e:	21 f0       	breq	.+8      	; 0x2828 <__floatsisf+0x54>
    2820:	9e e8       	ldi	r25, 0x8E	; 142
    2822:	87 2f       	mov	r24, r23
    2824:	76 2f       	mov	r23, r22
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <__floatsisf+0x5e>
    2828:	66 23       	and	r22, r22
    282a:	71 f0       	breq	.+28     	; 0x2848 <__floatsisf+0x74>
    282c:	96 e8       	ldi	r25, 0x86	; 134
    282e:	86 2f       	mov	r24, r22
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	2a f0       	brmi	.+10     	; 0x2840 <__floatsisf+0x6c>
    2836:	9a 95       	dec	r25
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	88 1f       	adc	r24, r24
    283e:	da f7       	brpl	.-10     	; 0x2836 <__floatsisf+0x62>
    2840:	88 0f       	add	r24, r24
    2842:	96 95       	lsr	r25
    2844:	87 95       	ror	r24
    2846:	97 f9       	bld	r25, 7
    2848:	08 95       	ret

0000284a <__fp_inf>:
    284a:	97 f9       	bld	r25, 7
    284c:	9f 67       	ori	r25, 0x7F	; 127
    284e:	80 e8       	ldi	r24, 0x80	; 128
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	08 95       	ret

00002856 <__fp_nan>:
    2856:	9f ef       	ldi	r25, 0xFF	; 255
    2858:	80 ec       	ldi	r24, 0xC0	; 192
    285a:	08 95       	ret

0000285c <__fp_pscA>:
    285c:	00 24       	eor	r0, r0
    285e:	0a 94       	dec	r0
    2860:	16 16       	cp	r1, r22
    2862:	17 06       	cpc	r1, r23
    2864:	18 06       	cpc	r1, r24
    2866:	09 06       	cpc	r0, r25
    2868:	08 95       	ret

0000286a <__fp_pscB>:
    286a:	00 24       	eor	r0, r0
    286c:	0a 94       	dec	r0
    286e:	12 16       	cp	r1, r18
    2870:	13 06       	cpc	r1, r19
    2872:	14 06       	cpc	r1, r20
    2874:	05 06       	cpc	r0, r21
    2876:	08 95       	ret

00002878 <__fp_round>:
    2878:	09 2e       	mov	r0, r25
    287a:	03 94       	inc	r0
    287c:	00 0c       	add	r0, r0
    287e:	11 f4       	brne	.+4      	; 0x2884 <__fp_round+0xc>
    2880:	88 23       	and	r24, r24
    2882:	52 f0       	brmi	.+20     	; 0x2898 <__fp_round+0x20>
    2884:	bb 0f       	add	r27, r27
    2886:	40 f4       	brcc	.+16     	; 0x2898 <__fp_round+0x20>
    2888:	bf 2b       	or	r27, r31
    288a:	11 f4       	brne	.+4      	; 0x2890 <__fp_round+0x18>
    288c:	60 ff       	sbrs	r22, 0
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <__fp_round+0x20>
    2890:	6f 5f       	subi	r22, 0xFF	; 255
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	8f 4f       	sbci	r24, 0xFF	; 255
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	08 95       	ret

0000289a <__fp_split3>:
    289a:	57 fd       	sbrc	r21, 7
    289c:	90 58       	subi	r25, 0x80	; 128
    289e:	44 0f       	add	r20, r20
    28a0:	55 1f       	adc	r21, r21
    28a2:	59 f0       	breq	.+22     	; 0x28ba <__fp_splitA+0x10>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	71 f0       	breq	.+28     	; 0x28c4 <__fp_splitA+0x1a>
    28a8:	47 95       	ror	r20

000028aa <__fp_splitA>:
    28aa:	88 0f       	add	r24, r24
    28ac:	97 fb       	bst	r25, 7
    28ae:	99 1f       	adc	r25, r25
    28b0:	61 f0       	breq	.+24     	; 0x28ca <__fp_splitA+0x20>
    28b2:	9f 3f       	cpi	r25, 0xFF	; 255
    28b4:	79 f0       	breq	.+30     	; 0x28d4 <__fp_splitA+0x2a>
    28b6:	87 95       	ror	r24
    28b8:	08 95       	ret
    28ba:	12 16       	cp	r1, r18
    28bc:	13 06       	cpc	r1, r19
    28be:	14 06       	cpc	r1, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	f2 cf       	rjmp	.-28     	; 0x28a8 <__fp_split3+0xe>
    28c4:	46 95       	lsr	r20
    28c6:	f1 df       	rcall	.-30     	; 0x28aa <__fp_splitA>
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <__fp_splitA+0x30>
    28ca:	16 16       	cp	r1, r22
    28cc:	17 06       	cpc	r1, r23
    28ce:	18 06       	cpc	r1, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	f1 cf       	rjmp	.-30     	; 0x28b6 <__fp_splitA+0xc>
    28d4:	86 95       	lsr	r24
    28d6:	71 05       	cpc	r23, r1
    28d8:	61 05       	cpc	r22, r1
    28da:	08 94       	sec
    28dc:	08 95       	ret

000028de <__fp_zero>:
    28de:	e8 94       	clt

000028e0 <__fp_szero>:
    28e0:	bb 27       	eor	r27, r27
    28e2:	66 27       	eor	r22, r22
    28e4:	77 27       	eor	r23, r23
    28e6:	cb 01       	movw	r24, r22
    28e8:	97 f9       	bld	r25, 7
    28ea:	08 95       	ret

000028ec <__mulsf3>:
    28ec:	0b d0       	rcall	.+22     	; 0x2904 <__mulsf3x>
    28ee:	c4 cf       	rjmp	.-120    	; 0x2878 <__fp_round>
    28f0:	b5 df       	rcall	.-150    	; 0x285c <__fp_pscA>
    28f2:	28 f0       	brcs	.+10     	; 0x28fe <__mulsf3+0x12>
    28f4:	ba df       	rcall	.-140    	; 0x286a <__fp_pscB>
    28f6:	18 f0       	brcs	.+6      	; 0x28fe <__mulsf3+0x12>
    28f8:	95 23       	and	r25, r21
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__mulsf3+0x12>
    28fc:	a6 cf       	rjmp	.-180    	; 0x284a <__fp_inf>
    28fe:	ab cf       	rjmp	.-170    	; 0x2856 <__fp_nan>
    2900:	11 24       	eor	r1, r1
    2902:	ee cf       	rjmp	.-36     	; 0x28e0 <__fp_szero>

00002904 <__mulsf3x>:
    2904:	ca df       	rcall	.-108    	; 0x289a <__fp_split3>
    2906:	a0 f3       	brcs	.-24     	; 0x28f0 <__mulsf3+0x4>

00002908 <__mulsf3_pse>:
    2908:	95 9f       	mul	r25, r21
    290a:	d1 f3       	breq	.-12     	; 0x2900 <__mulsf3+0x14>
    290c:	95 0f       	add	r25, r21
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	55 1f       	adc	r21, r21
    2912:	62 9f       	mul	r22, r18
    2914:	f0 01       	movw	r30, r0
    2916:	72 9f       	mul	r23, r18
    2918:	bb 27       	eor	r27, r27
    291a:	f0 0d       	add	r31, r0
    291c:	b1 1d       	adc	r27, r1
    291e:	63 9f       	mul	r22, r19
    2920:	aa 27       	eor	r26, r26
    2922:	f0 0d       	add	r31, r0
    2924:	b1 1d       	adc	r27, r1
    2926:	aa 1f       	adc	r26, r26
    2928:	64 9f       	mul	r22, r20
    292a:	66 27       	eor	r22, r22
    292c:	b0 0d       	add	r27, r0
    292e:	a1 1d       	adc	r26, r1
    2930:	66 1f       	adc	r22, r22
    2932:	82 9f       	mul	r24, r18
    2934:	22 27       	eor	r18, r18
    2936:	b0 0d       	add	r27, r0
    2938:	a1 1d       	adc	r26, r1
    293a:	62 1f       	adc	r22, r18
    293c:	73 9f       	mul	r23, r19
    293e:	b0 0d       	add	r27, r0
    2940:	a1 1d       	adc	r26, r1
    2942:	62 1f       	adc	r22, r18
    2944:	83 9f       	mul	r24, r19
    2946:	a0 0d       	add	r26, r0
    2948:	61 1d       	adc	r22, r1
    294a:	22 1f       	adc	r18, r18
    294c:	74 9f       	mul	r23, r20
    294e:	33 27       	eor	r19, r19
    2950:	a0 0d       	add	r26, r0
    2952:	61 1d       	adc	r22, r1
    2954:	23 1f       	adc	r18, r19
    2956:	84 9f       	mul	r24, r20
    2958:	60 0d       	add	r22, r0
    295a:	21 1d       	adc	r18, r1
    295c:	82 2f       	mov	r24, r18
    295e:	76 2f       	mov	r23, r22
    2960:	6a 2f       	mov	r22, r26
    2962:	11 24       	eor	r1, r1
    2964:	9f 57       	subi	r25, 0x7F	; 127
    2966:	50 40       	sbci	r21, 0x00	; 0
    2968:	8a f0       	brmi	.+34     	; 0x298c <__mulsf3_pse+0x84>
    296a:	e1 f0       	breq	.+56     	; 0x29a4 <__mulsf3_pse+0x9c>
    296c:	88 23       	and	r24, r24
    296e:	4a f0       	brmi	.+18     	; 0x2982 <__mulsf3_pse+0x7a>
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	bb 1f       	adc	r27, r27
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	a9 f7       	brne	.-22     	; 0x296c <__mulsf3_pse+0x64>
    2982:	9e 3f       	cpi	r25, 0xFE	; 254
    2984:	51 05       	cpc	r21, r1
    2986:	70 f0       	brcs	.+28     	; 0x29a4 <__mulsf3_pse+0x9c>
    2988:	60 cf       	rjmp	.-320    	; 0x284a <__fp_inf>
    298a:	aa cf       	rjmp	.-172    	; 0x28e0 <__fp_szero>
    298c:	5f 3f       	cpi	r21, 0xFF	; 255
    298e:	ec f3       	brlt	.-6      	; 0x298a <__mulsf3_pse+0x82>
    2990:	98 3e       	cpi	r25, 0xE8	; 232
    2992:	dc f3       	brlt	.-10     	; 0x298a <__mulsf3_pse+0x82>
    2994:	86 95       	lsr	r24
    2996:	77 95       	ror	r23
    2998:	67 95       	ror	r22
    299a:	b7 95       	ror	r27
    299c:	f7 95       	ror	r31
    299e:	e7 95       	ror	r30
    29a0:	9f 5f       	subi	r25, 0xFF	; 255
    29a2:	c1 f7       	brne	.-16     	; 0x2994 <__mulsf3_pse+0x8c>
    29a4:	fe 2b       	or	r31, r30
    29a6:	88 0f       	add	r24, r24
    29a8:	91 1d       	adc	r25, r1
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	97 f9       	bld	r25, 7
    29b0:	08 95       	ret

000029b2 <__divmodhi4>:
    29b2:	97 fb       	bst	r25, 7
    29b4:	07 2e       	mov	r0, r23
    29b6:	16 f4       	brtc	.+4      	; 0x29bc <__divmodhi4+0xa>
    29b8:	00 94       	com	r0
    29ba:	06 d0       	rcall	.+12     	; 0x29c8 <__divmodhi4_neg1>
    29bc:	77 fd       	sbrc	r23, 7
    29be:	08 d0       	rcall	.+16     	; 0x29d0 <__divmodhi4_neg2>
    29c0:	2d d0       	rcall	.+90     	; 0x2a1c <__udivmodhi4>
    29c2:	07 fc       	sbrc	r0, 7
    29c4:	05 d0       	rcall	.+10     	; 0x29d0 <__divmodhi4_neg2>
    29c6:	3e f4       	brtc	.+14     	; 0x29d6 <__divmodhi4_exit>

000029c8 <__divmodhi4_neg1>:
    29c8:	90 95       	com	r25
    29ca:	81 95       	neg	r24
    29cc:	9f 4f       	sbci	r25, 0xFF	; 255
    29ce:	08 95       	ret

000029d0 <__divmodhi4_neg2>:
    29d0:	70 95       	com	r23
    29d2:	61 95       	neg	r22
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255

000029d6 <__divmodhi4_exit>:
    29d6:	08 95       	ret

000029d8 <__udivmodsi4>:
    29d8:	a1 e2       	ldi	r26, 0x21	; 33
    29da:	1a 2e       	mov	r1, r26
    29dc:	aa 1b       	sub	r26, r26
    29de:	bb 1b       	sub	r27, r27
    29e0:	fd 01       	movw	r30, r26
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <__udivmodsi4_ep>

000029e4 <__udivmodsi4_loop>:
    29e4:	aa 1f       	adc	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	ee 1f       	adc	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	a2 17       	cp	r26, r18
    29ee:	b3 07       	cpc	r27, r19
    29f0:	e4 07       	cpc	r30, r20
    29f2:	f5 07       	cpc	r31, r21
    29f4:	20 f0       	brcs	.+8      	; 0x29fe <__udivmodsi4_ep>
    29f6:	a2 1b       	sub	r26, r18
    29f8:	b3 0b       	sbc	r27, r19
    29fa:	e4 0b       	sbc	r30, r20
    29fc:	f5 0b       	sbc	r31, r21

000029fe <__udivmodsi4_ep>:
    29fe:	66 1f       	adc	r22, r22
    2a00:	77 1f       	adc	r23, r23
    2a02:	88 1f       	adc	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	1a 94       	dec	r1
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <__udivmodsi4_loop>
    2a0a:	60 95       	com	r22
    2a0c:	70 95       	com	r23
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	9b 01       	movw	r18, r22
    2a14:	ac 01       	movw	r20, r24
    2a16:	bd 01       	movw	r22, r26
    2a18:	cf 01       	movw	r24, r30
    2a1a:	08 95       	ret

00002a1c <__udivmodhi4>:
    2a1c:	aa 1b       	sub	r26, r26
    2a1e:	bb 1b       	sub	r27, r27
    2a20:	51 e1       	ldi	r21, 0x11	; 17
    2a22:	07 c0       	rjmp	.+14     	; 0x2a32 <__udivmodhi4_ep>

00002a24 <__udivmodhi4_loop>:
    2a24:	aa 1f       	adc	r26, r26
    2a26:	bb 1f       	adc	r27, r27
    2a28:	a6 17       	cp	r26, r22
    2a2a:	b7 07       	cpc	r27, r23
    2a2c:	10 f0       	brcs	.+4      	; 0x2a32 <__udivmodhi4_ep>
    2a2e:	a6 1b       	sub	r26, r22
    2a30:	b7 0b       	sbc	r27, r23

00002a32 <__udivmodhi4_ep>:
    2a32:	88 1f       	adc	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	5a 95       	dec	r21
    2a38:	a9 f7       	brne	.-22     	; 0x2a24 <__udivmodhi4_loop>
    2a3a:	80 95       	com	r24
    2a3c:	90 95       	com	r25
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	08 95       	ret

00002a44 <dtostrf>:
    2a44:	ef 92       	push	r14
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	e8 01       	movw	r28, r16
    2a50:	47 ff       	sbrs	r20, 7
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <dtostrf+0x14>
    2a54:	34 e1       	ldi	r19, 0x14	; 20
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <dtostrf+0x16>
    2a58:	34 e0       	ldi	r19, 0x04	; 4
    2a5a:	e4 2f       	mov	r30, r20
    2a5c:	ff 27       	eor	r31, r31
    2a5e:	e7 fd       	sbrc	r30, 7
    2a60:	f0 95       	com	r31
    2a62:	f7 ff       	sbrs	r31, 7
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <dtostrf+0x28>
    2a66:	f1 95       	neg	r31
    2a68:	e1 95       	neg	r30
    2a6a:	f1 09       	sbc	r31, r1
    2a6c:	e3 2e       	mov	r14, r19
    2a6e:	02 2f       	mov	r16, r18
    2a70:	2e 2f       	mov	r18, r30
    2a72:	ae 01       	movw	r20, r28
    2a74:	d6 d4       	rcall	.+2476   	; 0x3422 <dtoa_prf>
    2a76:	ce 01       	movw	r24, r28
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ef 90       	pop	r14
    2a82:	08 95       	ret

00002a84 <strtod>:
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e7 e4       	ldi	r30, 0x47	; 71
    2a8a:	f5 e1       	ldi	r31, 0x15	; 21
    2a8c:	e7 c7       	rjmp	.+4046   	; 0x3a5c <__prologue_saves__+0xc>
    2a8e:	8b 01       	movw	r16, r22
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	21 f0       	breq	.+8      	; 0x2a9e <strtod+0x1a>
    2a96:	db 01       	movw	r26, r22
    2a98:	8c 93       	st	X, r24
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	ec 01       	movw	r28, r24
    2aa0:	5e 01       	movw	r10, r28
    2aa2:	bf ef       	ldi	r27, 0xFF	; 255
    2aa4:	ab 1a       	sub	r10, r27
    2aa6:	bb 0a       	sbc	r11, r27
    2aa8:	75 01       	movw	r14, r10
    2aaa:	c8 80       	ld	r12, Y
    2aac:	8c 2d       	mov	r24, r12
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	52 d2       	rcall	.+1188   	; 0x2f56 <isspace>
    2ab2:	89 2b       	or	r24, r25
    2ab4:	11 f0       	breq	.+4      	; 0x2aba <strtod+0x36>
    2ab6:	e5 01       	movw	r28, r10
    2ab8:	f3 cf       	rjmp	.-26     	; 0x2aa0 <strtod+0x1c>
    2aba:	ed e2       	ldi	r30, 0x2D	; 45
    2abc:	ce 12       	cpse	r12, r30
    2abe:	08 c0       	rjmp	.+16     	; 0x2ad0 <strtod+0x4c>
    2ac0:	7e 01       	movw	r14, r28
    2ac2:	f2 e0       	ldi	r31, 0x02	; 2
    2ac4:	ef 0e       	add	r14, r31
    2ac6:	f1 1c       	adc	r15, r1
    2ac8:	c9 80       	ldd	r12, Y+1	; 0x01
    2aca:	dd 24       	eor	r13, r13
    2acc:	d3 94       	inc	r13
    2ace:	09 c0       	rjmp	.+18     	; 0x2ae2 <strtod+0x5e>
    2ad0:	2b e2       	ldi	r18, 0x2B	; 43
    2ad2:	c2 12       	cpse	r12, r18
    2ad4:	05 c0       	rjmp	.+10     	; 0x2ae0 <strtod+0x5c>
    2ad6:	7e 01       	movw	r14, r28
    2ad8:	42 e0       	ldi	r20, 0x02	; 2
    2ada:	e4 0e       	add	r14, r20
    2adc:	f1 1c       	adc	r15, r1
    2ade:	c9 80       	ldd	r12, Y+1	; 0x01
    2ae0:	d1 2c       	mov	r13, r1
    2ae2:	e7 01       	movw	r28, r14
    2ae4:	21 97       	sbiw	r28, 0x01	; 1
    2ae6:	43 e0       	ldi	r20, 0x03	; 3
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	6f e3       	ldi	r22, 0x3F	; 63
    2aec:	74 e0       	ldi	r23, 0x04	; 4
    2aee:	ce 01       	movw	r24, r28
    2af0:	4c d2       	rcall	.+1176   	; 0x2f8a <strncasecmp_P>
    2af2:	89 2b       	or	r24, r25
    2af4:	b9 f4       	brne	.+46     	; 0x2b24 <strtod+0xa0>
    2af6:	23 96       	adiw	r28, 0x03	; 3
    2af8:	45 e0       	ldi	r20, 0x05	; 5
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	6a e3       	ldi	r22, 0x3A	; 58
    2afe:	74 e0       	ldi	r23, 0x04	; 4
    2b00:	ce 01       	movw	r24, r28
    2b02:	43 d2       	rcall	.+1158   	; 0x2f8a <strncasecmp_P>
    2b04:	89 2b       	or	r24, r25
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <strtod+0x86>
    2b08:	25 96       	adiw	r28, 0x05	; 5
    2b0a:	01 15       	cp	r16, r1
    2b0c:	11 05       	cpc	r17, r1
    2b0e:	19 f0       	breq	.+6      	; 0x2b16 <strtod+0x92>
    2b10:	d8 01       	movw	r26, r16
    2b12:	cd 93       	st	X+, r28
    2b14:	dc 93       	st	X, r29
    2b16:	d1 10       	cpse	r13, r1
    2b18:	00 c1       	rjmp	.+512    	; 0x2d1a <strtod+0x296>
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	80 e8       	ldi	r24, 0x80	; 128
    2b20:	9f e7       	ldi	r25, 0x7F	; 127
    2b22:	04 c1       	rjmp	.+520    	; 0x2d2c <strtod+0x2a8>
    2b24:	43 e0       	ldi	r20, 0x03	; 3
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	67 e3       	ldi	r22, 0x37	; 55
    2b2a:	74 e0       	ldi	r23, 0x04	; 4
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	2d d2       	rcall	.+1114   	; 0x2f8a <strncasecmp_P>
    2b30:	89 2b       	or	r24, r25
    2b32:	59 f4       	brne	.+22     	; 0x2b4a <strtod+0xc6>
    2b34:	01 15       	cp	r16, r1
    2b36:	11 05       	cpc	r17, r1
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <strtod+0xb8>
    2b3a:	f4 c0       	rjmp	.+488    	; 0x2d24 <strtod+0x2a0>
    2b3c:	b2 e0       	ldi	r27, 0x02	; 2
    2b3e:	eb 0e       	add	r14, r27
    2b40:	f1 1c       	adc	r15, r1
    2b42:	f8 01       	movw	r30, r16
    2b44:	f1 82       	std	Z+1, r15	; 0x01
    2b46:	e0 82       	st	Z, r14
    2b48:	ed c0       	rjmp	.+474    	; 0x2d24 <strtod+0x2a0>
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	cb 01       	movw	r24, r22
    2b52:	c0 e0       	ldi	r28, 0x00	; 0
    2b54:	d0 e0       	ldi	r29, 0x00	; 0
    2b56:	7f 01       	movw	r14, r30
    2b58:	a0 ed       	ldi	r26, 0xD0	; 208
    2b5a:	aa 2e       	mov	r10, r26
    2b5c:	ac 0c       	add	r10, r12
    2b5e:	29 e0       	ldi	r18, 0x09	; 9
    2b60:	2a 15       	cp	r18, r10
    2b62:	28 f1       	brcs	.+74     	; 0x2bae <strtod+0x12a>
    2b64:	4d 2d       	mov	r20, r13
    2b66:	42 60       	ori	r20, 0x02	; 2
    2b68:	b4 2e       	mov	r11, r20
    2b6a:	2d 2d       	mov	r18, r13
    2b6c:	28 70       	andi	r18, 0x08	; 8
    2b6e:	d2 fe       	sbrs	r13, 2
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <strtod+0xf6>
    2b72:	21 11       	cpse	r18, r1
    2b74:	24 c0       	rjmp	.+72     	; 0x2bbe <strtod+0x13a>
    2b76:	21 96       	adiw	r28, 0x01	; 1
    2b78:	22 c0       	rjmp	.+68     	; 0x2bbe <strtod+0x13a>
    2b7a:	21 11       	cpse	r18, r1
    2b7c:	21 97       	sbiw	r28, 0x01	; 1
    2b7e:	a5 e0       	ldi	r26, 0x05	; 5
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	5a d7       	rcall	.+3764   	; 0x3a3c <__muluhisi3>
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	88 1f       	adc	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	6a 0d       	add	r22, r10
    2b92:	71 1d       	adc	r23, r1
    2b94:	81 1d       	adc	r24, r1
    2b96:	91 1d       	adc	r25, r1
    2b98:	68 39       	cpi	r22, 0x98	; 152
    2b9a:	a9 e9       	ldi	r26, 0x99	; 153
    2b9c:	7a 07       	cpc	r23, r26
    2b9e:	8a 07       	cpc	r24, r26
    2ba0:	a9 e1       	ldi	r26, 0x19	; 25
    2ba2:	9a 07       	cpc	r25, r26
    2ba4:	60 f0       	brcs	.+24     	; 0x2bbe <strtod+0x13a>
    2ba6:	bd 2d       	mov	r27, r13
    2ba8:	b6 60       	ori	r27, 0x06	; 6
    2baa:	bb 2e       	mov	r11, r27
    2bac:	08 c0       	rjmp	.+16     	; 0x2bbe <strtod+0x13a>
    2bae:	2e ef       	ldi	r18, 0xFE	; 254
    2bb0:	a2 12       	cpse	r10, r18
    2bb2:	0a c0       	rjmp	.+20     	; 0x2bc8 <strtod+0x144>
    2bb4:	d3 fc       	sbrc	r13, 3
    2bb6:	50 c0       	rjmp	.+160    	; 0x2c58 <strtod+0x1d4>
    2bb8:	4d 2d       	mov	r20, r13
    2bba:	48 60       	ori	r20, 0x08	; 8
    2bbc:	b4 2e       	mov	r11, r20
    2bbe:	31 96       	adiw	r30, 0x01	; 1
    2bc0:	d7 01       	movw	r26, r14
    2bc2:	cc 90       	ld	r12, X
    2bc4:	db 2c       	mov	r13, r11
    2bc6:	c7 cf       	rjmp	.-114    	; 0x2b56 <strtod+0xd2>
    2bc8:	2c 2d       	mov	r18, r12
    2bca:	2f 7d       	andi	r18, 0xDF	; 223
    2bcc:	25 34       	cpi	r18, 0x45	; 69
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <strtod+0x14e>
    2bd0:	43 c0       	rjmp	.+134    	; 0x2c58 <strtod+0x1d4>
    2bd2:	a0 81       	ld	r26, Z
    2bd4:	ad 32       	cpi	r26, 0x2D	; 45
    2bd6:	41 f4       	brne	.+16     	; 0x2be8 <strtod+0x164>
    2bd8:	bd 2d       	mov	r27, r13
    2bda:	b0 61       	ori	r27, 0x10	; 16
    2bdc:	db 2e       	mov	r13, r27
    2bde:	7f 01       	movw	r14, r30
    2be0:	22 e0       	ldi	r18, 0x02	; 2
    2be2:	e2 0e       	add	r14, r18
    2be4:	f1 1c       	adc	r15, r1
    2be6:	0c c0       	rjmp	.+24     	; 0x2c00 <strtod+0x17c>
    2be8:	7f 01       	movw	r14, r30
    2bea:	ab 32       	cpi	r26, 0x2B	; 43
    2bec:	31 f0       	breq	.+12     	; 0x2bfa <strtod+0x176>
    2bee:	4f ef       	ldi	r20, 0xFF	; 255
    2bf0:	e4 1a       	sub	r14, r20
    2bf2:	f4 0a       	sbc	r15, r20
    2bf4:	21 e0       	ldi	r18, 0x01	; 1
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	06 c0       	rjmp	.+12     	; 0x2c06 <strtod+0x182>
    2bfa:	a2 e0       	ldi	r26, 0x02	; 2
    2bfc:	ea 0e       	add	r14, r26
    2bfe:	f1 1c       	adc	r15, r1
    2c00:	a1 81       	ldd	r26, Z+1	; 0x01
    2c02:	22 e0       	ldi	r18, 0x02	; 2
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	a0 53       	subi	r26, 0x30	; 48
    2c08:	aa 30       	cpi	r26, 0x0A	; 10
    2c0a:	18 f0       	brcs	.+6      	; 0x2c12 <strtod+0x18e>
    2c0c:	e2 1a       	sub	r14, r18
    2c0e:	f3 0a       	sbc	r15, r19
    2c10:	23 c0       	rjmp	.+70     	; 0x2c58 <strtod+0x1d4>
    2c12:	f7 01       	movw	r30, r14
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	20 38       	cpi	r18, 0x80	; 128
    2c1a:	bc e0       	ldi	r27, 0x0C	; 12
    2c1c:	3b 07       	cpc	r19, r27
    2c1e:	5c f4       	brge	.+22     	; 0x2c36 <strtod+0x1b2>
    2c20:	a9 01       	movw	r20, r18
    2c22:	44 0f       	add	r20, r20
    2c24:	55 1f       	adc	r21, r21
    2c26:	44 0f       	add	r20, r20
    2c28:	55 1f       	adc	r21, r21
    2c2a:	24 0f       	add	r18, r20
    2c2c:	35 1f       	adc	r19, r21
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	2a 0f       	add	r18, r26
    2c34:	31 1d       	adc	r19, r1
    2c36:	af 01       	movw	r20, r30
    2c38:	4f 5f       	subi	r20, 0xFF	; 255
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	7a 01       	movw	r14, r20
    2c3e:	a0 81       	ld	r26, Z
    2c40:	a0 53       	subi	r26, 0x30	; 48
    2c42:	aa 30       	cpi	r26, 0x0A	; 10
    2c44:	10 f4       	brcc	.+4      	; 0x2c4a <strtod+0x1c6>
    2c46:	fa 01       	movw	r30, r20
    2c48:	e7 cf       	rjmp	.-50     	; 0x2c18 <strtod+0x194>
    2c4a:	d4 fe       	sbrs	r13, 4
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <strtod+0x1d0>
    2c4e:	31 95       	neg	r19
    2c50:	21 95       	neg	r18
    2c52:	31 09       	sbc	r19, r1
    2c54:	c2 0f       	add	r28, r18
    2c56:	d3 1f       	adc	r29, r19
    2c58:	d1 fe       	sbrs	r13, 1
    2c5a:	09 c0       	rjmp	.+18     	; 0x2c6e <strtod+0x1ea>
    2c5c:	01 15       	cp	r16, r1
    2c5e:	11 05       	cpc	r17, r1
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <strtod+0x1ea>
    2c62:	e1 e0       	ldi	r30, 0x01	; 1
    2c64:	ee 1a       	sub	r14, r30
    2c66:	f1 08       	sbc	r15, r1
    2c68:	d8 01       	movw	r26, r16
    2c6a:	ed 92       	st	X+, r14
    2c6c:	fc 92       	st	X, r15
    2c6e:	b0 dd       	rcall	.-1184   	; 0x27d0 <__floatunsisf>
    2c70:	2d 2d       	mov	r18, r13
    2c72:	23 70       	andi	r18, 0x03	; 3
    2c74:	23 30       	cpi	r18, 0x03	; 3
    2c76:	19 f0       	breq	.+6      	; 0x2c7e <strtod+0x1fa>
    2c78:	4b 01       	movw	r8, r22
    2c7a:	5c 01       	movw	r10, r24
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <strtod+0x206>
    2c7e:	4b 01       	movw	r8, r22
    2c80:	5c 01       	movw	r10, r24
    2c82:	b7 fa       	bst	r11, 7
    2c84:	b0 94       	com	r11
    2c86:	b7 f8       	bld	r11, 7
    2c88:	b0 94       	com	r11
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	a9 01       	movw	r20, r18
    2c90:	c5 01       	movw	r24, r10
    2c92:	b4 01       	movw	r22, r8
    2c94:	aa d1       	rcall	.+852    	; 0x2fea <__cmpsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <strtod+0x218>
    2c9a:	3c c0       	rjmp	.+120    	; 0x2d14 <strtod+0x290>
    2c9c:	d7 ff       	sbrs	r29, 7
    2c9e:	06 c0       	rjmp	.+12     	; 0x2cac <strtod+0x228>
    2ca0:	d1 95       	neg	r29
    2ca2:	c1 95       	neg	r28
    2ca4:	d1 09       	sbc	r29, r1
    2ca6:	06 e5       	ldi	r16, 0x56	; 86
    2ca8:	14 e0       	ldi	r17, 0x04	; 4
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <strtod+0x22c>
    2cac:	0e e6       	ldi	r16, 0x6E	; 110
    2cae:	14 e0       	ldi	r17, 0x04	; 4
    2cb0:	68 01       	movw	r12, r16
    2cb2:	b8 e1       	ldi	r27, 0x18	; 24
    2cb4:	cb 1a       	sub	r12, r27
    2cb6:	d1 08       	sbc	r13, r1
    2cb8:	90 e2       	ldi	r25, 0x20	; 32
    2cba:	e9 2e       	mov	r14, r25
    2cbc:	f1 2c       	mov	r15, r1
    2cbe:	ce 15       	cp	r28, r14
    2cc0:	df 05       	cpc	r29, r15
    2cc2:	6c f0       	brlt	.+26     	; 0x2cde <strtod+0x25a>
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	25 91       	lpm	r18, Z+
    2cc8:	35 91       	lpm	r19, Z+
    2cca:	45 91       	lpm	r20, Z+
    2ccc:	54 91       	lpm	r21, Z
    2cce:	c5 01       	movw	r24, r10
    2cd0:	b4 01       	movw	r22, r8
    2cd2:	0c de       	rcall	.-1000   	; 0x28ec <__mulsf3>
    2cd4:	4b 01       	movw	r8, r22
    2cd6:	5c 01       	movw	r10, r24
    2cd8:	ce 19       	sub	r28, r14
    2cda:	df 09       	sbc	r29, r15
    2cdc:	f0 cf       	rjmp	.-32     	; 0x2cbe <strtod+0x23a>
    2cde:	04 50       	subi	r16, 0x04	; 4
    2ce0:	11 09       	sbc	r17, r1
    2ce2:	f5 94       	asr	r15
    2ce4:	e7 94       	ror	r14
    2ce6:	0c 15       	cp	r16, r12
    2ce8:	1d 05       	cpc	r17, r13
    2cea:	49 f7       	brne	.-46     	; 0x2cbe <strtod+0x23a>
    2cec:	8a 2d       	mov	r24, r10
    2cee:	88 0f       	add	r24, r24
    2cf0:	8b 2d       	mov	r24, r11
    2cf2:	88 1f       	adc	r24, r24
    2cf4:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf6:	41 f0       	breq	.+16     	; 0x2d08 <strtod+0x284>
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	a9 01       	movw	r20, r18
    2cfe:	c5 01       	movw	r24, r10
    2d00:	b4 01       	movw	r22, r8
    2d02:	73 d1       	rcall	.+742    	; 0x2fea <__cmpsf2>
    2d04:	81 11       	cpse	r24, r1
    2d06:	06 c0       	rjmp	.+12     	; 0x2d14 <strtod+0x290>
    2d08:	82 e2       	ldi	r24, 0x22	; 34
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	90 93 a3 03 	sts	0x03A3, r25
    2d10:	80 93 a2 03 	sts	0x03A2, r24
    2d14:	c5 01       	movw	r24, r10
    2d16:	b4 01       	movw	r22, r8
    2d18:	09 c0       	rjmp	.+18     	; 0x2d2c <strtod+0x2a8>
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	80 e8       	ldi	r24, 0x80	; 128
    2d20:	9f ef       	ldi	r25, 0xFF	; 255
    2d22:	04 c0       	rjmp	.+8      	; 0x2d2c <strtod+0x2a8>
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	80 ec       	ldi	r24, 0xC0	; 192
    2d2a:	9f e7       	ldi	r25, 0x7F	; 127
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	ec e0       	ldi	r30, 0x0C	; 12
    2d32:	b0 c6       	rjmp	.+3424   	; 0x3a94 <__epilogue_restores__+0xc>

00002d34 <strtoul>:
    2d34:	2f 92       	push	r2
    2d36:	3f 92       	push	r3
    2d38:	5f 92       	push	r5
    2d3a:	6f 92       	push	r6
    2d3c:	7f 92       	push	r7
    2d3e:	8f 92       	push	r8
    2d40:	9f 92       	push	r9
    2d42:	af 92       	push	r10
    2d44:	bf 92       	push	r11
    2d46:	cf 92       	push	r12
    2d48:	df 92       	push	r13
    2d4a:	ef 92       	push	r14
    2d4c:	ff 92       	push	r15
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	8b 01       	movw	r16, r22
    2d58:	ea 01       	movw	r28, r20
    2d5a:	61 15       	cp	r22, r1
    2d5c:	71 05       	cpc	r23, r1
    2d5e:	21 f0       	breq	.+8      	; 0x2d68 <strtoul+0x34>
    2d60:	db 01       	movw	r26, r22
    2d62:	8c 93       	st	X, r24
    2d64:	11 96       	adiw	r26, 0x01	; 1
    2d66:	9c 93       	st	X, r25
    2d68:	20 97       	sbiw	r28, 0x00	; 0
    2d6a:	39 f0       	breq	.+14     	; 0x2d7a <strtoul+0x46>
    2d6c:	9e 01       	movw	r18, r28
    2d6e:	22 50       	subi	r18, 0x02	; 2
    2d70:	31 09       	sbc	r19, r1
    2d72:	23 32       	cpi	r18, 0x23	; 35
    2d74:	31 05       	cpc	r19, r1
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <strtoul+0x46>
    2d78:	d5 c0       	rjmp	.+426    	; 0x2f24 <strtoul+0x1f0>
    2d7a:	7c 01       	movw	r14, r24
    2d7c:	67 01       	movw	r12, r14
    2d7e:	bf ef       	ldi	r27, 0xFF	; 255
    2d80:	cb 1a       	sub	r12, r27
    2d82:	db 0a       	sbc	r13, r27
    2d84:	56 01       	movw	r10, r12
    2d86:	f7 01       	movw	r30, r14
    2d88:	60 80       	ld	r6, Z
    2d8a:	86 2d       	mov	r24, r6
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	e3 d0       	rcall	.+454    	; 0x2f56 <isspace>
    2d90:	89 2b       	or	r24, r25
    2d92:	11 f0       	breq	.+4      	; 0x2d98 <strtoul+0x64>
    2d94:	76 01       	movw	r14, r12
    2d96:	f2 cf       	rjmp	.-28     	; 0x2d7c <strtoul+0x48>
    2d98:	fd e2       	ldi	r31, 0x2D	; 45
    2d9a:	6f 12       	cpse	r6, r31
    2d9c:	0a c0       	rjmp	.+20     	; 0x2db2 <strtoul+0x7e>
    2d9e:	57 01       	movw	r10, r14
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	a8 0e       	add	r10, r24
    2da4:	b1 1c       	adc	r11, r1
    2da6:	d7 01       	movw	r26, r14
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	6c 90       	ld	r6, X
    2dac:	77 24       	eor	r7, r7
    2dae:	73 94       	inc	r7
    2db0:	0b c0       	rjmp	.+22     	; 0x2dc8 <strtoul+0x94>
    2db2:	bb e2       	ldi	r27, 0x2B	; 43
    2db4:	6b 12       	cpse	r6, r27
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <strtoul+0x92>
    2db8:	57 01       	movw	r10, r14
    2dba:	e2 e0       	ldi	r30, 0x02	; 2
    2dbc:	ae 0e       	add	r10, r30
    2dbe:	b1 1c       	adc	r11, r1
    2dc0:	d7 01       	movw	r26, r14
    2dc2:	11 96       	adiw	r26, 0x01	; 1
    2dc4:	6c 90       	ld	r6, X
    2dc6:	71 2c       	mov	r7, r1
    2dc8:	ce 01       	movw	r24, r28
    2dca:	8f 7e       	andi	r24, 0xEF	; 239
    2dcc:	89 2b       	or	r24, r25
    2dce:	89 f4       	brne	.+34     	; 0x2df2 <strtoul+0xbe>
    2dd0:	b0 e3       	ldi	r27, 0x30	; 48
    2dd2:	6b 12       	cpse	r6, r27
    2dd4:	36 c0       	rjmp	.+108    	; 0x2e42 <strtoul+0x10e>
    2dd6:	f5 01       	movw	r30, r10
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 7d       	andi	r24, 0xDF	; 223
    2ddc:	88 35       	cpi	r24, 0x58	; 88
    2dde:	d1 f4       	brne	.+52     	; 0x2e14 <strtoul+0xe0>
    2de0:	61 80       	ldd	r6, Z+1	; 0x01
    2de2:	f2 e0       	ldi	r31, 0x02	; 2
    2de4:	af 0e       	add	r10, r31
    2de6:	b1 1c       	adc	r11, r1
    2de8:	87 2d       	mov	r24, r7
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	78 2e       	mov	r7, r24
    2dee:	c0 e1       	ldi	r28, 0x10	; 16
    2df0:	d0 e0       	ldi	r29, 0x00	; 0
    2df2:	ca 30       	cpi	r28, 0x0A	; 10
    2df4:	d1 05       	cpc	r29, r1
    2df6:	49 f1       	breq	.+82     	; 0x2e4a <strtoul+0x116>
    2df8:	c0 31       	cpi	r28, 0x10	; 16
    2dfa:	d1 05       	cpc	r29, r1
    2dfc:	21 f0       	breq	.+8      	; 0x2e06 <strtoul+0xd2>
    2dfe:	c8 30       	cpi	r28, 0x08	; 8
    2e00:	d1 05       	cpc	r29, r1
    2e02:	99 f4       	brne	.+38     	; 0x2e2a <strtoul+0xf6>
    2e04:	09 c0       	rjmp	.+18     	; 0x2e18 <strtoul+0xe4>
    2e06:	cc 24       	eor	r12, r12
    2e08:	ca 94       	dec	r12
    2e0a:	dc 2c       	mov	r13, r12
    2e0c:	ec 2c       	mov	r14, r12
    2e0e:	af e0       	ldi	r26, 0x0F	; 15
    2e10:	fa 2e       	mov	r15, r26
    2e12:	21 c0       	rjmp	.+66     	; 0x2e56 <strtoul+0x122>
    2e14:	20 97       	sbiw	r28, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <strtoul+0xbe>
    2e18:	c8 e0       	ldi	r28, 0x08	; 8
    2e1a:	d0 e0       	ldi	r29, 0x00	; 0
    2e1c:	cc 24       	eor	r12, r12
    2e1e:	ca 94       	dec	r12
    2e20:	dc 2c       	mov	r13, r12
    2e22:	ec 2c       	mov	r14, r12
    2e24:	ff e1       	ldi	r31, 0x1F	; 31
    2e26:	ff 2e       	mov	r15, r31
    2e28:	16 c0       	rjmp	.+44     	; 0x2e56 <strtoul+0x122>
    2e2a:	6f ef       	ldi	r22, 0xFF	; 255
    2e2c:	7f ef       	ldi	r23, 0xFF	; 255
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9e 01       	movw	r18, r28
    2e32:	44 27       	eor	r20, r20
    2e34:	37 fd       	sbrc	r19, 7
    2e36:	40 95       	com	r20
    2e38:	54 2f       	mov	r21, r20
    2e3a:	ce dd       	rcall	.-1124   	; 0x29d8 <__udivmodsi4>
    2e3c:	69 01       	movw	r12, r18
    2e3e:	7a 01       	movw	r14, r20
    2e40:	0a c0       	rjmp	.+20     	; 0x2e56 <strtoul+0x122>
    2e42:	20 97       	sbiw	r28, 0x00	; 0
    2e44:	b1 f6       	brne	.-84     	; 0x2df2 <strtoul+0xbe>
    2e46:	ca e0       	ldi	r28, 0x0A	; 10
    2e48:	d0 e0       	ldi	r29, 0x00	; 0
    2e4a:	e9 e9       	ldi	r30, 0x99	; 153
    2e4c:	ce 2e       	mov	r12, r30
    2e4e:	dc 2c       	mov	r13, r12
    2e50:	ec 2c       	mov	r14, r12
    2e52:	e9 e1       	ldi	r30, 0x19	; 25
    2e54:	fe 2e       	mov	r15, r30
    2e56:	f5 01       	movw	r30, r10
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	a9 01       	movw	r20, r18
    2e60:	4e 01       	movw	r8, r28
    2e62:	aa 24       	eor	r10, r10
    2e64:	97 fc       	sbrc	r9, 7
    2e66:	a0 94       	com	r10
    2e68:	ba 2c       	mov	r11, r10
    2e6a:	1f 01       	movw	r2, r30
    2e6c:	70 ed       	ldi	r23, 0xD0	; 208
    2e6e:	57 2e       	mov	r5, r23
    2e70:	56 0c       	add	r5, r6
    2e72:	a9 e0       	ldi	r26, 0x09	; 9
    2e74:	a5 15       	cp	r26, r5
    2e76:	70 f4       	brcc	.+28     	; 0x2e94 <strtoul+0x160>
    2e78:	8f eb       	ldi	r24, 0xBF	; 191
    2e7a:	86 0d       	add	r24, r6
    2e7c:	8a 31       	cpi	r24, 0x1A	; 26
    2e7e:	18 f4       	brcc	.+6      	; 0x2e86 <strtoul+0x152>
    2e80:	99 ec       	ldi	r25, 0xC9	; 201
    2e82:	59 2e       	mov	r5, r25
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <strtoul+0x15e>
    2e86:	8f e9       	ldi	r24, 0x9F	; 159
    2e88:	86 0d       	add	r24, r6
    2e8a:	8a 31       	cpi	r24, 0x1A	; 26
    2e8c:	40 f5       	brcc	.+80     	; 0x2ede <strtoul+0x1aa>
    2e8e:	89 ea       	ldi	r24, 0xA9	; 169
    2e90:	58 2e       	mov	r5, r24
    2e92:	56 0c       	add	r5, r6
    2e94:	85 2d       	mov	r24, r5
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	8c 17       	cp	r24, r28
    2e9a:	9d 07       	cpc	r25, r29
    2e9c:	04 f5       	brge	.+64     	; 0x2ede <strtoul+0x1aa>
    2e9e:	6f 3f       	cpi	r22, 0xFF	; 255
    2ea0:	d1 f0       	breq	.+52     	; 0x2ed6 <strtoul+0x1a2>
    2ea2:	c2 16       	cp	r12, r18
    2ea4:	d3 06       	cpc	r13, r19
    2ea6:	e4 06       	cpc	r14, r20
    2ea8:	f5 06       	cpc	r15, r21
    2eaa:	90 f0       	brcs	.+36     	; 0x2ed0 <strtoul+0x19c>
    2eac:	c5 01       	movw	r24, r10
    2eae:	b4 01       	movw	r22, r8
    2eb0:	b6 d5       	rcall	.+2924   	; 0x3a1e <__mulsi3>
    2eb2:	9b 01       	movw	r18, r22
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	85 2d       	mov	r24, r5
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e0       	ldi	r26, 0x00	; 0
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	28 0f       	add	r18, r24
    2ec0:	39 1f       	adc	r19, r25
    2ec2:	4a 1f       	adc	r20, r26
    2ec4:	5b 1f       	adc	r21, r27
    2ec6:	28 17       	cp	r18, r24
    2ec8:	39 07       	cpc	r19, r25
    2eca:	4a 07       	cpc	r20, r26
    2ecc:	5b 07       	cpc	r21, r27
    2ece:	10 f4       	brcc	.+4      	; 0x2ed4 <strtoul+0x1a0>
    2ed0:	6f ef       	ldi	r22, 0xFF	; 255
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <strtoul+0x1a2>
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	31 96       	adiw	r30, 0x01	; 1
    2ed8:	d1 01       	movw	r26, r2
    2eda:	6c 90       	ld	r6, X
    2edc:	c6 cf       	rjmp	.-116    	; 0x2e6a <strtoul+0x136>
    2ede:	01 15       	cp	r16, r1
    2ee0:	11 05       	cpc	r17, r1
    2ee2:	51 f0       	breq	.+20     	; 0x2ef8 <strtoul+0x1c4>
    2ee4:	66 23       	and	r22, r22
    2ee6:	11 f0       	breq	.+4      	; 0x2eec <strtoul+0x1b8>
    2ee8:	31 97       	sbiw	r30, 0x01	; 1
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <strtoul+0x1be>
    2eec:	71 fe       	sbrs	r7, 1
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <strtoul+0x1c4>
    2ef0:	32 97       	sbiw	r30, 0x02	; 2
    2ef2:	d8 01       	movw	r26, r16
    2ef4:	ed 93       	st	X+, r30
    2ef6:	fc 93       	st	X, r31
    2ef8:	70 fe       	sbrs	r7, 0
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <strtoul+0x1d6>
    2efc:	50 95       	com	r21
    2efe:	40 95       	com	r20
    2f00:	30 95       	com	r19
    2f02:	21 95       	neg	r18
    2f04:	3f 4f       	sbci	r19, 0xFF	; 255
    2f06:	4f 4f       	sbci	r20, 0xFF	; 255
    2f08:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0a:	67 ff       	sbrs	r22, 7
    2f0c:	10 c0       	rjmp	.+32     	; 0x2f2e <strtoul+0x1fa>
    2f0e:	82 e2       	ldi	r24, 0x22	; 34
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	90 93 a3 03 	sts	0x03A3, r25
    2f16:	80 93 a2 03 	sts	0x03A2, r24
    2f1a:	6f ef       	ldi	r22, 0xFF	; 255
    2f1c:	7f ef       	ldi	r23, 0xFF	; 255
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	9f ef       	ldi	r25, 0xFF	; 255
    2f22:	07 c0       	rjmp	.+14     	; 0x2f32 <strtoul+0x1fe>
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	70 e0       	ldi	r23, 0x00	; 0
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <strtoul+0x1fe>
    2f2e:	b9 01       	movw	r22, r18
    2f30:	ca 01       	movw	r24, r20
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	ff 90       	pop	r15
    2f3c:	ef 90       	pop	r14
    2f3e:	df 90       	pop	r13
    2f40:	cf 90       	pop	r12
    2f42:	bf 90       	pop	r11
    2f44:	af 90       	pop	r10
    2f46:	9f 90       	pop	r9
    2f48:	8f 90       	pop	r8
    2f4a:	7f 90       	pop	r7
    2f4c:	6f 90       	pop	r6
    2f4e:	5f 90       	pop	r5
    2f50:	3f 90       	pop	r3
    2f52:	2f 90       	pop	r2
    2f54:	08 95       	ret

00002f56 <isspace>:
    2f56:	91 11       	cpse	r25, r1
    2f58:	b9 c4       	rjmp	.+2418   	; 0x38cc <__ctype_isfalse>
    2f5a:	80 32       	cpi	r24, 0x20	; 32
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <isspace+0xe>
    2f5e:	89 50       	subi	r24, 0x09	; 9
    2f60:	85 50       	subi	r24, 0x05	; 5
    2f62:	d0 f7       	brcc	.-12     	; 0x2f58 <isspace+0x2>
    2f64:	08 95       	ret

00002f66 <memcpy_P>:
    2f66:	fb 01       	movw	r30, r22
    2f68:	dc 01       	movw	r26, r24
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <memcpy_P+0xa>
    2f6c:	05 90       	lpm	r0, Z+
    2f6e:	0d 92       	st	X+, r0
    2f70:	41 50       	subi	r20, 0x01	; 1
    2f72:	50 40       	sbci	r21, 0x00	; 0
    2f74:	d8 f7       	brcc	.-10     	; 0x2f6c <memcpy_P+0x6>
    2f76:	08 95       	ret

00002f78 <__strlen_P>:
    2f78:	fc 01       	movw	r30, r24
    2f7a:	05 90       	lpm	r0, Z+
    2f7c:	00 20       	and	r0, r0
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <__strlen_P+0x2>
    2f80:	80 95       	com	r24
    2f82:	90 95       	com	r25
    2f84:	8e 0f       	add	r24, r30
    2f86:	9f 1f       	adc	r25, r31
    2f88:	08 95       	ret

00002f8a <strncasecmp_P>:
    2f8a:	fb 01       	movw	r30, r22
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	41 50       	subi	r20, 0x01	; 1
    2f90:	50 40       	sbci	r21, 0x00	; 0
    2f92:	88 f0       	brcs	.+34     	; 0x2fb6 <strncasecmp_P+0x2c>
    2f94:	8d 91       	ld	r24, X+
    2f96:	81 34       	cpi	r24, 0x41	; 65
    2f98:	1c f0       	brlt	.+6      	; 0x2fa0 <strncasecmp_P+0x16>
    2f9a:	8b 35       	cpi	r24, 0x5B	; 91
    2f9c:	0c f4       	brge	.+2      	; 0x2fa0 <strncasecmp_P+0x16>
    2f9e:	80 5e       	subi	r24, 0xE0	; 224
    2fa0:	65 91       	lpm	r22, Z+
    2fa2:	61 34       	cpi	r22, 0x41	; 65
    2fa4:	1c f0       	brlt	.+6      	; 0x2fac <strncasecmp_P+0x22>
    2fa6:	6b 35       	cpi	r22, 0x5B	; 91
    2fa8:	0c f4       	brge	.+2      	; 0x2fac <strncasecmp_P+0x22>
    2faa:	60 5e       	subi	r22, 0xE0	; 224
    2fac:	86 1b       	sub	r24, r22
    2fae:	61 11       	cpse	r22, r1
    2fb0:	71 f3       	breq	.-36     	; 0x2f8e <strncasecmp_P+0x4>
    2fb2:	99 0b       	sbc	r25, r25
    2fb4:	08 95       	ret
    2fb6:	88 1b       	sub	r24, r24
    2fb8:	fc cf       	rjmp	.-8      	; 0x2fb2 <strncasecmp_P+0x28>

00002fba <fprintf_P>:
    2fba:	a0 e0       	ldi	r26, 0x00	; 0
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e2 ee       	ldi	r30, 0xE2	; 226
    2fc0:	f7 e1       	ldi	r31, 0x17	; 23
    2fc2:	54 c5       	rjmp	.+2728   	; 0x3a6c <__prologue_saves__+0x1c>
    2fc4:	0f 81       	ldd	r16, Y+7	; 0x07
    2fc6:	18 85       	ldd	r17, Y+8	; 0x08
    2fc8:	f8 01       	movw	r30, r16
    2fca:	83 81       	ldd	r24, Z+3	; 0x03
    2fcc:	88 60       	ori	r24, 0x08	; 8
    2fce:	83 83       	std	Z+3, r24	; 0x03
    2fd0:	ae 01       	movw	r20, r28
    2fd2:	45 5f       	subi	r20, 0xF5	; 245
    2fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd6:	69 85       	ldd	r22, Y+9	; 0x09
    2fd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fda:	c8 01       	movw	r24, r16
    2fdc:	2e d0       	rcall	.+92     	; 0x303a <vfprintf>
    2fde:	f8 01       	movw	r30, r16
    2fe0:	23 81       	ldd	r18, Z+3	; 0x03
    2fe2:	27 7f       	andi	r18, 0xF7	; 247
    2fe4:	23 83       	std	Z+3, r18	; 0x03
    2fe6:	e4 e0       	ldi	r30, 0x04	; 4
    2fe8:	5d c5       	rjmp	.+2746   	; 0x3aa4 <__epilogue_restores__+0x1c>

00002fea <__cmpsf2>:
    2fea:	03 d0       	rcall	.+6      	; 0x2ff2 <__fp_cmp>
    2fec:	08 f4       	brcc	.+2      	; 0x2ff0 <__cmpsf2+0x6>
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	08 95       	ret

00002ff2 <__fp_cmp>:
    2ff2:	99 0f       	add	r25, r25
    2ff4:	00 08       	sbc	r0, r0
    2ff6:	55 0f       	add	r21, r21
    2ff8:	aa 0b       	sbc	r26, r26
    2ffa:	e0 e8       	ldi	r30, 0x80	; 128
    2ffc:	fe ef       	ldi	r31, 0xFE	; 254
    2ffe:	16 16       	cp	r1, r22
    3000:	17 06       	cpc	r1, r23
    3002:	e8 07       	cpc	r30, r24
    3004:	f9 07       	cpc	r31, r25
    3006:	c0 f0       	brcs	.+48     	; 0x3038 <__fp_cmp+0x46>
    3008:	12 16       	cp	r1, r18
    300a:	13 06       	cpc	r1, r19
    300c:	e4 07       	cpc	r30, r20
    300e:	f5 07       	cpc	r31, r21
    3010:	98 f0       	brcs	.+38     	; 0x3038 <__fp_cmp+0x46>
    3012:	62 1b       	sub	r22, r18
    3014:	73 0b       	sbc	r23, r19
    3016:	84 0b       	sbc	r24, r20
    3018:	95 0b       	sbc	r25, r21
    301a:	39 f4       	brne	.+14     	; 0x302a <__fp_cmp+0x38>
    301c:	0a 26       	eor	r0, r26
    301e:	61 f0       	breq	.+24     	; 0x3038 <__fp_cmp+0x46>
    3020:	23 2b       	or	r18, r19
    3022:	24 2b       	or	r18, r20
    3024:	25 2b       	or	r18, r21
    3026:	21 f4       	brne	.+8      	; 0x3030 <__fp_cmp+0x3e>
    3028:	08 95       	ret
    302a:	0a 26       	eor	r0, r26
    302c:	09 f4       	brne	.+2      	; 0x3030 <__fp_cmp+0x3e>
    302e:	a1 40       	sbci	r26, 0x01	; 1
    3030:	a6 95       	lsr	r26
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	81 1d       	adc	r24, r1
    3036:	81 1d       	adc	r24, r1
    3038:	08 95       	ret

0000303a <vfprintf>:
    303a:	ac e0       	ldi	r26, 0x0C	; 12
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e2 e2       	ldi	r30, 0x22	; 34
    3040:	f8 e1       	ldi	r31, 0x18	; 24
    3042:	06 c5       	rjmp	.+2572   	; 0x3a50 <__prologue_saves__>
    3044:	7c 01       	movw	r14, r24
    3046:	6b 01       	movw	r12, r22
    3048:	8a 01       	movw	r16, r20
    304a:	fc 01       	movw	r30, r24
    304c:	17 82       	std	Z+7, r1	; 0x07
    304e:	16 82       	std	Z+6, r1	; 0x06
    3050:	83 81       	ldd	r24, Z+3	; 0x03
    3052:	81 ff       	sbrs	r24, 1
    3054:	b0 c1       	rjmp	.+864    	; 0x33b6 <vfprintf+0x37c>
    3056:	ce 01       	movw	r24, r28
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	4c 01       	movw	r8, r24
    305c:	f7 01       	movw	r30, r14
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	f6 01       	movw	r30, r12
    3062:	93 fd       	sbrc	r25, 3
    3064:	85 91       	lpm	r24, Z+
    3066:	93 ff       	sbrs	r25, 3
    3068:	81 91       	ld	r24, Z+
    306a:	6f 01       	movw	r12, r30
    306c:	88 23       	and	r24, r24
    306e:	09 f4       	brne	.+2      	; 0x3072 <vfprintf+0x38>
    3070:	9e c1       	rjmp	.+828    	; 0x33ae <vfprintf+0x374>
    3072:	85 32       	cpi	r24, 0x25	; 37
    3074:	39 f4       	brne	.+14     	; 0x3084 <vfprintf+0x4a>
    3076:	93 fd       	sbrc	r25, 3
    3078:	85 91       	lpm	r24, Z+
    307a:	93 ff       	sbrs	r25, 3
    307c:	81 91       	ld	r24, Z+
    307e:	6f 01       	movw	r12, r30
    3080:	85 32       	cpi	r24, 0x25	; 37
    3082:	21 f4       	brne	.+8      	; 0x308c <vfprintf+0x52>
    3084:	b7 01       	movw	r22, r14
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	3a d4       	rcall	.+2164   	; 0x38fe <fputc>
    308a:	e8 cf       	rjmp	.-48     	; 0x305c <vfprintf+0x22>
    308c:	51 2c       	mov	r5, r1
    308e:	31 2c       	mov	r3, r1
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	20 32       	cpi	r18, 0x20	; 32
    3094:	a0 f4       	brcc	.+40     	; 0x30be <vfprintf+0x84>
    3096:	8b 32       	cpi	r24, 0x2B	; 43
    3098:	69 f0       	breq	.+26     	; 0x30b4 <vfprintf+0x7a>
    309a:	30 f4       	brcc	.+12     	; 0x30a8 <vfprintf+0x6e>
    309c:	80 32       	cpi	r24, 0x20	; 32
    309e:	59 f0       	breq	.+22     	; 0x30b6 <vfprintf+0x7c>
    30a0:	83 32       	cpi	r24, 0x23	; 35
    30a2:	69 f4       	brne	.+26     	; 0x30be <vfprintf+0x84>
    30a4:	20 61       	ori	r18, 0x10	; 16
    30a6:	2c c0       	rjmp	.+88     	; 0x3100 <vfprintf+0xc6>
    30a8:	8d 32       	cpi	r24, 0x2D	; 45
    30aa:	39 f0       	breq	.+14     	; 0x30ba <vfprintf+0x80>
    30ac:	80 33       	cpi	r24, 0x30	; 48
    30ae:	39 f4       	brne	.+14     	; 0x30be <vfprintf+0x84>
    30b0:	21 60       	ori	r18, 0x01	; 1
    30b2:	26 c0       	rjmp	.+76     	; 0x3100 <vfprintf+0xc6>
    30b4:	22 60       	ori	r18, 0x02	; 2
    30b6:	24 60       	ori	r18, 0x04	; 4
    30b8:	23 c0       	rjmp	.+70     	; 0x3100 <vfprintf+0xc6>
    30ba:	28 60       	ori	r18, 0x08	; 8
    30bc:	21 c0       	rjmp	.+66     	; 0x3100 <vfprintf+0xc6>
    30be:	27 fd       	sbrc	r18, 7
    30c0:	27 c0       	rjmp	.+78     	; 0x3110 <vfprintf+0xd6>
    30c2:	30 ed       	ldi	r19, 0xD0	; 208
    30c4:	38 0f       	add	r19, r24
    30c6:	3a 30       	cpi	r19, 0x0A	; 10
    30c8:	78 f4       	brcc	.+30     	; 0x30e8 <vfprintf+0xae>
    30ca:	26 ff       	sbrs	r18, 6
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <vfprintf+0xa0>
    30ce:	fa e0       	ldi	r31, 0x0A	; 10
    30d0:	5f 9e       	mul	r5, r31
    30d2:	30 0d       	add	r19, r0
    30d4:	11 24       	eor	r1, r1
    30d6:	53 2e       	mov	r5, r19
    30d8:	13 c0       	rjmp	.+38     	; 0x3100 <vfprintf+0xc6>
    30da:	8a e0       	ldi	r24, 0x0A	; 10
    30dc:	38 9e       	mul	r3, r24
    30de:	30 0d       	add	r19, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	33 2e       	mov	r3, r19
    30e4:	20 62       	ori	r18, 0x20	; 32
    30e6:	0c c0       	rjmp	.+24     	; 0x3100 <vfprintf+0xc6>
    30e8:	8e 32       	cpi	r24, 0x2E	; 46
    30ea:	21 f4       	brne	.+8      	; 0x30f4 <vfprintf+0xba>
    30ec:	26 fd       	sbrc	r18, 6
    30ee:	5f c1       	rjmp	.+702    	; 0x33ae <vfprintf+0x374>
    30f0:	20 64       	ori	r18, 0x40	; 64
    30f2:	06 c0       	rjmp	.+12     	; 0x3100 <vfprintf+0xc6>
    30f4:	8c 36       	cpi	r24, 0x6C	; 108
    30f6:	11 f4       	brne	.+4      	; 0x30fc <vfprintf+0xc2>
    30f8:	20 68       	ori	r18, 0x80	; 128
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <vfprintf+0xc6>
    30fc:	88 36       	cpi	r24, 0x68	; 104
    30fe:	41 f4       	brne	.+16     	; 0x3110 <vfprintf+0xd6>
    3100:	f6 01       	movw	r30, r12
    3102:	93 fd       	sbrc	r25, 3
    3104:	85 91       	lpm	r24, Z+
    3106:	93 ff       	sbrs	r25, 3
    3108:	81 91       	ld	r24, Z+
    310a:	6f 01       	movw	r12, r30
    310c:	81 11       	cpse	r24, r1
    310e:	c1 cf       	rjmp	.-126    	; 0x3092 <vfprintf+0x58>
    3110:	98 2f       	mov	r25, r24
    3112:	9f 7d       	andi	r25, 0xDF	; 223
    3114:	95 54       	subi	r25, 0x45	; 69
    3116:	93 30       	cpi	r25, 0x03	; 3
    3118:	28 f4       	brcc	.+10     	; 0x3124 <vfprintf+0xea>
    311a:	0c 5f       	subi	r16, 0xFC	; 252
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
    311e:	ff e3       	ldi	r31, 0x3F	; 63
    3120:	f9 83       	std	Y+1, r31	; 0x01
    3122:	0d c0       	rjmp	.+26     	; 0x313e <vfprintf+0x104>
    3124:	83 36       	cpi	r24, 0x63	; 99
    3126:	31 f0       	breq	.+12     	; 0x3134 <vfprintf+0xfa>
    3128:	83 37       	cpi	r24, 0x73	; 115
    312a:	71 f0       	breq	.+28     	; 0x3148 <vfprintf+0x10e>
    312c:	83 35       	cpi	r24, 0x53	; 83
    312e:	09 f0       	breq	.+2      	; 0x3132 <vfprintf+0xf8>
    3130:	57 c0       	rjmp	.+174    	; 0x31e0 <vfprintf+0x1a6>
    3132:	21 c0       	rjmp	.+66     	; 0x3176 <vfprintf+0x13c>
    3134:	f8 01       	movw	r30, r16
    3136:	80 81       	ld	r24, Z
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	0e 5f       	subi	r16, 0xFE	; 254
    313c:	1f 4f       	sbci	r17, 0xFF	; 255
    313e:	44 24       	eor	r4, r4
    3140:	43 94       	inc	r4
    3142:	51 2c       	mov	r5, r1
    3144:	54 01       	movw	r10, r8
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <vfprintf+0x136>
    3148:	38 01       	movw	r6, r16
    314a:	f2 e0       	ldi	r31, 0x02	; 2
    314c:	6f 0e       	add	r6, r31
    314e:	71 1c       	adc	r7, r1
    3150:	f8 01       	movw	r30, r16
    3152:	a0 80       	ld	r10, Z
    3154:	b1 80       	ldd	r11, Z+1	; 0x01
    3156:	26 ff       	sbrs	r18, 6
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <vfprintf+0x126>
    315a:	65 2d       	mov	r22, r5
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <vfprintf+0x12a>
    3160:	6f ef       	ldi	r22, 0xFF	; 255
    3162:	7f ef       	ldi	r23, 0xFF	; 255
    3164:	c5 01       	movw	r24, r10
    3166:	2c 87       	std	Y+12, r18	; 0x0c
    3168:	bf d3       	rcall	.+1918   	; 0x38e8 <strnlen>
    316a:	2c 01       	movw	r4, r24
    316c:	83 01       	movw	r16, r6
    316e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3170:	2f 77       	andi	r18, 0x7F	; 127
    3172:	22 2e       	mov	r2, r18
    3174:	16 c0       	rjmp	.+44     	; 0x31a2 <vfprintf+0x168>
    3176:	38 01       	movw	r6, r16
    3178:	f2 e0       	ldi	r31, 0x02	; 2
    317a:	6f 0e       	add	r6, r31
    317c:	71 1c       	adc	r7, r1
    317e:	f8 01       	movw	r30, r16
    3180:	a0 80       	ld	r10, Z
    3182:	b1 80       	ldd	r11, Z+1	; 0x01
    3184:	26 ff       	sbrs	r18, 6
    3186:	03 c0       	rjmp	.+6      	; 0x318e <vfprintf+0x154>
    3188:	65 2d       	mov	r22, r5
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <vfprintf+0x158>
    318e:	6f ef       	ldi	r22, 0xFF	; 255
    3190:	7f ef       	ldi	r23, 0xFF	; 255
    3192:	c5 01       	movw	r24, r10
    3194:	2c 87       	std	Y+12, r18	; 0x0c
    3196:	9d d3       	rcall	.+1850   	; 0x38d2 <strnlen_P>
    3198:	2c 01       	movw	r4, r24
    319a:	2c 85       	ldd	r18, Y+12	; 0x0c
    319c:	20 68       	ori	r18, 0x80	; 128
    319e:	22 2e       	mov	r2, r18
    31a0:	83 01       	movw	r16, r6
    31a2:	23 fc       	sbrc	r2, 3
    31a4:	19 c0       	rjmp	.+50     	; 0x31d8 <vfprintf+0x19e>
    31a6:	83 2d       	mov	r24, r3
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	48 16       	cp	r4, r24
    31ac:	59 06       	cpc	r5, r25
    31ae:	a0 f4       	brcc	.+40     	; 0x31d8 <vfprintf+0x19e>
    31b0:	b7 01       	movw	r22, r14
    31b2:	80 e2       	ldi	r24, 0x20	; 32
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a3 d3       	rcall	.+1862   	; 0x38fe <fputc>
    31b8:	3a 94       	dec	r3
    31ba:	f5 cf       	rjmp	.-22     	; 0x31a6 <vfprintf+0x16c>
    31bc:	f5 01       	movw	r30, r10
    31be:	27 fc       	sbrc	r2, 7
    31c0:	85 91       	lpm	r24, Z+
    31c2:	27 fe       	sbrs	r2, 7
    31c4:	81 91       	ld	r24, Z+
    31c6:	5f 01       	movw	r10, r30
    31c8:	b7 01       	movw	r22, r14
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	98 d3       	rcall	.+1840   	; 0x38fe <fputc>
    31ce:	31 10       	cpse	r3, r1
    31d0:	3a 94       	dec	r3
    31d2:	f1 e0       	ldi	r31, 0x01	; 1
    31d4:	4f 1a       	sub	r4, r31
    31d6:	51 08       	sbc	r5, r1
    31d8:	41 14       	cp	r4, r1
    31da:	51 04       	cpc	r5, r1
    31dc:	79 f7       	brne	.-34     	; 0x31bc <vfprintf+0x182>
    31de:	de c0       	rjmp	.+444    	; 0x339c <vfprintf+0x362>
    31e0:	84 36       	cpi	r24, 0x64	; 100
    31e2:	11 f0       	breq	.+4      	; 0x31e8 <vfprintf+0x1ae>
    31e4:	89 36       	cpi	r24, 0x69	; 105
    31e6:	31 f5       	brne	.+76     	; 0x3234 <vfprintf+0x1fa>
    31e8:	f8 01       	movw	r30, r16
    31ea:	27 ff       	sbrs	r18, 7
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <vfprintf+0x1c2>
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	0c 5f       	subi	r16, 0xFC	; 252
    31f8:	1f 4f       	sbci	r17, 0xFF	; 255
    31fa:	08 c0       	rjmp	.+16     	; 0x320c <vfprintf+0x1d2>
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	88 27       	eor	r24, r24
    3202:	77 fd       	sbrc	r23, 7
    3204:	80 95       	com	r24
    3206:	98 2f       	mov	r25, r24
    3208:	0e 5f       	subi	r16, 0xFE	; 254
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
    320c:	2f 76       	andi	r18, 0x6F	; 111
    320e:	b2 2e       	mov	r11, r18
    3210:	97 ff       	sbrs	r25, 7
    3212:	09 c0       	rjmp	.+18     	; 0x3226 <vfprintf+0x1ec>
    3214:	90 95       	com	r25
    3216:	80 95       	com	r24
    3218:	70 95       	com	r23
    321a:	61 95       	neg	r22
    321c:	7f 4f       	sbci	r23, 0xFF	; 255
    321e:	8f 4f       	sbci	r24, 0xFF	; 255
    3220:	9f 4f       	sbci	r25, 0xFF	; 255
    3222:	20 68       	ori	r18, 0x80	; 128
    3224:	b2 2e       	mov	r11, r18
    3226:	2a e0       	ldi	r18, 0x0A	; 10
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	a4 01       	movw	r20, r8
    322c:	9a d3       	rcall	.+1844   	; 0x3962 <__ultoa_invert>
    322e:	a8 2e       	mov	r10, r24
    3230:	a8 18       	sub	r10, r8
    3232:	43 c0       	rjmp	.+134    	; 0x32ba <vfprintf+0x280>
    3234:	85 37       	cpi	r24, 0x75	; 117
    3236:	29 f4       	brne	.+10     	; 0x3242 <vfprintf+0x208>
    3238:	2f 7e       	andi	r18, 0xEF	; 239
    323a:	b2 2e       	mov	r11, r18
    323c:	2a e0       	ldi	r18, 0x0A	; 10
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	25 c0       	rjmp	.+74     	; 0x328c <vfprintf+0x252>
    3242:	f2 2f       	mov	r31, r18
    3244:	f9 7f       	andi	r31, 0xF9	; 249
    3246:	bf 2e       	mov	r11, r31
    3248:	8f 36       	cpi	r24, 0x6F	; 111
    324a:	c1 f0       	breq	.+48     	; 0x327c <vfprintf+0x242>
    324c:	18 f4       	brcc	.+6      	; 0x3254 <vfprintf+0x21a>
    324e:	88 35       	cpi	r24, 0x58	; 88
    3250:	79 f0       	breq	.+30     	; 0x3270 <vfprintf+0x236>
    3252:	ad c0       	rjmp	.+346    	; 0x33ae <vfprintf+0x374>
    3254:	80 37       	cpi	r24, 0x70	; 112
    3256:	19 f0       	breq	.+6      	; 0x325e <vfprintf+0x224>
    3258:	88 37       	cpi	r24, 0x78	; 120
    325a:	21 f0       	breq	.+8      	; 0x3264 <vfprintf+0x22a>
    325c:	a8 c0       	rjmp	.+336    	; 0x33ae <vfprintf+0x374>
    325e:	2f 2f       	mov	r18, r31
    3260:	20 61       	ori	r18, 0x10	; 16
    3262:	b2 2e       	mov	r11, r18
    3264:	b4 fe       	sbrs	r11, 4
    3266:	0d c0       	rjmp	.+26     	; 0x3282 <vfprintf+0x248>
    3268:	8b 2d       	mov	r24, r11
    326a:	84 60       	ori	r24, 0x04	; 4
    326c:	b8 2e       	mov	r11, r24
    326e:	09 c0       	rjmp	.+18     	; 0x3282 <vfprintf+0x248>
    3270:	24 ff       	sbrs	r18, 4
    3272:	0a c0       	rjmp	.+20     	; 0x3288 <vfprintf+0x24e>
    3274:	9f 2f       	mov	r25, r31
    3276:	96 60       	ori	r25, 0x06	; 6
    3278:	b9 2e       	mov	r11, r25
    327a:	06 c0       	rjmp	.+12     	; 0x3288 <vfprintf+0x24e>
    327c:	28 e0       	ldi	r18, 0x08	; 8
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	05 c0       	rjmp	.+10     	; 0x328c <vfprintf+0x252>
    3282:	20 e1       	ldi	r18, 0x10	; 16
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	02 c0       	rjmp	.+4      	; 0x328c <vfprintf+0x252>
    3288:	20 e1       	ldi	r18, 0x10	; 16
    328a:	32 e0       	ldi	r19, 0x02	; 2
    328c:	f8 01       	movw	r30, r16
    328e:	b7 fe       	sbrs	r11, 7
    3290:	07 c0       	rjmp	.+14     	; 0x32a0 <vfprintf+0x266>
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	0c 5f       	subi	r16, 0xFC	; 252
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	06 c0       	rjmp	.+12     	; 0x32ac <vfprintf+0x272>
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e 5f       	subi	r16, 0xFE	; 254
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	a4 01       	movw	r20, r8
    32ae:	59 d3       	rcall	.+1714   	; 0x3962 <__ultoa_invert>
    32b0:	a8 2e       	mov	r10, r24
    32b2:	a8 18       	sub	r10, r8
    32b4:	fb 2d       	mov	r31, r11
    32b6:	ff 77       	andi	r31, 0x7F	; 127
    32b8:	bf 2e       	mov	r11, r31
    32ba:	b6 fe       	sbrs	r11, 6
    32bc:	0b c0       	rjmp	.+22     	; 0x32d4 <vfprintf+0x29a>
    32be:	2b 2d       	mov	r18, r11
    32c0:	2e 7f       	andi	r18, 0xFE	; 254
    32c2:	a5 14       	cp	r10, r5
    32c4:	50 f4       	brcc	.+20     	; 0x32da <vfprintf+0x2a0>
    32c6:	b4 fe       	sbrs	r11, 4
    32c8:	0a c0       	rjmp	.+20     	; 0x32de <vfprintf+0x2a4>
    32ca:	b2 fc       	sbrc	r11, 2
    32cc:	08 c0       	rjmp	.+16     	; 0x32de <vfprintf+0x2a4>
    32ce:	2b 2d       	mov	r18, r11
    32d0:	2e 7e       	andi	r18, 0xEE	; 238
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <vfprintf+0x2a4>
    32d4:	7a 2c       	mov	r7, r10
    32d6:	2b 2d       	mov	r18, r11
    32d8:	03 c0       	rjmp	.+6      	; 0x32e0 <vfprintf+0x2a6>
    32da:	7a 2c       	mov	r7, r10
    32dc:	01 c0       	rjmp	.+2      	; 0x32e0 <vfprintf+0x2a6>
    32de:	75 2c       	mov	r7, r5
    32e0:	24 ff       	sbrs	r18, 4
    32e2:	0d c0       	rjmp	.+26     	; 0x32fe <vfprintf+0x2c4>
    32e4:	fe 01       	movw	r30, r28
    32e6:	ea 0d       	add	r30, r10
    32e8:	f1 1d       	adc	r31, r1
    32ea:	80 81       	ld	r24, Z
    32ec:	80 33       	cpi	r24, 0x30	; 48
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <vfprintf+0x2ba>
    32f0:	29 7e       	andi	r18, 0xE9	; 233
    32f2:	09 c0       	rjmp	.+18     	; 0x3306 <vfprintf+0x2cc>
    32f4:	22 ff       	sbrs	r18, 2
    32f6:	06 c0       	rjmp	.+12     	; 0x3304 <vfprintf+0x2ca>
    32f8:	73 94       	inc	r7
    32fa:	73 94       	inc	r7
    32fc:	04 c0       	rjmp	.+8      	; 0x3306 <vfprintf+0x2cc>
    32fe:	82 2f       	mov	r24, r18
    3300:	86 78       	andi	r24, 0x86	; 134
    3302:	09 f0       	breq	.+2      	; 0x3306 <vfprintf+0x2cc>
    3304:	73 94       	inc	r7
    3306:	23 fd       	sbrc	r18, 3
    3308:	12 c0       	rjmp	.+36     	; 0x332e <vfprintf+0x2f4>
    330a:	20 ff       	sbrs	r18, 0
    330c:	06 c0       	rjmp	.+12     	; 0x331a <vfprintf+0x2e0>
    330e:	5a 2c       	mov	r5, r10
    3310:	73 14       	cp	r7, r3
    3312:	18 f4       	brcc	.+6      	; 0x331a <vfprintf+0x2e0>
    3314:	53 0c       	add	r5, r3
    3316:	57 18       	sub	r5, r7
    3318:	73 2c       	mov	r7, r3
    331a:	73 14       	cp	r7, r3
    331c:	60 f4       	brcc	.+24     	; 0x3336 <vfprintf+0x2fc>
    331e:	b7 01       	movw	r22, r14
    3320:	80 e2       	ldi	r24, 0x20	; 32
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	2c 87       	std	Y+12, r18	; 0x0c
    3326:	eb d2       	rcall	.+1494   	; 0x38fe <fputc>
    3328:	73 94       	inc	r7
    332a:	2c 85       	ldd	r18, Y+12	; 0x0c
    332c:	f6 cf       	rjmp	.-20     	; 0x331a <vfprintf+0x2e0>
    332e:	73 14       	cp	r7, r3
    3330:	10 f4       	brcc	.+4      	; 0x3336 <vfprintf+0x2fc>
    3332:	37 18       	sub	r3, r7
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <vfprintf+0x2fe>
    3336:	31 2c       	mov	r3, r1
    3338:	24 ff       	sbrs	r18, 4
    333a:	11 c0       	rjmp	.+34     	; 0x335e <vfprintf+0x324>
    333c:	b7 01       	movw	r22, r14
    333e:	80 e3       	ldi	r24, 0x30	; 48
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	2c 87       	std	Y+12, r18	; 0x0c
    3344:	dc d2       	rcall	.+1464   	; 0x38fe <fputc>
    3346:	2c 85       	ldd	r18, Y+12	; 0x0c
    3348:	22 ff       	sbrs	r18, 2
    334a:	16 c0       	rjmp	.+44     	; 0x3378 <vfprintf+0x33e>
    334c:	21 ff       	sbrs	r18, 1
    334e:	03 c0       	rjmp	.+6      	; 0x3356 <vfprintf+0x31c>
    3350:	88 e5       	ldi	r24, 0x58	; 88
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	02 c0       	rjmp	.+4      	; 0x335a <vfprintf+0x320>
    3356:	88 e7       	ldi	r24, 0x78	; 120
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	b7 01       	movw	r22, r14
    335c:	0c c0       	rjmp	.+24     	; 0x3376 <vfprintf+0x33c>
    335e:	82 2f       	mov	r24, r18
    3360:	86 78       	andi	r24, 0x86	; 134
    3362:	51 f0       	breq	.+20     	; 0x3378 <vfprintf+0x33e>
    3364:	21 fd       	sbrc	r18, 1
    3366:	02 c0       	rjmp	.+4      	; 0x336c <vfprintf+0x332>
    3368:	80 e2       	ldi	r24, 0x20	; 32
    336a:	01 c0       	rjmp	.+2      	; 0x336e <vfprintf+0x334>
    336c:	8b e2       	ldi	r24, 0x2B	; 43
    336e:	27 fd       	sbrc	r18, 7
    3370:	8d e2       	ldi	r24, 0x2D	; 45
    3372:	b7 01       	movw	r22, r14
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	c3 d2       	rcall	.+1414   	; 0x38fe <fputc>
    3378:	a5 14       	cp	r10, r5
    337a:	30 f4       	brcc	.+12     	; 0x3388 <vfprintf+0x34e>
    337c:	b7 01       	movw	r22, r14
    337e:	80 e3       	ldi	r24, 0x30	; 48
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	bd d2       	rcall	.+1402   	; 0x38fe <fputc>
    3384:	5a 94       	dec	r5
    3386:	f8 cf       	rjmp	.-16     	; 0x3378 <vfprintf+0x33e>
    3388:	aa 94       	dec	r10
    338a:	f4 01       	movw	r30, r8
    338c:	ea 0d       	add	r30, r10
    338e:	f1 1d       	adc	r31, r1
    3390:	80 81       	ld	r24, Z
    3392:	b7 01       	movw	r22, r14
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	b3 d2       	rcall	.+1382   	; 0x38fe <fputc>
    3398:	a1 10       	cpse	r10, r1
    339a:	f6 cf       	rjmp	.-20     	; 0x3388 <vfprintf+0x34e>
    339c:	33 20       	and	r3, r3
    339e:	09 f4       	brne	.+2      	; 0x33a2 <vfprintf+0x368>
    33a0:	5d ce       	rjmp	.-838    	; 0x305c <vfprintf+0x22>
    33a2:	b7 01       	movw	r22, r14
    33a4:	80 e2       	ldi	r24, 0x20	; 32
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	aa d2       	rcall	.+1364   	; 0x38fe <fputc>
    33aa:	3a 94       	dec	r3
    33ac:	f7 cf       	rjmp	.-18     	; 0x339c <vfprintf+0x362>
    33ae:	f7 01       	movw	r30, r14
    33b0:	86 81       	ldd	r24, Z+6	; 0x06
    33b2:	97 81       	ldd	r25, Z+7	; 0x07
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <vfprintf+0x380>
    33b6:	8f ef       	ldi	r24, 0xFF	; 255
    33b8:	9f ef       	ldi	r25, 0xFF	; 255
    33ba:	2c 96       	adiw	r28, 0x0c	; 12
    33bc:	e2 e1       	ldi	r30, 0x12	; 18
    33be:	64 c3       	rjmp	.+1736   	; 0x3a88 <__epilogue_restores__>

000033c0 <__eerd_block_m32u4>:
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22

000033c4 <__eerd_blraw_m32u4>:
    33c4:	fc 01       	movw	r30, r24
    33c6:	f9 99       	sbic	0x1f, 1	; 31
    33c8:	fe cf       	rjmp	.-4      	; 0x33c6 <__eerd_blraw_m32u4+0x2>
    33ca:	06 c0       	rjmp	.+12     	; 0x33d8 <__eerd_blraw_m32u4+0x14>
    33cc:	f2 bd       	out	0x22, r31	; 34
    33ce:	e1 bd       	out	0x21, r30	; 33
    33d0:	f8 9a       	sbi	0x1f, 0	; 31
    33d2:	31 96       	adiw	r30, 0x01	; 1
    33d4:	00 b4       	in	r0, 0x20	; 32
    33d6:	0d 92       	st	X+, r0
    33d8:	41 50       	subi	r20, 0x01	; 1
    33da:	50 40       	sbci	r21, 0x00	; 0
    33dc:	b8 f7       	brcc	.-18     	; 0x33cc <__eerd_blraw_m32u4+0x8>
    33de:	08 95       	ret

000033e0 <__eeupd_block_m32u4>:
    33e0:	dc 01       	movw	r26, r24
    33e2:	a4 0f       	add	r26, r20
    33e4:	b5 1f       	adc	r27, r21
    33e6:	41 50       	subi	r20, 0x01	; 1
    33e8:	50 40       	sbci	r21, 0x00	; 0
    33ea:	40 f0       	brcs	.+16     	; 0x33fc <__eeupd_block_m32u4+0x1c>
    33ec:	cb 01       	movw	r24, r22
    33ee:	84 0f       	add	r24, r20
    33f0:	95 1f       	adc	r25, r21
    33f2:	2e 91       	ld	r18, -X
    33f4:	05 d0       	rcall	.+10     	; 0x3400 <__eeupd_r18_m32u4>
    33f6:	41 50       	subi	r20, 0x01	; 1
    33f8:	50 40       	sbci	r21, 0x00	; 0
    33fa:	d8 f7       	brcc	.-10     	; 0x33f2 <__eeupd_block_m32u4+0x12>
    33fc:	08 95       	ret

000033fe <__eeupd_byte_m32u4>:
    33fe:	26 2f       	mov	r18, r22

00003400 <__eeupd_r18_m32u4>:
    3400:	f9 99       	sbic	0x1f, 1	; 31
    3402:	fe cf       	rjmp	.-4      	; 0x3400 <__eeupd_r18_m32u4>
    3404:	92 bd       	out	0x22, r25	; 34
    3406:	81 bd       	out	0x21, r24	; 33
    3408:	f8 9a       	sbi	0x1f, 0	; 31
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	00 b4       	in	r0, 0x20	; 32
    340e:	02 16       	cp	r0, r18
    3410:	39 f0       	breq	.+14     	; 0x3420 <__eeupd_r18_m32u4+0x20>
    3412:	1f ba       	out	0x1f, r1	; 31
    3414:	20 bd       	out	0x20, r18	; 32
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	fa 9a       	sbi	0x1f, 2	; 31
    341c:	f9 9a       	sbi	0x1f, 1	; 31
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	08 95       	ret

00003422 <dtoa_prf>:
    3422:	6f 92       	push	r6
    3424:	7f 92       	push	r7
    3426:	9f 92       	push	r9
    3428:	af 92       	push	r10
    342a:	bf 92       	push	r11
    342c:	cf 92       	push	r12
    342e:	df 92       	push	r13
    3430:	ef 92       	push	r14
    3432:	ff 92       	push	r15
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	29 97       	sbiw	r28, 0x09	; 9
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	6a 01       	movw	r12, r20
    344e:	b2 2e       	mov	r11, r18
    3450:	10 2f       	mov	r17, r16
    3452:	0c 33       	cpi	r16, 0x3C	; 60
    3454:	20 f4       	brcc	.+8      	; 0x345e <dtoa_prf+0x3c>
    3456:	ff 24       	eor	r15, r15
    3458:	f3 94       	inc	r15
    345a:	f0 0e       	add	r15, r16
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <dtoa_prf+0x40>
    345e:	4c e3       	ldi	r20, 0x3C	; 60
    3460:	f4 2e       	mov	r15, r20
    3462:	0f 2d       	mov	r16, r15
    3464:	27 e0       	ldi	r18, 0x07	; 7
    3466:	ae 01       	movw	r20, r28
    3468:	4f 5f       	subi	r20, 0xFF	; 255
    346a:	5f 4f       	sbci	r21, 0xFF	; 255
    346c:	57 d1       	rcall	.+686    	; 0x371c <__ftoa_engine>
    346e:	79 81       	ldd	r23, Y+1	; 0x01
    3470:	27 2f       	mov	r18, r23
    3472:	29 70       	andi	r18, 0x09	; 9
    3474:	21 30       	cpi	r18, 0x01	; 1
    3476:	31 f0       	breq	.+12     	; 0x3484 <dtoa_prf+0x62>
    3478:	e1 fc       	sbrc	r14, 1
    347a:	06 c0       	rjmp	.+12     	; 0x3488 <dtoa_prf+0x66>
    347c:	e0 fc       	sbrc	r14, 0
    347e:	06 c0       	rjmp	.+12     	; 0x348c <dtoa_prf+0x6a>
    3480:	60 e0       	ldi	r22, 0x00	; 0
    3482:	05 c0       	rjmp	.+10     	; 0x348e <dtoa_prf+0x6c>
    3484:	6d e2       	ldi	r22, 0x2D	; 45
    3486:	03 c0       	rjmp	.+6      	; 0x348e <dtoa_prf+0x6c>
    3488:	6b e2       	ldi	r22, 0x2B	; 43
    348a:	01 c0       	rjmp	.+2      	; 0x348e <dtoa_prf+0x6c>
    348c:	60 e2       	ldi	r22, 0x20	; 32
    348e:	ae 2d       	mov	r26, r14
    3490:	a0 71       	andi	r26, 0x10	; 16
    3492:	73 ff       	sbrs	r23, 3
    3494:	36 c0       	rjmp	.+108    	; 0x3502 <dtoa_prf+0xe0>
    3496:	66 23       	and	r22, r22
    3498:	11 f0       	breq	.+4      	; 0x349e <dtoa_prf+0x7c>
    349a:	84 e0       	ldi	r24, 0x04	; 4
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <dtoa_prf+0x7e>
    349e:	83 e0       	ldi	r24, 0x03	; 3
    34a0:	8b 15       	cp	r24, r11
    34a2:	10 f4       	brcc	.+4      	; 0x34a8 <dtoa_prf+0x86>
    34a4:	b8 1a       	sub	r11, r24
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <dtoa_prf+0x88>
    34a8:	b1 2c       	mov	r11, r1
    34aa:	a1 11       	cpse	r26, r1
    34ac:	0b c0       	rjmp	.+22     	; 0x34c4 <dtoa_prf+0xa2>
    34ae:	f6 01       	movw	r30, r12
    34b0:	8b 2d       	mov	r24, r11
    34b2:	90 e2       	ldi	r25, 0x20	; 32
    34b4:	88 23       	and	r24, r24
    34b6:	19 f0       	breq	.+6      	; 0x34be <dtoa_prf+0x9c>
    34b8:	91 93       	st	Z+, r25
    34ba:	81 50       	subi	r24, 0x01	; 1
    34bc:	fb cf       	rjmp	.-10     	; 0x34b4 <dtoa_prf+0x92>
    34be:	cb 0c       	add	r12, r11
    34c0:	d1 1c       	adc	r13, r1
    34c2:	b1 2c       	mov	r11, r1
    34c4:	66 23       	and	r22, r22
    34c6:	31 f0       	breq	.+12     	; 0x34d4 <dtoa_prf+0xb2>
    34c8:	f6 01       	movw	r30, r12
    34ca:	60 83       	st	Z, r22
    34cc:	96 01       	movw	r18, r12
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	69 01       	movw	r12, r18
    34d4:	c6 01       	movw	r24, r12
    34d6:	03 96       	adiw	r24, 0x03	; 3
    34d8:	e2 fe       	sbrs	r14, 2
    34da:	05 c0       	rjmp	.+10     	; 0x34e6 <dtoa_prf+0xc4>
    34dc:	2e e4       	ldi	r18, 0x4E	; 78
    34de:	f6 01       	movw	r30, r12
    34e0:	20 83       	st	Z, r18
    34e2:	31 e4       	ldi	r19, 0x41	; 65
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <dtoa_prf+0xcc>
    34e6:	2e e6       	ldi	r18, 0x6E	; 110
    34e8:	f6 01       	movw	r30, r12
    34ea:	20 83       	st	Z, r18
    34ec:	31 e6       	ldi	r19, 0x61	; 97
    34ee:	31 83       	std	Z+1, r19	; 0x01
    34f0:	22 83       	std	Z+2, r18	; 0x02
    34f2:	fc 01       	movw	r30, r24
    34f4:	2b 2d       	mov	r18, r11
    34f6:	30 e2       	ldi	r19, 0x20	; 32
    34f8:	22 23       	and	r18, r18
    34fa:	f1 f1       	breq	.+124    	; 0x3578 <dtoa_prf+0x156>
    34fc:	31 93       	st	Z+, r19
    34fe:	21 50       	subi	r18, 0x01	; 1
    3500:	fb cf       	rjmp	.-10     	; 0x34f8 <dtoa_prf+0xd6>
    3502:	72 ff       	sbrs	r23, 2
    3504:	40 c0       	rjmp	.+128    	; 0x3586 <dtoa_prf+0x164>
    3506:	66 23       	and	r22, r22
    3508:	11 f0       	breq	.+4      	; 0x350e <dtoa_prf+0xec>
    350a:	84 e0       	ldi	r24, 0x04	; 4
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <dtoa_prf+0xee>
    350e:	83 e0       	ldi	r24, 0x03	; 3
    3510:	8b 15       	cp	r24, r11
    3512:	10 f4       	brcc	.+4      	; 0x3518 <dtoa_prf+0xf6>
    3514:	b8 1a       	sub	r11, r24
    3516:	01 c0       	rjmp	.+2      	; 0x351a <dtoa_prf+0xf8>
    3518:	b1 2c       	mov	r11, r1
    351a:	a1 11       	cpse	r26, r1
    351c:	0b c0       	rjmp	.+22     	; 0x3534 <dtoa_prf+0x112>
    351e:	f6 01       	movw	r30, r12
    3520:	8b 2d       	mov	r24, r11
    3522:	90 e2       	ldi	r25, 0x20	; 32
    3524:	88 23       	and	r24, r24
    3526:	19 f0       	breq	.+6      	; 0x352e <dtoa_prf+0x10c>
    3528:	91 93       	st	Z+, r25
    352a:	81 50       	subi	r24, 0x01	; 1
    352c:	fb cf       	rjmp	.-10     	; 0x3524 <dtoa_prf+0x102>
    352e:	cb 0c       	add	r12, r11
    3530:	d1 1c       	adc	r13, r1
    3532:	b1 2c       	mov	r11, r1
    3534:	66 23       	and	r22, r22
    3536:	31 f0       	breq	.+12     	; 0x3544 <dtoa_prf+0x122>
    3538:	f6 01       	movw	r30, r12
    353a:	60 83       	st	Z, r22
    353c:	96 01       	movw	r18, r12
    353e:	2f 5f       	subi	r18, 0xFF	; 255
    3540:	3f 4f       	sbci	r19, 0xFF	; 255
    3542:	69 01       	movw	r12, r18
    3544:	c6 01       	movw	r24, r12
    3546:	03 96       	adiw	r24, 0x03	; 3
    3548:	e2 fe       	sbrs	r14, 2
    354a:	07 c0       	rjmp	.+14     	; 0x355a <dtoa_prf+0x138>
    354c:	29 e4       	ldi	r18, 0x49	; 73
    354e:	f6 01       	movw	r30, r12
    3550:	20 83       	st	Z, r18
    3552:	2e e4       	ldi	r18, 0x4E	; 78
    3554:	21 83       	std	Z+1, r18	; 0x01
    3556:	26 e4       	ldi	r18, 0x46	; 70
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <dtoa_prf+0x144>
    355a:	29 e6       	ldi	r18, 0x69	; 105
    355c:	f6 01       	movw	r30, r12
    355e:	20 83       	st	Z, r18
    3560:	2e e6       	ldi	r18, 0x6E	; 110
    3562:	21 83       	std	Z+1, r18	; 0x01
    3564:	26 e6       	ldi	r18, 0x66	; 102
    3566:	22 83       	std	Z+2, r18	; 0x02
    3568:	fc 01       	movw	r30, r24
    356a:	2b 2d       	mov	r18, r11
    356c:	30 e2       	ldi	r19, 0x20	; 32
    356e:	22 23       	and	r18, r18
    3570:	19 f0       	breq	.+6      	; 0x3578 <dtoa_prf+0x156>
    3572:	31 93       	st	Z+, r19
    3574:	21 50       	subi	r18, 0x01	; 1
    3576:	fb cf       	rjmp	.-10     	; 0x356e <dtoa_prf+0x14c>
    3578:	fc 01       	movw	r30, r24
    357a:	eb 0d       	add	r30, r11
    357c:	f1 1d       	adc	r31, r1
    357e:	10 82       	st	Z, r1
    3580:	8e ef       	ldi	r24, 0xFE	; 254
    3582:	9f ef       	ldi	r25, 0xFF	; 255
    3584:	b7 c0       	rjmp	.+366    	; 0x36f4 <dtoa_prf+0x2d2>
    3586:	b1 e0       	ldi	r27, 0x01	; 1
    3588:	61 11       	cpse	r22, r1
    358a:	01 c0       	rjmp	.+2      	; 0x358e <dtoa_prf+0x16c>
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	4b 2f       	mov	r20, r27
    3590:	50 e0       	ldi	r21, 0x00	; 0
    3592:	18 16       	cp	r1, r24
    3594:	19 06       	cpc	r1, r25
    3596:	24 f4       	brge	.+8      	; 0x35a0 <dtoa_prf+0x17e>
    3598:	9c 01       	movw	r18, r24
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <dtoa_prf+0x182>
    35a0:	21 e0       	ldi	r18, 0x01	; 1
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	24 0f       	add	r18, r20
    35a6:	35 1f       	adc	r19, r21
    35a8:	11 23       	and	r17, r17
    35aa:	29 f0       	breq	.+10     	; 0x35b6 <dtoa_prf+0x194>
    35ac:	41 2f       	mov	r20, r17
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	4f 5f       	subi	r20, 0xFF	; 255
    35b2:	5f 4f       	sbci	r21, 0xFF	; 255
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <dtoa_prf+0x198>
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	42 0f       	add	r20, r18
    35bc:	53 1f       	adc	r21, r19
    35be:	2b 2d       	mov	r18, r11
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	42 17       	cp	r20, r18
    35c4:	53 07       	cpc	r21, r19
    35c6:	14 f4       	brge	.+4      	; 0x35cc <dtoa_prf+0x1aa>
    35c8:	b4 1a       	sub	r11, r20
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <dtoa_prf+0x1ac>
    35cc:	b1 2c       	mov	r11, r1
    35ce:	2e 2d       	mov	r18, r14
    35d0:	28 71       	andi	r18, 0x18	; 24
    35d2:	59 f4       	brne	.+22     	; 0x35ea <dtoa_prf+0x1c8>
    35d4:	f6 01       	movw	r30, r12
    35d6:	2b 2d       	mov	r18, r11
    35d8:	30 e2       	ldi	r19, 0x20	; 32
    35da:	22 23       	and	r18, r18
    35dc:	19 f0       	breq	.+6      	; 0x35e4 <dtoa_prf+0x1c2>
    35de:	31 93       	st	Z+, r19
    35e0:	21 50       	subi	r18, 0x01	; 1
    35e2:	fb cf       	rjmp	.-10     	; 0x35da <dtoa_prf+0x1b8>
    35e4:	cb 0c       	add	r12, r11
    35e6:	d1 1c       	adc	r13, r1
    35e8:	b1 2c       	mov	r11, r1
    35ea:	bb 23       	and	r27, r27
    35ec:	31 f0       	breq	.+12     	; 0x35fa <dtoa_prf+0x1d8>
    35ee:	f6 01       	movw	r30, r12
    35f0:	60 83       	st	Z, r22
    35f2:	96 01       	movw	r18, r12
    35f4:	2f 5f       	subi	r18, 0xFF	; 255
    35f6:	3f 4f       	sbci	r19, 0xFF	; 255
    35f8:	69 01       	movw	r12, r18
    35fa:	a1 11       	cpse	r26, r1
    35fc:	0b c0       	rjmp	.+22     	; 0x3614 <dtoa_prf+0x1f2>
    35fe:	f6 01       	movw	r30, r12
    3600:	2b 2d       	mov	r18, r11
    3602:	30 e3       	ldi	r19, 0x30	; 48
    3604:	22 23       	and	r18, r18
    3606:	19 f0       	breq	.+6      	; 0x360e <dtoa_prf+0x1ec>
    3608:	31 93       	st	Z+, r19
    360a:	21 50       	subi	r18, 0x01	; 1
    360c:	fb cf       	rjmp	.-10     	; 0x3604 <dtoa_prf+0x1e2>
    360e:	cb 0c       	add	r12, r11
    3610:	d1 1c       	adc	r13, r1
    3612:	b1 2c       	mov	r11, r1
    3614:	f8 0e       	add	r15, r24
    3616:	0a 81       	ldd	r16, Y+2	; 0x02
    3618:	37 2f       	mov	r19, r23
    361a:	30 71       	andi	r19, 0x10	; 16
    361c:	a3 2e       	mov	r10, r19
    361e:	74 ff       	sbrs	r23, 4
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <dtoa_prf+0x206>
    3622:	01 33       	cpi	r16, 0x31	; 49
    3624:	09 f4       	brne	.+2      	; 0x3628 <dtoa_prf+0x206>
    3626:	fa 94       	dec	r15
    3628:	1f 14       	cp	r1, r15
    362a:	2c f4       	brge	.+10     	; 0x3636 <dtoa_prf+0x214>
    362c:	2f 2d       	mov	r18, r15
    362e:	29 30       	cpi	r18, 0x09	; 9
    3630:	18 f0       	brcs	.+6      	; 0x3638 <dtoa_prf+0x216>
    3632:	28 e0       	ldi	r18, 0x08	; 8
    3634:	01 c0       	rjmp	.+2      	; 0x3638 <dtoa_prf+0x216>
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	68 2f       	mov	r22, r24
    363a:	39 2f       	mov	r19, r25
    363c:	97 ff       	sbrs	r25, 7
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <dtoa_prf+0x222>
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	46 2f       	mov	r20, r22
    3646:	53 2f       	mov	r21, r19
    3648:	61 2c       	mov	r6, r1
    364a:	71 2c       	mov	r7, r1
    364c:	3e e2       	ldi	r19, 0x2E	; 46
    364e:	93 2e       	mov	r9, r19
    3650:	bc 01       	movw	r22, r24
    3652:	62 1b       	sub	r22, r18
    3654:	71 09       	sbc	r23, r1
    3656:	9b 01       	movw	r18, r22
    3658:	dc 01       	movw	r26, r24
    365a:	a4 1b       	sub	r26, r20
    365c:	b5 0b       	sbc	r27, r21
    365e:	e1 e0       	ldi	r30, 0x01	; 1
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	ec 0f       	add	r30, r28
    3664:	fd 1f       	adc	r31, r29
    3666:	ae 0f       	add	r26, r30
    3668:	bf 1f       	adc	r27, r31
    366a:	e1 2e       	mov	r14, r17
    366c:	f1 2c       	mov	r15, r1
    366e:	f1 94       	neg	r15
    3670:	e1 94       	neg	r14
    3672:	f1 08       	sbc	r15, r1
    3674:	4f 3f       	cpi	r20, 0xFF	; 255
    3676:	ff ef       	ldi	r31, 0xFF	; 255
    3678:	5f 07       	cpc	r21, r31
    367a:	31 f4       	brne	.+12     	; 0x3688 <dtoa_prf+0x266>
    367c:	f6 01       	movw	r30, r12
    367e:	90 82       	st	Z, r9
    3680:	b6 01       	movw	r22, r12
    3682:	6f 5f       	subi	r22, 0xFF	; 255
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	6b 01       	movw	r12, r22
    3688:	84 17       	cp	r24, r20
    368a:	95 07       	cpc	r25, r21
    368c:	4c f0       	brlt	.+18     	; 0x36a0 <dtoa_prf+0x27e>
    368e:	24 17       	cp	r18, r20
    3690:	35 07       	cpc	r19, r21
    3692:	34 f4       	brge	.+12     	; 0x36a0 <dtoa_prf+0x27e>
    3694:	bd 01       	movw	r22, r26
    3696:	66 0d       	add	r22, r6
    3698:	77 1d       	adc	r23, r7
    369a:	fb 01       	movw	r30, r22
    369c:	11 81       	ldd	r17, Z+1	; 0x01
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <dtoa_prf+0x280>
    36a0:	10 e3       	ldi	r17, 0x30	; 48
    36a2:	41 50       	subi	r20, 0x01	; 1
    36a4:	51 09       	sbc	r21, r1
    36a6:	ff ef       	ldi	r31, 0xFF	; 255
    36a8:	6f 1a       	sub	r6, r31
    36aa:	7f 0a       	sbc	r7, r31
    36ac:	b6 01       	movw	r22, r12
    36ae:	6f 5f       	subi	r22, 0xFF	; 255
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	4e 15       	cp	r20, r14
    36b4:	5f 05       	cpc	r21, r15
    36b6:	24 f0       	brlt	.+8      	; 0x36c0 <dtoa_prf+0x29e>
    36b8:	f6 01       	movw	r30, r12
    36ba:	10 83       	st	Z, r17
    36bc:	6b 01       	movw	r12, r22
    36be:	da cf       	rjmp	.-76     	; 0x3674 <dtoa_prf+0x252>
    36c0:	48 17       	cp	r20, r24
    36c2:	59 07       	cpc	r21, r25
    36c4:	39 f4       	brne	.+14     	; 0x36d4 <dtoa_prf+0x2b2>
    36c6:	06 33       	cpi	r16, 0x36	; 54
    36c8:	20 f4       	brcc	.+8      	; 0x36d2 <dtoa_prf+0x2b0>
    36ca:	05 33       	cpi	r16, 0x35	; 53
    36cc:	19 f4       	brne	.+6      	; 0x36d4 <dtoa_prf+0x2b2>
    36ce:	a1 10       	cpse	r10, r1
    36d0:	01 c0       	rjmp	.+2      	; 0x36d4 <dtoa_prf+0x2b2>
    36d2:	11 e3       	ldi	r17, 0x31	; 49
    36d4:	f6 01       	movw	r30, r12
    36d6:	10 83       	st	Z, r17
    36d8:	fb 01       	movw	r30, r22
    36da:	8b 2d       	mov	r24, r11
    36dc:	90 e2       	ldi	r25, 0x20	; 32
    36de:	88 23       	and	r24, r24
    36e0:	19 f0       	breq	.+6      	; 0x36e8 <dtoa_prf+0x2c6>
    36e2:	91 93       	st	Z+, r25
    36e4:	81 50       	subi	r24, 0x01	; 1
    36e6:	fb cf       	rjmp	.-10     	; 0x36de <dtoa_prf+0x2bc>
    36e8:	fb 01       	movw	r30, r22
    36ea:	eb 0d       	add	r30, r11
    36ec:	f1 1d       	adc	r31, r1
    36ee:	10 82       	st	Z, r1
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	29 96       	adiw	r28, 0x09	; 9
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	bf 90       	pop	r11
    3712:	af 90       	pop	r10
    3714:	9f 90       	pop	r9
    3716:	7f 90       	pop	r7
    3718:	6f 90       	pop	r6
    371a:	08 95       	ret

0000371c <__ftoa_engine>:
    371c:	28 30       	cpi	r18, 0x08	; 8
    371e:	08 f0       	brcs	.+2      	; 0x3722 <__ftoa_engine+0x6>
    3720:	27 e0       	ldi	r18, 0x07	; 7
    3722:	33 27       	eor	r19, r19
    3724:	da 01       	movw	r26, r20
    3726:	99 0f       	add	r25, r25
    3728:	31 1d       	adc	r19, r1
    372a:	87 fd       	sbrc	r24, 7
    372c:	91 60       	ori	r25, 0x01	; 1
    372e:	00 96       	adiw	r24, 0x00	; 0
    3730:	61 05       	cpc	r22, r1
    3732:	71 05       	cpc	r23, r1
    3734:	39 f4       	brne	.+14     	; 0x3744 <__ftoa_engine+0x28>
    3736:	32 60       	ori	r19, 0x02	; 2
    3738:	2e 5f       	subi	r18, 0xFE	; 254
    373a:	3d 93       	st	X+, r19
    373c:	30 e3       	ldi	r19, 0x30	; 48
    373e:	2a 95       	dec	r18
    3740:	e1 f7       	brne	.-8      	; 0x373a <__ftoa_engine+0x1e>
    3742:	08 95       	ret
    3744:	9f 3f       	cpi	r25, 0xFF	; 255
    3746:	30 f0       	brcs	.+12     	; 0x3754 <__ftoa_engine+0x38>
    3748:	80 38       	cpi	r24, 0x80	; 128
    374a:	71 05       	cpc	r23, r1
    374c:	61 05       	cpc	r22, r1
    374e:	09 f0       	breq	.+2      	; 0x3752 <__ftoa_engine+0x36>
    3750:	3c 5f       	subi	r19, 0xFC	; 252
    3752:	3c 5f       	subi	r19, 0xFC	; 252
    3754:	3d 93       	st	X+, r19
    3756:	91 30       	cpi	r25, 0x01	; 1
    3758:	08 f0       	brcs	.+2      	; 0x375c <__ftoa_engine+0x40>
    375a:	80 68       	ori	r24, 0x80	; 128
    375c:	91 1d       	adc	r25, r1
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	1f 93       	push	r17
    3764:	0f 93       	push	r16
    3766:	ff 92       	push	r15
    3768:	ef 92       	push	r14
    376a:	19 2f       	mov	r17, r25
    376c:	98 7f       	andi	r25, 0xF8	; 248
    376e:	96 95       	lsr	r25
    3770:	e9 2f       	mov	r30, r25
    3772:	96 95       	lsr	r25
    3774:	96 95       	lsr	r25
    3776:	e9 0f       	add	r30, r25
    3778:	ff 27       	eor	r31, r31
    377a:	e4 53       	subi	r30, 0x34	; 52
    377c:	fb 4f       	sbci	r31, 0xFB	; 251
    377e:	99 27       	eor	r25, r25
    3780:	33 27       	eor	r19, r19
    3782:	ee 24       	eor	r14, r14
    3784:	ff 24       	eor	r15, r15
    3786:	a7 01       	movw	r20, r14
    3788:	e7 01       	movw	r28, r14
    378a:	05 90       	lpm	r0, Z+
    378c:	08 94       	sec
    378e:	07 94       	ror	r0
    3790:	28 f4       	brcc	.+10     	; 0x379c <__ftoa_engine+0x80>
    3792:	36 0f       	add	r19, r22
    3794:	e7 1e       	adc	r14, r23
    3796:	f8 1e       	adc	r15, r24
    3798:	49 1f       	adc	r20, r25
    379a:	51 1d       	adc	r21, r1
    379c:	66 0f       	add	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	06 94       	lsr	r0
    37a6:	a1 f7       	brne	.-24     	; 0x3790 <__ftoa_engine+0x74>
    37a8:	05 90       	lpm	r0, Z+
    37aa:	07 94       	ror	r0
    37ac:	28 f4       	brcc	.+10     	; 0x37b8 <__ftoa_engine+0x9c>
    37ae:	e7 0e       	add	r14, r23
    37b0:	f8 1e       	adc	r15, r24
    37b2:	49 1f       	adc	r20, r25
    37b4:	56 1f       	adc	r21, r22
    37b6:	c1 1d       	adc	r28, r1
    37b8:	77 0f       	add	r23, r23
    37ba:	88 1f       	adc	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	66 1f       	adc	r22, r22
    37c0:	06 94       	lsr	r0
    37c2:	a1 f7       	brne	.-24     	; 0x37ac <__ftoa_engine+0x90>
    37c4:	05 90       	lpm	r0, Z+
    37c6:	07 94       	ror	r0
    37c8:	28 f4       	brcc	.+10     	; 0x37d4 <__ftoa_engine+0xb8>
    37ca:	f8 0e       	add	r15, r24
    37cc:	49 1f       	adc	r20, r25
    37ce:	56 1f       	adc	r21, r22
    37d0:	c7 1f       	adc	r28, r23
    37d2:	d1 1d       	adc	r29, r1
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	66 1f       	adc	r22, r22
    37da:	77 1f       	adc	r23, r23
    37dc:	06 94       	lsr	r0
    37de:	a1 f7       	brne	.-24     	; 0x37c8 <__ftoa_engine+0xac>
    37e0:	05 90       	lpm	r0, Z+
    37e2:	07 94       	ror	r0
    37e4:	20 f4       	brcc	.+8      	; 0x37ee <__ftoa_engine+0xd2>
    37e6:	49 0f       	add	r20, r25
    37e8:	56 1f       	adc	r21, r22
    37ea:	c7 1f       	adc	r28, r23
    37ec:	d8 1f       	adc	r29, r24
    37ee:	99 0f       	add	r25, r25
    37f0:	66 1f       	adc	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	88 1f       	adc	r24, r24
    37f6:	06 94       	lsr	r0
    37f8:	a9 f7       	brne	.-22     	; 0x37e4 <__ftoa_engine+0xc8>
    37fa:	84 91       	lpm	r24, Z
    37fc:	10 95       	com	r17
    37fe:	17 70       	andi	r17, 0x07	; 7
    3800:	41 f0       	breq	.+16     	; 0x3812 <__ftoa_engine+0xf6>
    3802:	d6 95       	lsr	r29
    3804:	c7 95       	ror	r28
    3806:	57 95       	ror	r21
    3808:	47 95       	ror	r20
    380a:	f7 94       	ror	r15
    380c:	e7 94       	ror	r14
    380e:	1a 95       	dec	r17
    3810:	c1 f7       	brne	.-16     	; 0x3802 <__ftoa_engine+0xe6>
    3812:	e2 e7       	ldi	r30, 0x72	; 114
    3814:	f4 e0       	ldi	r31, 0x04	; 4
    3816:	68 94       	set
    3818:	15 90       	lpm	r1, Z+
    381a:	15 91       	lpm	r17, Z+
    381c:	35 91       	lpm	r19, Z+
    381e:	65 91       	lpm	r22, Z+
    3820:	95 91       	lpm	r25, Z+
    3822:	05 90       	lpm	r0, Z+
    3824:	7f e2       	ldi	r23, 0x2F	; 47
    3826:	73 95       	inc	r23
    3828:	e1 18       	sub	r14, r1
    382a:	f1 0a       	sbc	r15, r17
    382c:	43 0b       	sbc	r20, r19
    382e:	56 0b       	sbc	r21, r22
    3830:	c9 0b       	sbc	r28, r25
    3832:	d0 09       	sbc	r29, r0
    3834:	c0 f7       	brcc	.-16     	; 0x3826 <__ftoa_engine+0x10a>
    3836:	e1 0c       	add	r14, r1
    3838:	f1 1e       	adc	r15, r17
    383a:	43 1f       	adc	r20, r19
    383c:	56 1f       	adc	r21, r22
    383e:	c9 1f       	adc	r28, r25
    3840:	d0 1d       	adc	r29, r0
    3842:	7e f4       	brtc	.+30     	; 0x3862 <__ftoa_engine+0x146>
    3844:	70 33       	cpi	r23, 0x30	; 48
    3846:	11 f4       	brne	.+4      	; 0x384c <__ftoa_engine+0x130>
    3848:	8a 95       	dec	r24
    384a:	e6 cf       	rjmp	.-52     	; 0x3818 <__ftoa_engine+0xfc>
    384c:	e8 94       	clt
    384e:	01 50       	subi	r16, 0x01	; 1
    3850:	30 f0       	brcs	.+12     	; 0x385e <__ftoa_engine+0x142>
    3852:	08 0f       	add	r16, r24
    3854:	0a f4       	brpl	.+2      	; 0x3858 <__ftoa_engine+0x13c>
    3856:	00 27       	eor	r16, r16
    3858:	02 17       	cp	r16, r18
    385a:	08 f4       	brcc	.+2      	; 0x385e <__ftoa_engine+0x142>
    385c:	20 2f       	mov	r18, r16
    385e:	23 95       	inc	r18
    3860:	02 2f       	mov	r16, r18
    3862:	7a 33       	cpi	r23, 0x3A	; 58
    3864:	28 f0       	brcs	.+10     	; 0x3870 <__ftoa_engine+0x154>
    3866:	79 e3       	ldi	r23, 0x39	; 57
    3868:	7d 93       	st	X+, r23
    386a:	2a 95       	dec	r18
    386c:	e9 f7       	brne	.-6      	; 0x3868 <__ftoa_engine+0x14c>
    386e:	10 c0       	rjmp	.+32     	; 0x3890 <__ftoa_engine+0x174>
    3870:	7d 93       	st	X+, r23
    3872:	2a 95       	dec	r18
    3874:	89 f6       	brne	.-94     	; 0x3818 <__ftoa_engine+0xfc>
    3876:	06 94       	lsr	r0
    3878:	97 95       	ror	r25
    387a:	67 95       	ror	r22
    387c:	37 95       	ror	r19
    387e:	17 95       	ror	r17
    3880:	17 94       	ror	r1
    3882:	e1 18       	sub	r14, r1
    3884:	f1 0a       	sbc	r15, r17
    3886:	43 0b       	sbc	r20, r19
    3888:	56 0b       	sbc	r21, r22
    388a:	c9 0b       	sbc	r28, r25
    388c:	d0 09       	sbc	r29, r0
    388e:	98 f0       	brcs	.+38     	; 0x38b6 <__ftoa_engine+0x19a>
    3890:	23 95       	inc	r18
    3892:	7e 91       	ld	r23, -X
    3894:	73 95       	inc	r23
    3896:	7a 33       	cpi	r23, 0x3A	; 58
    3898:	08 f0       	brcs	.+2      	; 0x389c <__ftoa_engine+0x180>
    389a:	70 e3       	ldi	r23, 0x30	; 48
    389c:	7c 93       	st	X, r23
    389e:	20 13       	cpse	r18, r16
    38a0:	b8 f7       	brcc	.-18     	; 0x3890 <__ftoa_engine+0x174>
    38a2:	7e 91       	ld	r23, -X
    38a4:	70 61       	ori	r23, 0x10	; 16
    38a6:	7d 93       	st	X+, r23
    38a8:	30 f0       	brcs	.+12     	; 0x38b6 <__ftoa_engine+0x19a>
    38aa:	83 95       	inc	r24
    38ac:	71 e3       	ldi	r23, 0x31	; 49
    38ae:	7d 93       	st	X+, r23
    38b0:	70 e3       	ldi	r23, 0x30	; 48
    38b2:	2a 95       	dec	r18
    38b4:	e1 f7       	brne	.-8      	; 0x38ae <__ftoa_engine+0x192>
    38b6:	11 24       	eor	r1, r1
    38b8:	ef 90       	pop	r14
    38ba:	ff 90       	pop	r15
    38bc:	0f 91       	pop	r16
    38be:	1f 91       	pop	r17
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	99 27       	eor	r25, r25
    38c6:	87 fd       	sbrc	r24, 7
    38c8:	90 95       	com	r25
    38ca:	08 95       	ret

000038cc <__ctype_isfalse>:
    38cc:	99 27       	eor	r25, r25
    38ce:	88 27       	eor	r24, r24

000038d0 <__ctype_istrue>:
    38d0:	08 95       	ret

000038d2 <strnlen_P>:
    38d2:	fc 01       	movw	r30, r24
    38d4:	05 90       	lpm	r0, Z+
    38d6:	61 50       	subi	r22, 0x01	; 1
    38d8:	70 40       	sbci	r23, 0x00	; 0
    38da:	01 10       	cpse	r0, r1
    38dc:	d8 f7       	brcc	.-10     	; 0x38d4 <strnlen_P+0x2>
    38de:	80 95       	com	r24
    38e0:	90 95       	com	r25
    38e2:	8e 0f       	add	r24, r30
    38e4:	9f 1f       	adc	r25, r31
    38e6:	08 95       	ret

000038e8 <strnlen>:
    38e8:	fc 01       	movw	r30, r24
    38ea:	61 50       	subi	r22, 0x01	; 1
    38ec:	70 40       	sbci	r23, 0x00	; 0
    38ee:	01 90       	ld	r0, Z+
    38f0:	01 10       	cpse	r0, r1
    38f2:	d8 f7       	brcc	.-10     	; 0x38ea <strnlen+0x2>
    38f4:	80 95       	com	r24
    38f6:	90 95       	com	r25
    38f8:	8e 0f       	add	r24, r30
    38fa:	9f 1f       	adc	r25, r31
    38fc:	08 95       	ret

000038fe <fputc>:
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	18 2f       	mov	r17, r24
    3908:	09 2f       	mov	r16, r25
    390a:	eb 01       	movw	r28, r22
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	81 fd       	sbrc	r24, 1
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <fputc+0x1a>
    3912:	8f ef       	ldi	r24, 0xFF	; 255
    3914:	9f ef       	ldi	r25, 0xFF	; 255
    3916:	20 c0       	rjmp	.+64     	; 0x3958 <fputc+0x5a>
    3918:	82 ff       	sbrs	r24, 2
    391a:	10 c0       	rjmp	.+32     	; 0x393c <fputc+0x3e>
    391c:	4e 81       	ldd	r20, Y+6	; 0x06
    391e:	5f 81       	ldd	r21, Y+7	; 0x07
    3920:	2c 81       	ldd	r18, Y+4	; 0x04
    3922:	3d 81       	ldd	r19, Y+5	; 0x05
    3924:	42 17       	cp	r20, r18
    3926:	53 07       	cpc	r21, r19
    3928:	7c f4       	brge	.+30     	; 0x3948 <fputc+0x4a>
    392a:	e8 81       	ld	r30, Y
    392c:	f9 81       	ldd	r31, Y+1	; 0x01
    392e:	9f 01       	movw	r18, r30
    3930:	2f 5f       	subi	r18, 0xFF	; 255
    3932:	3f 4f       	sbci	r19, 0xFF	; 255
    3934:	39 83       	std	Y+1, r19	; 0x01
    3936:	28 83       	st	Y, r18
    3938:	10 83       	st	Z, r17
    393a:	06 c0       	rjmp	.+12     	; 0x3948 <fputc+0x4a>
    393c:	e8 85       	ldd	r30, Y+8	; 0x08
    393e:	f9 85       	ldd	r31, Y+9	; 0x09
    3940:	81 2f       	mov	r24, r17
    3942:	09 95       	icall
    3944:	89 2b       	or	r24, r25
    3946:	29 f7       	brne	.-54     	; 0x3912 <fputc+0x14>
    3948:	2e 81       	ldd	r18, Y+6	; 0x06
    394a:	3f 81       	ldd	r19, Y+7	; 0x07
    394c:	2f 5f       	subi	r18, 0xFF	; 255
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
    3950:	3f 83       	std	Y+7, r19	; 0x07
    3952:	2e 83       	std	Y+6, r18	; 0x06
    3954:	81 2f       	mov	r24, r17
    3956:	90 2f       	mov	r25, r16
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	08 95       	ret

00003962 <__ultoa_invert>:
    3962:	fa 01       	movw	r30, r20
    3964:	aa 27       	eor	r26, r26
    3966:	28 30       	cpi	r18, 0x08	; 8
    3968:	51 f1       	breq	.+84     	; 0x39be <__ultoa_invert+0x5c>
    396a:	20 31       	cpi	r18, 0x10	; 16
    396c:	81 f1       	breq	.+96     	; 0x39ce <__ultoa_invert+0x6c>
    396e:	e8 94       	clt
    3970:	6f 93       	push	r22
    3972:	6e 7f       	andi	r22, 0xFE	; 254
    3974:	6e 5f       	subi	r22, 0xFE	; 254
    3976:	7f 4f       	sbci	r23, 0xFF	; 255
    3978:	8f 4f       	sbci	r24, 0xFF	; 255
    397a:	9f 4f       	sbci	r25, 0xFF	; 255
    397c:	af 4f       	sbci	r26, 0xFF	; 255
    397e:	b1 e0       	ldi	r27, 0x01	; 1
    3980:	3e d0       	rcall	.+124    	; 0x39fe <__ultoa_invert+0x9c>
    3982:	b4 e0       	ldi	r27, 0x04	; 4
    3984:	3c d0       	rcall	.+120    	; 0x39fe <__ultoa_invert+0x9c>
    3986:	67 0f       	add	r22, r23
    3988:	78 1f       	adc	r23, r24
    398a:	89 1f       	adc	r24, r25
    398c:	9a 1f       	adc	r25, r26
    398e:	a1 1d       	adc	r26, r1
    3990:	68 0f       	add	r22, r24
    3992:	79 1f       	adc	r23, r25
    3994:	8a 1f       	adc	r24, r26
    3996:	91 1d       	adc	r25, r1
    3998:	a1 1d       	adc	r26, r1
    399a:	6a 0f       	add	r22, r26
    399c:	71 1d       	adc	r23, r1
    399e:	81 1d       	adc	r24, r1
    39a0:	91 1d       	adc	r25, r1
    39a2:	a1 1d       	adc	r26, r1
    39a4:	20 d0       	rcall	.+64     	; 0x39e6 <__ultoa_invert+0x84>
    39a6:	09 f4       	brne	.+2      	; 0x39aa <__ultoa_invert+0x48>
    39a8:	68 94       	set
    39aa:	3f 91       	pop	r19
    39ac:	2a e0       	ldi	r18, 0x0A	; 10
    39ae:	26 9f       	mul	r18, r22
    39b0:	11 24       	eor	r1, r1
    39b2:	30 19       	sub	r19, r0
    39b4:	30 5d       	subi	r19, 0xD0	; 208
    39b6:	31 93       	st	Z+, r19
    39b8:	de f6       	brtc	.-74     	; 0x3970 <__ultoa_invert+0xe>
    39ba:	cf 01       	movw	r24, r30
    39bc:	08 95       	ret
    39be:	46 2f       	mov	r20, r22
    39c0:	47 70       	andi	r20, 0x07	; 7
    39c2:	40 5d       	subi	r20, 0xD0	; 208
    39c4:	41 93       	st	Z+, r20
    39c6:	b3 e0       	ldi	r27, 0x03	; 3
    39c8:	0f d0       	rcall	.+30     	; 0x39e8 <__ultoa_invert+0x86>
    39ca:	c9 f7       	brne	.-14     	; 0x39be <__ultoa_invert+0x5c>
    39cc:	f6 cf       	rjmp	.-20     	; 0x39ba <__ultoa_invert+0x58>
    39ce:	46 2f       	mov	r20, r22
    39d0:	4f 70       	andi	r20, 0x0F	; 15
    39d2:	40 5d       	subi	r20, 0xD0	; 208
    39d4:	4a 33       	cpi	r20, 0x3A	; 58
    39d6:	18 f0       	brcs	.+6      	; 0x39de <__ultoa_invert+0x7c>
    39d8:	49 5d       	subi	r20, 0xD9	; 217
    39da:	31 fd       	sbrc	r19, 1
    39dc:	40 52       	subi	r20, 0x20	; 32
    39de:	41 93       	st	Z+, r20
    39e0:	02 d0       	rcall	.+4      	; 0x39e6 <__ultoa_invert+0x84>
    39e2:	a9 f7       	brne	.-22     	; 0x39ce <__ultoa_invert+0x6c>
    39e4:	ea cf       	rjmp	.-44     	; 0x39ba <__ultoa_invert+0x58>
    39e6:	b4 e0       	ldi	r27, 0x04	; 4
    39e8:	a6 95       	lsr	r26
    39ea:	97 95       	ror	r25
    39ec:	87 95       	ror	r24
    39ee:	77 95       	ror	r23
    39f0:	67 95       	ror	r22
    39f2:	ba 95       	dec	r27
    39f4:	c9 f7       	brne	.-14     	; 0x39e8 <__ultoa_invert+0x86>
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	61 05       	cpc	r22, r1
    39fa:	71 05       	cpc	r23, r1
    39fc:	08 95       	ret
    39fe:	9b 01       	movw	r18, r22
    3a00:	ac 01       	movw	r20, r24
    3a02:	0a 2e       	mov	r0, r26
    3a04:	06 94       	lsr	r0
    3a06:	57 95       	ror	r21
    3a08:	47 95       	ror	r20
    3a0a:	37 95       	ror	r19
    3a0c:	27 95       	ror	r18
    3a0e:	ba 95       	dec	r27
    3a10:	c9 f7       	brne	.-14     	; 0x3a04 <__ultoa_invert+0xa2>
    3a12:	62 0f       	add	r22, r18
    3a14:	73 1f       	adc	r23, r19
    3a16:	84 1f       	adc	r24, r20
    3a18:	95 1f       	adc	r25, r21
    3a1a:	a0 1d       	adc	r26, r0
    3a1c:	08 95       	ret

00003a1e <__mulsi3>:
    3a1e:	db 01       	movw	r26, r22
    3a20:	8f 93       	push	r24
    3a22:	9f 93       	push	r25
    3a24:	0b d0       	rcall	.+22     	; 0x3a3c <__muluhisi3>
    3a26:	bf 91       	pop	r27
    3a28:	af 91       	pop	r26
    3a2a:	a2 9f       	mul	r26, r18
    3a2c:	80 0d       	add	r24, r0
    3a2e:	91 1d       	adc	r25, r1
    3a30:	a3 9f       	mul	r26, r19
    3a32:	90 0d       	add	r25, r0
    3a34:	b2 9f       	mul	r27, r18
    3a36:	90 0d       	add	r25, r0
    3a38:	11 24       	eor	r1, r1
    3a3a:	08 95       	ret

00003a3c <__muluhisi3>:
    3a3c:	40 d0       	rcall	.+128    	; 0x3abe <__umulhisi3>
    3a3e:	a5 9f       	mul	r26, r21
    3a40:	90 0d       	add	r25, r0
    3a42:	b4 9f       	mul	r27, r20
    3a44:	90 0d       	add	r25, r0
    3a46:	a4 9f       	mul	r26, r20
    3a48:	80 0d       	add	r24, r0
    3a4a:	91 1d       	adc	r25, r1
    3a4c:	11 24       	eor	r1, r1
    3a4e:	08 95       	ret

00003a50 <__prologue_saves__>:
    3a50:	2f 92       	push	r2
    3a52:	3f 92       	push	r3
    3a54:	4f 92       	push	r4
    3a56:	5f 92       	push	r5
    3a58:	6f 92       	push	r6
    3a5a:	7f 92       	push	r7
    3a5c:	8f 92       	push	r8
    3a5e:	9f 92       	push	r9
    3a60:	af 92       	push	r10
    3a62:	bf 92       	push	r11
    3a64:	cf 92       	push	r12
    3a66:	df 92       	push	r13
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	ca 1b       	sub	r28, r26
    3a7a:	db 0b       	sbc	r29, r27
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	09 94       	ijmp

00003a88 <__epilogue_restores__>:
    3a88:	2a 88       	ldd	r2, Y+18	; 0x12
    3a8a:	39 88       	ldd	r3, Y+17	; 0x11
    3a8c:	48 88       	ldd	r4, Y+16	; 0x10
    3a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a9e:	df 80       	ldd	r13, Y+7	; 0x07
    3aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    3aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    3aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    3aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    3aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    3aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    3aac:	ce 0f       	add	r28, r30
    3aae:	d1 1d       	adc	r29, r1
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	ed 01       	movw	r28, r26
    3abc:	08 95       	ret

00003abe <__umulhisi3>:
    3abe:	a2 9f       	mul	r26, r18
    3ac0:	b0 01       	movw	r22, r0
    3ac2:	b3 9f       	mul	r27, r19
    3ac4:	c0 01       	movw	r24, r0
    3ac6:	a3 9f       	mul	r26, r19
    3ac8:	70 0d       	add	r23, r0
    3aca:	81 1d       	adc	r24, r1
    3acc:	11 24       	eor	r1, r1
    3ace:	91 1d       	adc	r25, r1
    3ad0:	b2 9f       	mul	r27, r18
    3ad2:	70 0d       	add	r23, r0
    3ad4:	81 1d       	adc	r24, r1
    3ad6:	11 24       	eor	r1, r1
    3ad8:	91 1d       	adc	r25, r1
    3ada:	08 95       	ret

00003adc <_exit>:
    3adc:	f8 94       	cli

00003ade <__stop_program>:
    3ade:	ff cf       	rjmp	.-2      	; 0x3ade <__stop_program>
