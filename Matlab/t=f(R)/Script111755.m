clear; clc; close all;
 
%% Zmienne globalne
 
global A J C R H_THR L_THR H_VOUT L_VOUT VcapFun;
% współczynniki korekcji 
A = [-4.6443*1E19 2.7930*1E10 -4.4837 3.2231*1E-10];
J = -400E-12;          % prąd Ibias komparatorów
R = 191200;           % rezystancja pomiarowa
 
H_THR = 3.3500;       % próg napięcia referencyjnego (H)
L_THR = 1.6770;       % próg napięcia referencyjnego (L)
 
H_VOUT = 5.0230;      % napięcie stanu logicznego '1' na wyjściu bufora
L_VOUT = 0.0000;      % napięcie stanu logicznego '0' na wyjściu bufora
 
TCNT_min = 50;        % minimalna liczba taktów zegara podczas pomiaru
                      % ograniczenie spowodowane czasem trwania przerwania
TCNT_max = 2048;      % maksymalna liczba taktów zegara podczas pomiaru
                      % ograniczenie przez ilość próbek do oversamplingu
 
%% Rozwiązanie matematyczne układu
 
syms s t Jbias Cap Res Vout Vcstart Vcstop;
Flaplace(Cap, Res, s, Vout, Vcstart, Vcstop, Jbias) = ...
    (Cap * Vcstart + Vout / Res / s - Jbias / s) / (1 / Res + s * Cap);
VcapFun = ilaplace(Flaplace) == Vcstop;
 
% maksymalny zakres badanych pojemności
[C_min, C_max] = CapacityRange(TCNT_min, TCNT_max);
 
%% Measurements Results
 
DischargingProbes = [
    476, 485, 475, 475, 499, 113, 100, 479, 493, 102, 109, 115, 480, 474, 475, 496, 116, 485, 478, 476, 505, 476, 471, 499, 473, 476, 471, 475, 484, 497, 480, 504, 111, 96, 482, 484, 508, 472, 500, 476, 508, 485, 502, 473, 474, 504, 484, 507, 114, 110, 478, 471, 490, 478, 474, 476, 495, 481, 507, 475, 471, 474, 484, 477; 
    477, 477, 495, 473, 504, 109, 108, 476, 483, 498, 115, 476, 491, 477, 502, 480, 482, 473, 468, 478, 471, 471, 500, 478, 471, 476, 470, 498, 473, 473, 475, 480, 477, 480, 478, 504, 478, 478, 477, 483, 497, 474, 472, 491, 476, 475, 480, 507, 113, 109, 117, 111, 485, 496, 120, 473, 476, 502, 470, 501, 473, 482, 477, 484; 
    107, 475, 476, 471, 475, 479, 474, 500, 472, 479, 482, 482, 503, 116, 106, 479, 476, 479, 473, 478, 476, 478, 502, 474, 483, 483, 494, 109, 477, 474, 477, 484, 502, 478, 474, 472, 505, 479, 479, 482, 505, 108, 106, 475, 470, 471, 493, 478, 480, 473, 496, 102, 105, 112, 479, 470, 498, 473, 474, 501, 477, 494, 107, 119; 
    476, 474, 474, 470, 478, 503, 111, 108, 484, 485, 473, 492, 112, 480, 494, 109, 473, 477, 475, 496, 477, 484, 478, 483, 480, 478, 482, 473, 476, 497, 113, 476, 477, 500, 120, 113, 474, 475, 494, 472, 477, 484, 473, 479, 489, 486, 472, 502, 476, 481, 475, 474, 475, 509, 483, 501, 104, 98, 480, 492, 480, 475, 477, 482; 
    504, 475, 480, 481, 472, 477, 477, 484, 470, 479, 506, 106, 485, 506, 115, 473, 483, 478, 486, 116, 476, 477, 497, 475, 478, 501, 478, 468, 494, 98, 479, 497, 117, 471, 507, 107, 95, 111, 476, 482, 507, 479, 503, 485, 473, 500, 106, 482, 471, 480, 478, 508, 110, 118, 102, 94, 104, 480, 496, 477, 481, 492, 116, 111; 
    471, 494, 100, 479, 482, 497, 476, 505, 474, 502, 110, 485, 501, 486, 472, 474, 478, 504, 471, 469, 502, 117, 485, 475, 477, 482, 493, 113, 478, 476, 471, 482, 504, 478, 483, 473, 473, 479, 478, 472, 482, 477, 473, 477, 474, 470, 496, 473, 481, 469, 481, 480, 507, 476, 470, 478, 476, 477, 472, 502, 476, 475, 480, 480; 
    478, 478, 480, 474, 475, 504, 483, 484, 474, 482, 472, 471, 507, 476, 479, 483, 480, 499, 479, 476, 476, 471, 479, 500, 475, 479, 490, 472, 481, 481, 482, 482, 472, 493, 114, 480, 471, 480, 478, 490, 118, 103, 111, 478, 484, 483, 480, 483, 110, 99, 470, 496, 481, 477, 483, 478, 483, 503, 481, 498, 113, 106, 480, 505; 
    470, 478, 502, 478, 473, 479, 473, 485, 478, 483, 472, 480, 472, 497, 475, 476, 475, 480, 469, 502, 476, 476, 499, 481, 480, 475, 483, 480, 473, 497, 473, 506, 476, 472, 501, 472, 473, 504, 109, 478, 471, 474, 480, 493, 493, 482, 502, 479, 496, 102, 473, 473, 473, 502, 474, 479, 506, 103, 474, 507, 105, 482, 491, 104; 
    476, 482, 479, 481, 478, 471, 474, 483, 505, 484, 478, 475, 479, 483, 472, 479, 503, 473, 478, 472, 478, 483, 503, 482, 476, 472, 482, 470, 484, 473, 485, 478, 483, 499, 99, 117, 485, 487, 111, 475, 476, 480, 478, 477, 477, 485, 501, 107, 109, 477, 476, 476, 472, 479, 477, 478, 478, 501, 476, 472, 502, 485, 501, 475; 
    478, 476, 502, 479, 478, 476, 484, 483, 469, 505, 481, 484, 479, 480, 478, 471, 478, 473, 491, 478, 478, 493, 124, 482, 496, 482, 475, 474, 484, 476, 476, 479, 472, 508, 479, 481, 471, 501, 109, 108, 473, 473, 472, 470, 477, 482, 504, 480, 473, 493, 474, 504, 110, 485, 505, 481, 496, 483, 479, 478, 475, 485, 473, 479; 
    502, 483, 483, 475, 498, 478, 470, 481, 480, 494, 483, 494, 478, 480, 472, 489, 115, 474, 469, 504, 484, 497, 472, 475, 481, 480, 474, 479, 481, 474, 484, 506, 480, 471, 473, 476, 474, 483, 505, 111, 475, 501, 483, 475, 502, 495, 477, 478, 474, 474, 475, 480, 472, 476, 475, 492, 480, 475, 473, 471, 502, 119, 472, 502; 
    479, 471, 479, 482, 483, 476, 481, 476, 480, 472, 502, 120, 92, 471, 474, 472, 507, 483, 500, 480, 510, 477, 505, 485, 504, 477, 474, 475, 473, 476, 481, 469, 472, 471, 477, 504, 478, 472, 474, 476, 478, 481, 479, 470, 480, 478, 504, 483, 483, 476, 480, 473, 503, 473, 477, 496, 103, 115, 97, 481, 500, 93, 483, 475; 
    116, 481, 500, 116, 103, 475, 479, 477, 497, 111, 481, 474, 472, 504, 477, 498, 478, 472, 501, 112, 479, 508, 475, 474, 477, 484, 480, 508, 112, 482, 478, 504, 475, 502, 118, 106, 475, 495, 482, 477, 488, 477, 502, 112, 480, 470, 475, 470, 480, 478, 487, 478, 470, 479, 480, 508, 479, 500, 476, 482, 469, 479, 478, 476; 
    502, 483, 503, 479, 472, 478, 505, 473, 477, 474, 472, 474, 480, 483, 476, 490, 476, 478, 472, 473, 479, 475, 482, 470, 473, 475, 503, 484, 475, 500, 103, 117, 478, 468, 478, 492, 474, 485, 478, 478, 505, 471, 480, 497, 482, 474, 483, 483, 483, 496, 471, 471, 485, 501, 477, 491, 484, 470, 477, 472, 504, 104, 481, 477; 
    479, 473, 481, 484, 496, 473, 471, 503, 478, 495, 470, 496, 483, 499, 112, 477, 510, 476, 481, 495, 115, 483, 481, 499, 119, 95, 475, 497, 473, 474, 483, 480, 477, 473, 481, 473, 474, 487, 481, 498, 116, 105, 476, 497, 485, 474, 482, 510, 105, 477, 471, 473, 482, 505, 112, 482, 477, 502, 475, 507, 479, 475, 472, 481; 
    476, 483, 472, 471, 481, 508, 479, 473, 476, 473, 475, 471, 500, 473, 498, 474, 475, 476, 473, 482, 505, 474, 475, 496, 473, 475, 480, 481, 504, 476, 472, 469, 502, 482, 474, 503, 479, 498, 472, 481, 471, 477, 470, 479, 474, 503, 481, 503, 481, 485, 468, 478, 501, 482, 472, 479, 479, 503, 474, 470, 492, 481, 507, 482; 
    478, 482, 471, 471, 479, 478, 469, 497, 110, 483, 475, 471, 483, 473, 484, 502, 474, 476, 470, 472, 475, 474, 473, 481, 472, 482, 113, 476, 504, 473, 475, 477, 491, 484, 480, 502, 473, 478, 476, 493, 118, 105, 474, 476, 478, 497, 105, 475, 505, 478, 472, 482, 507, 480, 491, 116, 105, 479, 479, 473, 503, 476, 477, 468; 
    483, 485, 479, 476, 478, 506, 98, 480, 479, 497, 111, 99, 479, 479, 504, 476, 474, 478, 479, 497, 485, 473, 474, 497, 481, 482, 502, 477, 473, 496, 485, 475, 506, 480, 508, 102, 114, 115, 484, 476, 507, 480, 480, 480, 483, 479, 473, 473, 480, 471, 483, 499, 478, 477, 504, 481, 473, 472, 478, 502, 483, 471, 81, 503; 
    482, 499, 475, 484, 501, 480, 483, 497, 114, 103, 473, 483, 468, 472, 478, 479, 474, 472, 477, 475, 490, 477, 473, 472, 503, 484, 502, 105, 477, 470, 474, 486, 476, 472, 482, 474, 505, 480, 471, 476, 505, 475, 483, 477, 483, 503, 476, 503, 476, 501, 116, 480, 506, 476, 475, 473, 472, 497, 482, 501, 92, 472, 484, 510; 
    481, 503, 472, 477, 478, 492, 485, 497, 476, 506, 476, 505, 117, 477, 475, 500, 485, 491, 104, 485, 481, 492, 479, 475, 474, 507, 483, 506, 472, 470, 483, 479, 484, 496, 479, 480, 483, 469, 471, 489, 476, 502, 102, 115, 475, 471, 472, 473, 502, 484, 496, 483, 482, 477, 472, 484, 478, 502, 120, 111, 477, 485, 479, 469; 
    105, 474, 478, 477, 491, 109, 109, 476, 471, 473, 500, 114, 113, 479, 469, 479, 477, 485, 504, 477, 502, 481, 485, 494, 478, 507, 101, 476, 496, 108, 116, 479, 485, 490, 483, 479, 477, 475, 474, 471, 474, 478, 474, 471, 479, 504, 475, 483, 504, 101, 482, 476, 476, 476, 479, 474, 478, 502, 483, 507, 481, 488, 485, 472; 
    495, 477, 480, 504, 483, 475, 505, 482, 506, 112, 478, 477, 471, 505, 477, 499, 474, 482, 477, 471, 500, 482, 475, 473, 479, 474, 473, 483, 498, 473, 498, 473, 478, 480, 471, 472, 468, 475, 474, 472, 478, 507, 480, 480, 502, 474, 471, 478, 482, 472, 507, 485, 474, 476, 477, 494, 116, 481, 475, 471, 502, 473, 477, 470; 
    499, 483, 475, 478, 502, 480, 486, 499, 479, 475, 478, 474, 483, 473, 472, 477, 474, 503, 475, 499, 471, 483, 483, 481, 489, 477, 501, 475, 473, 474, 477, 482, 483, 476, 478, 482, 468, 479, 483, 471, 497, 111, 117, 476, 500, 474, 500, 473, 474, 475, 476, 503, 477, 499, 478, 479, 503, 473, 485, 472, 483, 479, 478, 492; 
    480, 494, 119, 102, 473, 477, 477, 479, 494, 481, 475, 475, 485, 474, 475, 479, 473, 483, 477, 484, 485, 508, 477, 476, 483, 470, 478, 501, 471, 483, 484, 475, 474, 477, 478, 475, 478, 473, 475, 475, 471, 484, 483, 499, 113, 483, 476, 501, 103, 478, 478, 477, 500, 473, 480, 473, 499, 108, 98, 475, 483, 484, 504, 112; 
    476, 478, 494, 482, 495, 484, 469, 475, 477, 482, 504, 111, 479, 475, 468, 477, 481, 499, 109, 473, 484, 476, 477, 481, 471, 492, 473, 499, 483, 474, 485, 472, 481, 473, 499, 109, 485, 472, 474, 473, 483, 476, 483, 477, 477, 479, 506, 477, 480, 472, 468, 470, 505, 474, 478, 471, 477, 479, 489, 123, 118, 119, 482, 479; 
    498, 484, 497, 471, 477, 500, 476, 506, 485, 472, 478, 474, 482, 476, 483, 475, 491, 480, 502, 473, 503, 115, 485, 502, 483, 482, 474, 471, 483, 472, 481, 495, 475, 477, 481, 478, 476, 491, 476, 475, 483, 478, 470, 482, 474, 476, 483, 504, 475, 504, 481, 470, 476, 498, 479, 501, 108, 105, 483, 485, 477, 474, 502, 101; 
    477, 499, 484, 500, 472, 497, 476, 476, 478, 496, 478, 476, 481, 485, 472, 480, 473, 492, 484, 472, 485, 473, 472, 472, 488, 480, 477, 476, 479, 501, 475, 481, 475, 473, 476, 471, 504, 478, 473, 473, 497, 472, 472, 496, 113, 475, 502, 473, 473, 484, 505, 482, 477, 477, 501, 477, 478, 482, 505, 479, 479, 471, 473, 477; 
    478, 480, 475, 478, 504, 481, 475, 479, 478, 472, 505, 484, 484, 507, 109, 115, 475, 480, 478, 473, 481, 484, 492, 482, 478, 500, 482, 476, 483, 481, 474, 479, 484, 478, 503, 480, 483, 501, 101, 470, 475, 472, 472, 483, 482, 488, 475, 502, 472, 482, 500, 480, 495, 105, 473, 504, 475, 470, 506, 482, 508, 99, 472, 496; 
    471, 478, 478, 504, 475, 475, 483, 475, 507, 97, 483, 485, 484, 108, 479, 468, 482, 482, 476, 495, 115, 476, 503, 97, 478, 480, 472, 470, 505, 476, 498, 473, 482, 482, 504, 482, 479, 501, 477, 501, 116, 473, 474, 472, 474, 498, 112, 110, 479, 474, 482, 471, 479, 476, 484, 479, 505, 479, 480, 483, 482, 477, 491, 483; 
    477, 473, 478, 472, 478, 478, 504, 478, 479, 481, 477, 472, 478, 481, 480, 499, 474, 479, 474, 477, 469, 484, 474, 501, 474, 477, 477, 476, 504, 109, 470, 476, 480, 477, 480, 483, 477, 473, 479, 509, 474, 493, 483, 500, 479, 482, 507, 479, 474, 480, 481, 504, 108, 116, 475, 478, 475, 482, 494, 474, 484, 480, 484, 503; 
];
 
ChargingProbes = [
    94, 508, 484, 484, 499, 113, 100, 102, 493, 102, 109, 82, 108, 483, 484, 496, 106, 118, 490, 487, 505, 93, 475, 499, 95, 486, 474, 484, 505, 497, 103, 504, 111, 96, 112, 506, 508, 89, 500, 100, 472, 120, 502, 85, 483, 469, 121, 475, 114, 110, 103, 477, 490, 105, 482, 486, 495, 106, 475, 95, 474, 483, 507, 489; 
    103, 489, 495, 91, 487, 109, 108, 97, 505, 498, 115, 90, 491, 98, 502, 94, 501, 481, 469, 491, 474, 474, 500, 103, 475, 487, 472, 498, 91, 478, 485, 495, 489, 496, 493, 504, 96, 490, 489, 503, 497, 86, 477, 491, 96, 485, 497, 471, 113, 109, 117, 111, 103, 496, 120, 85, 486, 502, 79, 501, 88, 501, 490, 504; 
    107, 93, 486, 475, 484, 493, 483, 500, 93, 492, 501, 501, 503, 116, 106, 97, 486, 494, 479, 490, 487, 492, 502, 97, 503, 502, 494, 109, 92, 480, 489, 507, 502, 104, 482, 477, 505, 105, 492, 501, 505, 108, 106, 91, 472, 474, 493, 105, 497, 479, 496, 102, 105, 108, 494, 472, 498, 90, 483, 501, 92, 494, 107, 119; 
    486, 483, 483, 473, 492, 503, 111, 108, 115, 508, 480, 492, 112, 98, 494, 109, 88, 489, 484, 496, 99, 505, 492, 505, 496, 491, 500, 481, 487, 497, 113, 90, 491, 500, 120, 113, 92, 484, 494, 85, 488, 506, 478, 494, 489, 122, 478, 502, 88, 498, 484, 482, 485, 509, 100, 501, 104, 98, 104, 492, 109, 484, 477, 117; 
    504, 89, 495, 498, 477, 488, 489, 504, 472, 494, 506, 106, 116, 506, 115, 85, 503, 491, 486, 116, 94, 488, 497, 99, 491, 501, 101, 469, 494, 98, 102, 497, 84, 86, 507, 107, 95, 111, 91, 500, 469, 108, 503, 116, 478, 500, 106, 104, 476, 497, 490, 508, 110, 118, 102, 112, 475, 108, 496, 101, 498, 492, 116, 111; 
    476, 494, 100, 105, 501, 497, 96, 505, 94, 502, 110, 116, 501, 112, 476, 483, 492, 504, 80, 471, 502, 117, 118, 484, 489, 501, 493, 113, 95, 487, 475, 500, 469, 106, 502, 481, 479, 493, 491, 478, 501, 488, 479, 488, 482, 472, 496, 82, 498, 471, 498, 497, 507, 97, 472, 493, 487, 488, 478, 502, 91, 485, 496, 480; 
    492, 493, 496, 482, 485, 504, 110, 504, 482, 500, 477, 474, 473, 100, 494, 502, 496, 499, 100, 486, 486, 474, 492, 500, 91, 494, 490, 91, 498, 499, 501, 502, 477, 493, 114, 106, 476, 496, 491, 490, 118, 103, 111, 95, 506, 502, 496, 503, 98, 110, 83, 496, 110, 489, 502, 490, 503, 503, 104, 498, 113, 106, 98, 505; 
    472, 492, 502, 97, 481, 492, 480, 507, 490, 504, 476, 497, 476, 497, 89, 487, 484, 496, 471, 490, 102, 487, 499, 101, 494, 485, 503, 497, 479, 497, 86, 506, 94, 477, 501, 83, 478, 471, 109, 101, 475, 482, 497, 493, 471, 501, 502, 105, 496, 102, 87, 479, 480, 502, 89, 494, 506, 103, 88, 507, 105, 102, 491, 104; 
    486, 500, 494, 498, 490, 476, 481, 503, 505, 113, 492, 485, 492, 503, 476, 495, 503, 89, 490, 476, 492, 502, 503, 111, 487, 476, 500, 475, 505, 480, 506, 491, 502, 499, 99, 117, 112, 487, 111, 88, 487, 496, 490, 490, 488, 507, 501, 107, 109, 99, 486, 487, 476, 494, 489, 491, 493, 501, 94, 476, 502, 117, 501, 93; 
    491, 487, 502, 102, 490, 486, 507, 503, 471, 469, 114, 504, 494, 496, 493, 477, 491, 481, 491, 102, 493, 493, 124, 108, 496, 110, 484, 482, 506, 487, 486, 495, 477, 508, 102, 498, 474, 501, 109, 108, 87, 480, 477, 472, 489, 500, 504, 106, 478, 493, 94, 504, 110, 114, 505, 96, 496, 111, 494, 490, 484, 506, 480, 495; 
    502, 105, 503, 485, 498, 100, 474, 498, 496, 494, 119, 494, 105, 496, 476, 489, 115, 95, 471, 504, 114, 497, 79, 484, 498, 495, 482, 494, 499, 482, 506, 506, 106, 474, 480, 487, 483, 503, 505, 111, 99, 501, 108, 484, 502, 475, 480, 491, 483, 483, 484, 497, 477, 489, 484, 492, 103, 485, 481, 474, 502, 119, 80, 502; 
    108, 475, 493, 500, 504, 486, 499, 486, 496, 476, 502, 120, 92, 82, 482, 478, 507, 109, 500, 111, 487, 101, 505, 116, 504, 90, 483, 485, 481, 486, 498, 471, 477, 475, 488, 504, 95, 476, 482, 486, 492, 498, 493, 473, 496, 493, 504, 110, 504, 487, 496, 481, 469, 95, 489, 496, 103, 115, 97, 106, 500, 93, 107, 484; 
    96, 104, 500, 116, 103, 96, 494, 489, 497, 111, 101, 483, 478, 504, 97, 498, 101, 477, 501, 112, 104, 469, 101, 483, 488, 504, 496, 508, 112, 110, 490, 504, 88, 502, 118, 106, 99, 495, 116, 491, 488, 100, 502, 112, 100, 473, 485, 473, 496, 491, 487, 101, 472, 495, 495, 508, 96, 500, 98, 501, 470, 492, 490, 486; 
    502, 109, 469, 109, 477, 493, 505, 85, 488, 482, 476, 483, 497, 502, 486, 490, 97, 493, 477, 480, 493, 484, 482, 86, 478, 484, 503, 109, 485, 500, 103, 117, 87, 469, 490, 492, 97, 508, 491, 493, 471, 91, 497, 497, 106, 483, 504, 503, 502, 496, 84, 475, 509, 501, 103, 491, 116, 473, 490, 477, 504, 104, 106, 489; 
    494, 478, 499, 504, 496, 89, 475, 503, 100, 495, 83, 496, 112, 499, 112, 97, 510, 92, 499, 495, 115, 112, 499, 499, 119, 95, 96, 497, 85, 482, 504, 495, 491, 479, 499, 481, 481, 487, 109, 498, 116, 105, 89, 497, 119, 483, 500, 477, 105, 94, 475, 480, 500, 505, 112, 106, 491, 502, 91, 507, 95, 484, 477, 499; 
    487, 505, 477, 477, 499, 471, 108, 481, 487, 481, 485, 474, 500, 84, 498, 94, 484, 486, 481, 500, 505, 87, 484, 496, 90, 485, 497, 499, 504, 92, 478, 471, 502, 111, 483, 503, 97, 498, 89, 499, 475, 489, 472, 494, 483, 503, 108, 503, 100, 508, 469, 492, 501, 104, 478, 495, 495, 503, 81, 473, 492, 107, 507, 109; 
    491, 503, 476, 475, 495, 491, 470, 497, 110, 116, 484, 475, 503, 479, 505, 502, 90, 487, 473, 478, 485, 482, 480, 498, 477, 482, 113, 93, 504, 91, 485, 488, 491, 120, 497, 502, 85, 490, 487, 493, 118, 105, 90, 486, 491, 497, 105, 89, 505, 100, 479, 501, 472, 110, 491, 116, 105, 103, 493, 478, 503, 94, 489, 469; 
    503, 508, 494, 487, 492, 506, 98, 109, 495, 497, 111, 99, 103, 494, 504, 92, 483, 491, 494, 497, 119, 479, 482, 497, 108, 500, 502, 98, 479, 496, 119, 485, 506, 106, 508, 102, 114, 115, 107, 486, 507, 106, 496, 497, 502, 495, 479, 480, 495, 475, 502, 499, 105, 489, 504, 109, 480, 476, 493, 502, 103, 476, 126, 469; 
    500, 499, 96, 504, 501, 104, 504, 497, 114, 103, 84, 502, 469, 477, 493, 494, 483, 477, 489, 485, 490, 97, 478, 476, 503, 110, 502, 105, 96, 473, 483, 486, 96, 478, 501, 483, 505, 97, 474, 487, 505, 87, 502, 489, 503, 503, 93, 503, 96, 501, 116, 100, 506, 86, 485, 478, 476, 497, 106, 501, 92, 93, 505, 510; 
    108, 503, 83, 488, 491, 492, 116, 497, 101, 506, 98, 505, 117, 99, 485, 500, 114, 491, 104, 116, 498, 492, 108, 485, 482, 507, 107, 506, 83, 472, 503, 493, 507, 496, 100, 497, 503, 471, 475, 489, 101, 502, 102, 115, 91, 475, 479, 479, 502, 113, 496, 116, 501, 489, 479, 507, 493, 502, 120, 111, 95, 508, 493, 471; 
    105, 87, 493, 488, 491, 109, 109, 95, 476, 481, 500, 114, 113, 104, 471, 492, 488, 508, 504, 88, 502, 106, 508, 494, 99, 507, 101, 96, 496, 108, 116, 95, 508, 490, 113, 493, 491, 484, 481, 477, 483, 492, 483, 477, 492, 471, 99, 502, 504, 101, 108, 486, 486, 487, 495, 481, 493, 502, 106, 507, 108, 488, 119, 477; 
    495, 106, 497, 504, 113, 484, 505, 111, 506, 112, 98, 488, 474, 470, 102, 499, 93, 501, 489, 474, 500, 106, 484, 478, 492, 482, 481, 502, 498, 86, 498, 88, 491, 497, 474, 477, 469, 485, 483, 476, 491, 507, 100, 496, 502, 91, 477, 491, 482, 95, 507, 110, 482, 486, 489, 494, 116, 105, 484, 475, 502, 83, 489, 473; 
    499, 110, 484, 490, 502, 107, 510, 499, 104, 484, 490, 483, 502, 479, 476, 491, 480, 503, 90, 499, 89, 503, 504, 499, 489, 103, 501, 92, 478, 482, 488, 501, 503, 487, 493, 501, 469, 492, 502, 475, 497, 111, 117, 97, 500, 95, 500, 91, 482, 484, 487, 503, 93, 499, 97, 488, 469, 104, 506, 476, 504, 492, 492, 492; 
    497, 494, 119, 102, 92, 489, 489, 495, 494, 111, 484, 485, 506, 483, 485, 493, 481, 502, 488, 505, 508, 508, 99, 487, 502, 472, 492, 482, 90, 503, 506, 484, 482, 489, 490, 485, 478, 96, 484, 485, 475, 507, 503, 499, 113, 113, 487, 501, 103, 101, 490, 490, 500, 89, 496, 481, 481, 499, 108, 485, 503, 506, 504, 112; 
    487, 493, 494, 114, 495, 114, 471, 485, 489, 501, 504, 111, 93, 484, 469, 489, 498, 499, 109, 93, 505, 486, 491, 498, 475, 492, 94, 499, 109, 481, 485, 91, 498, 479, 499, 109, 118, 477, 482, 480, 503, 486, 483, 103, 489, 492, 506, 98, 496, 476, 469, 472, 505, 82, 490, 474, 489, 494, 489, 123, 84, 119, 105, 494; 
    498, 119, 497, 87, 488, 500, 103, 506, 110, 477, 490, 483, 482, 100, 504, 484, 491, 103, 502, 94, 503, 115, 114, 502, 112, 500, 482, 474, 503, 478, 498, 495, 97, 488, 499, 491, 489, 491, 99, 484, 502, 491, 475, 501, 483, 487, 503, 504, 97, 504, 100, 473, 486, 498, 478, 501, 108, 105, 112, 508, 488, 482, 502, 101; 
    490, 499, 110, 500, 89, 497, 95, 487, 492, 496, 96, 487, 499, 506, 476, 496, 480, 492, 114, 477, 485, 90, 477, 477, 488, 108, 477, 103, 492, 469, 101, 499, 484, 480, 486, 475, 504, 102, 479, 481, 497, 84, 477, 496, 113, 92, 502, 81, 478, 506, 505, 106, 489, 488, 501, 95, 490, 501, 505, 104, 495, 474, 478, 489; 
    106, 496, 484, 491, 504, 103, 485, 494, 490, 479, 505, 117, 507, 507, 109, 115, 87, 496, 492, 479, 499, 507, 492, 111, 493, 500, 110, 487, 503, 498, 483, 492, 506, 490, 503, 95, 503, 501, 101, 82, 484, 477, 478, 503, 501, 488, 97, 502, 83, 503, 500, 104, 495, 105, 86, 504, 91, 472, 483, 113, 508, 99, 92, 496; 
    477, 493, 491, 482, 100, 484, 502, 484, 507, 97, 112, 506, 484, 108, 101, 469, 500, 500, 487, 495, 115, 94, 503, 97, 95, 497, 476, 473, 505, 96, 498, 93, 501, 501, 504, 108, 495, 501, 100, 501, 116, 88, 483, 478, 482, 498, 112, 110, 102, 481, 501, 475, 495, 486, 506, 495, 471, 109, 496, 503, 500, 489, 491, 119; 
    490, 478, 491, 479, 490, 493, 504, 98, 495, 499, 489, 476, 492, 498, 496, 499, 93, 495, 483, 489, 471, 505, 483, 501, 84, 488, 491, 486, 504, 109, 72, 486, 496, 488, 496, 504, 488, 481, 492, 509, 89, 493, 119, 500, 101, 501, 507, 105, 483, 496, 499, 504, 108, 116, 80, 490, 485, 500, 494, 87, 507, 496, 506, 503; 
];
 
Temperature = [
    24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.4, 24.3, 24.4, 24.4, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3, 24.3;
]';
 
Humidity = [
    46.8, 46.7, 46.7, 46.6, 46.5, 46.4, 46.4, 46.3, 46.3, 46.3, 46.3, 46.2, 46.2, 46.2, 46.1, 46.1, 46.1, 46.1, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.1, 46.1, 46.1, 46.2, 46.2;
]';
 
% wyniki pojedynczych pomiarów
Capacity = [ 
    % pierwszy wiersz - pojemności z czasu ładowania
    CapacityFromCharging(Oversampling(ChargingProbes));
    % wiersz drugi - pojemności z czasu rozładowania
    CapacityFromDischarging(Oversampling(DischargingProbes)) 
] * 1E12;
 
% średnia wartość pojemności
CapacityWithoutCorrection = mean(Capacity);
% pojemność właściwa - po korekcji
C = Correction(CapacityWithoutCorrection); 
 
%% Twój Kod
 
 
 
%% Wyznaczenie charakterystyk
PrintResults(Capacity, ChargingProbes, DischargingProbes);
MeasurementTimePlt();
if size(Humidity, 1) > 1
    HumidityPlt(ChargingProbes, DischargingProbes, Humidity, Temperature);
    GenerateHistogram(ChargingProbes, DischargingProbes);
    GenerateRandomErrorPlot(ChargingProbes, DischargingProbes);
end
%GenerateSignals(2);


%% Definicje funkcji
% Funkcja wyznaczająca wartość pojemności
function C = CapacityFromCharging(Time)
    global H_THR L_THR H_VOUT J R VcapFun
    syms s t Cap Res Vout Vcstart Vcstop Jbias;
    Cfun = isolate(VcapFun, Cap);
    C = eval(rhs(subs(Cfun, {Res, t, Vout, Vcstart, Vcstop, Jbias}, ...
        {R, Time, H_VOUT, L_THR, H_THR, J})));
end
function C = CapacityFromDischarging(Time)
    global H_THR L_THR L_VOUT J R VcapFun
    syms s t Cap Res Vout Vcstart Vcstop Jbias;
    Cfun = isolate(VcapFun, Cap);
    C = eval(rhs(subs(Cfun, {Res, t, Vout, Vcstart, Vcstop, Jbias}, ...
        {R, Time, L_VOUT, H_THR, L_THR, J})));
end
 
% Funkcja wyznaczająca czas ładowania pojemności
function Time = ChargingTime(Resistance, Capacity)
    global H_THR L_THR H_VOUT J VcapFun
    syms s t Cap Res Vout Vcstart Vcstop Jbias;
    Tfun = isolate(VcapFun, t);
    Time = eval(rhs(subs(Tfun, {Res, Cap, Vout, Vcstart, Vcstop, Jbias}, ...
        {Resistance, Capacity, H_VOUT, L_THR, H_THR, J})));
end
 
% Funkcja wyznaczająca czas rozładowania pojemności
function Time = DischargingTime(Resistance, Capacity)
    global H_THR L_THR L_VOUT J VcapFun
    syms s t Cap Res Vout Vcstart Vcstop Jbias;
    Tfun = isolate(VcapFun, t);
    Time = eval(rhs(subs(Tfun, {Res, Cap, Vout, Vcstart, Vcstop, Jbias}, ...
        {Resistance, Capacity, L_VOUT, H_THR, L_THR, J})));
end
 
% Wyznaczenie maksymalnego zakresu badanych pojemności
function[C_min, C_max] = CapacityRange(Ticks_min, Ticks_max)
    C_min = max([CapacityFromCharging(Ticks_min / 16E6)...
        CapacityFromDischarging(Ticks_min / 16E6)]) ;
    C_max = min([CapacityFromCharging(Ticks_max / 16E6)...
        CapacityFromDischarging(Ticks_max / 16E6)]);
end
 
% Funkcja implementująca Oversampling
function Time = Oversampling(TicksIn)
    temp = 16 - ceil(log2(max(TicksIn)));
    bits = 3;
    if temp < 4
        bits = temp;
    end
    N = power(4, bits);
    sum = 0;
    for i = (size(TicksIn, 2) - N + 1):1:(size(TicksIn, 2))
        sum = sum + TicksIn(i);
    end
    result = bitshift(sum, -bits);
    Time = result * power(2, -bits) / 16E6;
end
 
% Korekcja wartości pojemności
function Cout = Correction(Cin)
    global A;
    C = Cin;
    if Cin > 1
        C = Cin * 1E-12;
    end
    Cout = polyval(A, C) * 1E12;
end
 
% Wyznaczenie temperatury punktu rosy
function DP = DewPoint(T, RH)
    DP = power(RH / 100.0, 0.125) * (112 + 0.9 * T) + 0.1 * T - 112;
end

% Wyświetl komunikaty
function PrintResults(Capacity, ChargingProbes, DischargingProbes)
    global C A;
    CapacityWithoutCorrection = mean(Capacity);
    fprintf('Capacity Average Value (charging):    %3.4f pF     [ %3.4f us ]\n', ...
        mean(Capacity(1,:)), Oversampling(ChargingProbes) * 1E6);
    fprintf('Capacity Average Value (discharging): %3.4f pF     [ %3.4f us ]\n\n', ...
        mean(Capacity(2,:)), Oversampling(DischargingProbes) * 1E6);
    fprintf('    Measured Capacity: %3.4f pF\n\n', CapacityWithoutCorrection);
    fprintf('    Capacity With Correction: %3.4f pF\n\n', C);
    fprintf('Correction Poly: [%1.4e %1.4e %1.4e %1.4e]\n', A);
    fprintf('Maximum random error (charging):    %3.0f ticks\n', max(max(ChargingProbes) - min(ChargingProbes)));
    fprintf('Maximum random error (discharging): %3.0f ticks\n\n', max(max(DischargingProbes) - min(DischargingProbes)));
end

% Wyznaczenie charakterystyki czasu pomiaru
function MeasurementTimePlt()
    global R C;
    figure('Name', 'Time of measurements');
    Caxis = (100:20:300);
    Taxis = [
        ChargingTime(R, Caxis * 1E-12);
        DischargingTime(R, Caxis * 1E-12)
    ] * 1E6;
    subplot(2, 1, 1);
    plot(Caxis, Taxis(1,:), Caxis, Taxis(2,:));
    title("Measurement time depends on Capacity[R = "+R * 1E-3+" kOhm]");
    legend('ChargingTime', 'DischargingTime');
    xlabel('Capacity [pF]'); ylabel('Time [us]');

    Raxis = 10E3:10E3:1E6;
    Taxis = [
        ChargingTime(Raxis, C * 1E-12);
        DischargingTime(Raxis, C * 1E-12)
    ] *1E6;
    subplot(2, 1, 2);
    plot(Raxis * 1E-3, Taxis(1,:), Raxis * 1E-3, Taxis(2,:));
    title("Measurement time depends on Resistance  [C = " + C + " pF]");
    legend('ChargingTime', 'DischargingTime');
    xlabel('Resistance [kOhm]'); ylabel('Time [us]');
end

% Wyznaczenie charakterystyki wilgotności(czujnik HS1101)
function HumidityPlt(ChargingProbes, DischargingProbes, Humidity, Temp)
    HS1101_min = 161; HS1101_max = 193;
    Capacity = [];
    DP = [];
    for i = 1:1:size(Humidity, 1)
        DP = [DP DewPoint(Temp(i), Humidity(i))];
        Capacity = [Capacity mean([...
            CapacityFromCharging(Oversampling(ChargingProbes(i,:))) * 1E12...
            CapacityFromDischarging(Oversampling(DischargingProbes(i,:))) * 1E12])];
    end
    CorrectCapacity = Correction(Capacity);
    RH = (CorrectCapacity - HS1101_min)./ (HS1101_max - HS1101_min) * 100.0;
    for i = 1:1:size(RH, 2)
        if RH(i) > 100
            RH(i) = 100;
        elseif RH(i) < 0
            RH(i) = 0;
        end
    end
    figure('Name', 'Humidity');
    subplot(2, 1, 1);
    N = 1:1:size(Humidity, 1);
    plot(N, RH, N, Humidity);
    title('Humidity');
    xlabel('N'); ylabel('RH [%]');
    legend('HS1101', 'SHTC3');
    xlim([1 N(end)]);
    subplot(2, 1, 2);
    plot(N, Temp, N, DP);
    title('Temperature');
    xlabel('N'); ylabel('Temperature [°C]');
    legend('Temperature', 'DewPoint');
    xlim([1 N(end)]);
end

% Funkcja wyznaczająca przebiegi czasowe:
function GenerateSignals(n_periods)
    global H_VOUT L_VOUT J C R H_THR L_THR;
    syms s t Cap Res Vout Vcstart Jbias;
    Vlaplace(Vout, Jbias, Cap, Res, Vcstart, s) = ...
    (Cap * Vcstart + Vout / Res / s - Jbias / s) / (1 / Res + s * Cap);
    Vcap_t = matlabFunction(ilaplace(Vlaplace));
    VCAP = []; S_THR = []; SIGNAL = [];
    TIME = 0; tc = []; td = [];
    V = 0; state = 0;
    step = 1E-9;
    for t = 0:step:1000E-6
        if state == 0
            % charging
            V = Vcap_t(H_VOUT, J, C * 1E-12, R, L_THR, t - TIME);
            VCAP(end + 1) = V;
            SIGNAL(end + 1) = H_VOUT;
            S_THR(end + 1) = L_VOUT;
            if V > H_THR
                tc(end + 1) = t - TIME;
                TIME = t;
                state = 1;
                S_THR(end) = H_VOUT;
            end
        else
            % discharging
            V = Vcap_t(L_VOUT, J, C * 1E-12, R, H_THR, t - TIME);
            VCAP(end + 1) = V;
            SIGNAL(end + 1) = L_VOUT;
            S_THR(end + 1) = L_VOUT;
            if V < L_THR
                td(end + 1) = t - TIME;
                TIME = t;
                state = 0;
                S_THR(end) = H_VOUT;
                if TIME >= n_periods * (tc(1) + td(1))
                    break;
                end
            end
        end
    end
    time = 0:step: (n_periods * (tc(1) + td(1)));

    % Przebieg napięcia na pojemności
    figure('Name', 'Measurement System Signals');
    subplot(3, 1, 1);
    plot(time * 1E6, VCAP(1, 1:size(time, 2)));
    xlabel("Time [us]"); ylabel("Capacitor Voltage[V]");
    title("Capacitor Voltage Plot");
    axis([0 time(end) * 1E6 L_THR H_THR]);


    % Przebieg przekroczenia progów napięcia:
    subplot(3, 1, 2);
    plot(time * 1E6, S_THR(1, 1:size(time, 2)));
    xlabel("Time [us]"); ylabel("Voltage [V]");
    title("Signal of exceeding the voltage threshold [S-THR]");
    axis([0 time(end) * 1E6 0 6]);

    % przebieg sygnału z MK:
    subplot(3, 1, 3);
    plot(time * 1E6, SIGNAL(1, 1:size(time, 2)));
    xlabel("Time [us]");
    ylabel("Voltage [V]");
    title("Microcontroller Signal");
    axis([0 time(end) * 1E6 0 6]);
end

function GenerateHistogram(Charging, Discharging)
    hist = [];
    Capacity = ...
        (CapacityFromCharging(Charging/16E6) + ...
            CapacityFromDischarging(Discharging/16E6))/2 * 1E12;
    CapCorr = [];
    for i = 1:1:size(Capacity, 1)
        CapCorr = [CapCorr Correction(Capacity(i))];
    end
    figure('Name', 'Histogram');
    histogram(CapCorr);
    xlabel('pojemność C [pF]');
    ylabel('liczba wystąpień');
end
function GenerateRandomErrorPlot(ChargingProbes, DischargingProbes)
    CP = []; DP = [];
    for i = 1:1:size(ChargingProbes, 1)
        CP = [CP mean(ChargingProbes(i, :))];
        DP = [DP mean(DischargingProbes(i, :))];
    end
    N = 1:1:size(ChargingProbes, 1);
    figure('Name', 'Charging')
    subplot(2, 1, 1)
    plot(N, (max(CP)-CP));
    xlabel('numer pomiaru');
    ylabel('błąd losowy [cykle zegara]');
    subplot(2, 1, 2)
    plot(N, (max(CP)-CP)/max(CP)*100);
    xlabel('numer pomiaru');
    ylabel('random error [%]');
    figure('Name', 'Discharging')
    subplot(2, 1, 1)
    plot(N, (max(DP)-DP));
    xlabel('numer pomiaru');
    ylabel('random error [ticks]');
    subplot(2, 1, 2)
    plot(N, (max(DP)-DP)/max(DP)*100);
    xlabel('numer pomiaru');
    ylabel('random error [%]');
end

